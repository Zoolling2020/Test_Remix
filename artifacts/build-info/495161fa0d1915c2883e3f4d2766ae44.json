{
	"id": "495161fa0d1915c2883e3f4d2766ae44",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.26",
	"solcLongVersion": "0.8.26+commit.8a97fa7a",
	"input": {
		"language": "Solidity",
		"sources": {
			"DADDY TATE.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// Compatible with OpenZeppelin Contracts ^5.0.0\r\npragma solidity ^0.8.20;\r\n\r\nimport \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\";\r\nimport \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\";\r\nimport \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\";\r\nimport \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\";\r\n\r\ncontract DADDYTATEFRIEND is ERC20, ERC20Burnable, ERC20Permit, Ownable {\r\n    constructor(address initialOwner)\r\n        ERC20(\"DADDY TATE FRIEND\", \"DADDY TATE\")\r\n        ERC20Permit(\"DADDY TATE FRIEND\")\r\n        Ownable(initialOwner)\r\n    {\r\n        _mint(msg.sender, 1000000000 * 10 ** decimals());\r\n    }\r\n}\r\n"
			},
			"@openzeppelin/contracts@5.0.2/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20Permit} from \"./IERC20Permit.sol\";\nimport {ERC20} from \"../ERC20.sol\";\nimport {ECDSA} from \"../../../utils/cryptography/ECDSA.sol\";\nimport {EIP712} from \"../../../utils/cryptography/EIP712.sol\";\nimport {Nonces} from \"../../../utils/Nonces.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712, Nonces {\n    bytes32 private constant PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Permit deadline has expired.\n     */\n    error ERC2612ExpiredSignature(uint256 deadline);\n\n    /**\n     * @dev Mismatched signature.\n     */\n    error ERC2612InvalidSigner(address signer, address owner);\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual {\n        if (block.timestamp > deadline) {\n            revert ERC2612ExpiredSignature(deadline);\n        }\n\n        bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        if (signer != owner) {\n            revert ERC2612InvalidSigner(signer, owner);\n        }\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\n        return super.nonces(owner);\n    }\n\n    /**\n     * @inheritdoc IERC20Permit\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ERC20} from \"../ERC20.sol\";\nimport {Context} from \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys a `value` amount of tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 value) public virtual {\n        _burn(_msgSender(), value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\n     * the caller's allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `value`.\n     */\n    function burnFrom(address account, uint256 value) public virtual {\n        _spendAllowance(account, _msgSender(), value);\n        _burn(account, value);\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC20Metadata} from \"./extensions/IERC20Metadata.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC20Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n */\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\n    mapping(address account => uint256) private _balances;\n\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `value`.\n     */\n    function transfer(address to, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 value) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `value`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `value`.\n     */\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, value);\n        _transfer(from, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _transfer(address from, address to, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        if (to == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(from, to, value);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n     * this function.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n     * Relies on the `_update` mechanism\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\n     */\n    function _mint(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidReceiver(address(0));\n        }\n        _update(address(0), account, value);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n     * Relies on the `_update` mechanism.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * NOTE: This function is not virtual, {_update} should be overridden instead\n     */\n    function _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\n\n    /**\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     *\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\n     */\n    function _approve(address owner, address spender, uint256 value) internal {\n        _approve(owner, spender, value, true);\n    }\n\n    /**\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n     *\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n     * `Approval` event during `transferFrom` operations.\n     *\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n     * true using the following override:\n     * ```\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     *     super._approve(owner, spender, value, true);\n     * }\n     * ```\n     *\n     * Requirements are the same as {_approve}.\n     */\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\n        if (owner == address(0)) {\n            revert ERC20InvalidApprover(address(0));\n        }\n        if (spender == address(0)) {\n            revert ERC20InvalidSpender(address(0));\n        }\n        _allowances[owner][spender] = value;\n        if (emitEvent) {\n            emit Approval(owner, spender, value);\n        }\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\n     *\n     * Does not update the allowance value in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Does not emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            if (currentAllowance < value) {\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\n            }\n            unchecked {\n                _approve(owner, spender, currentAllowance - value, false);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/utils/Nonces.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\n */\nabstract contract Nonces {\n    /**\n     * @dev The nonce used for an `account` is not the expected current nonce.\n     */\n    error InvalidAccountNonce(address account, uint256 currentNonce);\n\n    mapping(address account => uint256) private _nonces;\n\n    /**\n     * @dev Returns the next unused nonce for an address.\n     */\n    function nonces(address owner) public view virtual returns (uint256) {\n        return _nonces[owner];\n    }\n\n    /**\n     * @dev Consumes a nonce.\n     *\n     * Returns the current value and increments nonce.\n     */\n    function _useNonce(address owner) internal virtual returns (uint256) {\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\n        // decremented or reset. This guarantees that the nonce never overflows.\n        unchecked {\n            // It is important to do x++ and not ++x here.\n            return _nonces[owner]++;\n        }\n    }\n\n    /**\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\n     */\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\n        uint256 current = _useNonce(owner);\n        if (nonce != current) {\n            revert InvalidAccountNonce(owner, current);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\n\npragma solidity ^0.8.20;\n\nimport {MessageHashUtils} from \"./MessageHashUtils.sol\";\nimport {ShortStrings, ShortString} from \"../ShortStrings.sol\";\nimport {IERC5267} from \"../../interfaces/IERC5267.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n *\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\n */\nabstract contract EIP712 is IERC5267 {\n    using ShortStrings for *;\n\n    bytes32 private constant TYPE_HASH =\n        keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _cachedDomainSeparator;\n    uint256 private immutable _cachedChainId;\n    address private immutable _cachedThis;\n\n    bytes32 private immutable _hashedName;\n    bytes32 private immutable _hashedVersion;\n\n    ShortString private immutable _name;\n    ShortString private immutable _version;\n    string private _nameFallback;\n    string private _versionFallback;\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        _name = name.toShortStringWithFallback(_nameFallback);\n        _version = version.toShortStringWithFallback(_versionFallback);\n        _hashedName = keccak256(bytes(name));\n        _hashedVersion = keccak256(bytes(version));\n\n        _cachedChainId = block.chainid;\n        _cachedDomainSeparator = _buildDomainSeparator();\n        _cachedThis = address(this);\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\n            return _cachedDomainSeparator;\n        } else {\n            return _buildDomainSeparator();\n        }\n    }\n\n    function _buildDomainSeparator() private view returns (bytes32) {\n        return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev See {IERC-5267}.\n     */\n    function eip712Domain()\n        public\n        view\n        virtual\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        )\n    {\n        return (\n            hex\"0f\", // 01111\n            _EIP712Name(),\n            _EIP712Version(),\n            block.chainid,\n            address(this),\n            bytes32(0),\n            new uint256[](0)\n        );\n    }\n\n    /**\n     * @dev The name parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _name which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Name() internal view returns (string memory) {\n        return _name.toStringWithFallback(_nameFallback);\n    }\n\n    /**\n     * @dev The version parameter for the EIP712 domain.\n     *\n     * NOTE: By default this function reads _version which is an immutable value.\n     * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function _EIP712Version() internal view returns (string memory) {\n        return _version.toStringWithFallback(_versionFallback);\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS\n    }\n\n    /**\n     * @dev The signature derives the `address(0)`.\n     */\n    error ECDSAInvalidSignature();\n\n    /**\n     * @dev The signature has an invalid length.\n     */\n    error ECDSAInvalidSignatureLength(uint256 length);\n\n    /**\n     * @dev The signature has an S value that is in the upper half order.\n     */\n    error ECDSAInvalidSignatureS(bytes32 s);\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\n     * and a bytes32 providing additional information about the error.\n     *\n     * If no error is returned, then the address can be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\n        unchecked {\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\n            return tryRecover(hash, v, r, s);\n        }\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError, bytes32) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS, s);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\n        }\n\n        return (signer, RecoverError.NoError, bytes32(0));\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\n        _throwError(error, errorArg);\n        return recovered;\n    }\n\n    /**\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\n     */\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert ECDSAInvalidSignature();\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert ECDSAInvalidSignatureS(errorArg);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\n\npragma solidity ^0.8.20;\n\ninterface IERC5267 {\n    /**\n     * @dev MAY be emitted to signal that the domain could have changed.\n     */\n    event EIP712DomainChanged();\n\n    /**\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n     * signature.\n     */\n    function eip712Domain()\n        external\n        view\n        returns (\n            bytes1 fields,\n            string memory name,\n            string memory version,\n            uint256 chainId,\n            address verifyingContract,\n            bytes32 salt,\n            uint256[] memory extensions\n        );\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ShortStrings.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\n\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\n// | length  | 0x                                                              BB |\ntype ShortString is bytes32;\n\n/**\n * @dev This library provides functions to convert short memory strings\n * into a `ShortString` type that can be used as an immutable variable.\n *\n * Strings of arbitrary length can be optimized using this library if\n * they are short enough (up to 31 bytes) by packing them with their\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\n * fallback mechanism can be used for every other case.\n *\n * Usage example:\n *\n * ```solidity\n * contract Named {\n *     using ShortStrings for *;\n *\n *     ShortString private immutable _name;\n *     string private _nameFallback;\n *\n *     constructor(string memory contractName) {\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\n *     }\n *\n *     function name() external view returns (string memory) {\n *         return _name.toStringWithFallback(_nameFallback);\n *     }\n * }\n * ```\n */\nlibrary ShortStrings {\n    // Used as an identifier for strings longer than 31 bytes.\n    bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\n\n    error StringTooLong(string str);\n    error InvalidShortString();\n\n    /**\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\n     *\n     * This will trigger a `StringTooLong` error is the input string is too long.\n     */\n    function toShortString(string memory str) internal pure returns (ShortString) {\n        bytes memory bstr = bytes(str);\n        if (bstr.length > 31) {\n            revert StringTooLong(str);\n        }\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\n    }\n\n    /**\n     * @dev Decode a `ShortString` back to a \"normal\" string.\n     */\n    function toString(ShortString sstr) internal pure returns (string memory) {\n        uint256 len = byteLength(sstr);\n        // using `new string(len)` would work locally but is not memory safe.\n        string memory str = new string(32);\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(str, len)\n            mstore(add(str, 0x20), sstr)\n        }\n        return str;\n    }\n\n    /**\n     * @dev Return the length of a `ShortString`.\n     */\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\n        if (result > 31) {\n            revert InvalidShortString();\n        }\n        return result;\n    }\n\n    /**\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\n     */\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\n        if (bytes(value).length < 32) {\n            return toShortString(value);\n        } else {\n            StorageSlot.getStringSlot(store).value = value;\n            return ShortString.wrap(FALLBACK_SENTINEL);\n        }\n    }\n\n    /**\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\n     */\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return toString(value);\n        } else {\n            return store;\n        }\n    }\n\n    /**\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n     * {setWithFallback}.\n     *\n     * WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\n     */\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\n        if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\n            return byteLength(value);\n        } else {\n            return bytes(store).length;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\n\npragma solidity ^0.8.20;\n\nimport {Strings} from \"../Strings.sol\";\n\n/**\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n *\n * The library provides methods for generating a hash of a message that conforms to the\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n * specifications.\n */\nlibrary MessageHashUtils {\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\n     * `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n     * keccak256, although any bytes32 value can be safely used because the final digest will\n     * be re-hashed.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\") // 32 is the bytes-length of messageHash\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\n        }\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x45` (`personal_sign` messages).\n     *\n     * The digest is calculated by prefixing an arbitrary `message` with\n     * `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\n        return\n            keccak256(bytes.concat(\"\\x19Ethereum Signed Message:\\n\", bytes(Strings.toString(message.length)), message));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\n     * `0x00` (data with intended validator).\n     *\n     * The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n     * `validator` address. Then hashing the result.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(hex\"19_00\", validator, data));\n    }\n\n    /**\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n     *\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n     * `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n     *\n     * See {ECDSA-recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, hex\"19_01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            digest := keccak256(ptr, 0x42)\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts@5.0.2/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts@5.0.2/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts@5.0.2/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 8,
								"contract": "@openzeppelin/contracts@5.0.2/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol": {
				"IERC5267": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"eip712Domain()": {
								"details": "returns the fields and values that describe the domain separator used by this contract for EIP-712 signature."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"eip712Domain()\":{\"details\":\"returns the fields and values that describe the domain separator used by this contract for EIP-712 signature.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol\":\"IERC5267\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol": {
				"ERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. The default value of {decimals} is 18. To change this, you should override this function so it returns a different value. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Sets the values for {name} and {symbol}. All two of these values are immutable: they can only be set once during construction.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":\"ERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts@5.0.2/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol:ERC20",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol:ERC20",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol:ERC20",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol:ERC20",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol:ERC20",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol": {
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol": {
				"ERC20Burnable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Extension of {ERC20} that allows token holders to destroy both their own tokens and those that they have an allowance for, in a way that can be recognized off-chain (via event analysis).\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":\"ERC20Burnable\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts@5.0.2/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol:ERC20Burnable",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol": {
				"ERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`. It's a good idea to use the same `name` that is defined as the ERC20 token name.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":\"ERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts@5.0.2/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts@5.0.2/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts@5.0.2/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2229,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2231,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 1208,
								"contract": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol:ERC20Permit",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol": {
				"IERC20Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol\":\"IERC20Metadata\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol": {
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/utils/Context.sol\":\"Context\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/utils/Nonces.sol": {
				"Nonces": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Provides tracking nonces for addresses. Nonces will only increment.",
						"errors": {
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"nonces(address)": {
								"details": "Returns the next unused nonce for an address."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"nonces(address)": "7ecebe00"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides tracking nonces for addresses. Nonces will only increment.\",\"errors\":{\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"kind\":\"dev\",\"methods\":{\"nonces(address)\":{\"details\":\"Returns the next unused nonce for an address.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":\"Nonces\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 1208,
								"contract": "@openzeppelin/contracts@5.0.2/utils/Nonces.sol:Nonces",
								"label": "_nonces",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol": {
				"ShortStrings": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1255:4308  library ShortStrings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1255:4308  library ShortStrings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220dbabe861f93808de99a749ac1c456cb40d37dbcd88411bddd7f00cc6ed0aa34164736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220dbabe861f93808de99a749ac1c456cb40d37dbcd88411bddd7f00cc6ed0aa34164736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB 0xAB 0xE8 PUSH2 0xF938 ADDMOD 0xDE SWAP10 0xA7 BLOBHASH 0xAC SHR GASLIMIT PUSH13 0xB40D37DBCD88411BDDD7F00CC6 0xED EXP LOG3 COINBASE PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1255:3053:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1255:3053:11;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220dbabe861f93808de99a749ac1c456cb40d37dbcd88411bddd7f00cc6ed0aa34164736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xDB 0xAB 0xE8 PUSH2 0xF938 ADDMOD 0xDE SWAP10 0xA7 BLOBHASH 0xAC SHR GASLIMIT PUSH13 0xB40D37DBCD88411BDDD7F00CC6 0xED EXP LOG3 COINBASE PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "1255:3053:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"byteLength(ShortString)": "infinite",
								"byteLengthWithFallback(ShortString,string storage pointer)": "infinite",
								"toShortString(string memory)": "infinite",
								"toShortStringWithFallback(string memory,string storage pointer)": "infinite",
								"toString(ShortString)": "infinite",
								"toStringWithFallback(ShortString,string storage pointer)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1255,
									"end": 4308,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220dbabe861f93808de99a749ac1c456cb40d37dbcd88411bddd7f00cc6ed0aa34164736f6c634300081a0033",
									".code": [
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 1255,
											"end": 4308,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts@5.0.2/access/Ownable.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/utils/Context.sol",
								"@openzeppelin/contracts@5.0.2/utils/Nonces.sol",
								"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol",
								"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol",
								"@openzeppelin/contracts@5.0.2/utils/Strings.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/Math.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol",
								"DADDY TATE.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"This library provides functions to convert short memory strings into a `ShortString` type that can be used as an immutable variable. Strings of arbitrary length can be optimized using this library if they are short enough (up to 31 bytes) by packing them with their length (1 byte) in a single EVM word (32 bytes). Additionally, a fallback mechanism can be used for every other case. Usage example: ```solidity contract Named {     using ShortStrings for *;     ShortString private immutable _name;     string private _nameFallback;     constructor(string memory contractName) {         _name = contractName.toShortStringWithFallback(_nameFallback);     }     function name() external view returns (string memory) {         return _name.toStringWithFallback(_nameFallback);     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":\"ShortStrings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol": {
				"StorageSlot": {
					"abi": [],
					"devdoc": {
						"details": "Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol\":1245:3930  library StorageSlot {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol\":1245:3930  library StorageSlot {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220aad98eba5b3e3f2c792a2fad06c2def8579c3f5ea64c1d9966889ec02ed2eef664736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220aad98eba5b3e3f2c792a2fad06c2def8579c3f5ea64c1d9966889ec02ed2eef664736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAA 0xD9 DUP15 0xBA JUMPDEST RETURNDATACOPY EXTCODEHASH 0x2C PUSH26 0x2A2FAD06C2DEF8579C3F5EA64C1D9966889EC02ED2EEF664736F PUSH13 0x634300081A0033000000000000 ",
							"sourceMap": "1245:2685:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1245:2685:12;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220aad98eba5b3e3f2c792a2fad06c2def8579c3f5ea64c1d9966889ec02ed2eef664736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAA 0xD9 DUP15 0xBA JUMPDEST RETURNDATACOPY EXTCODEHASH 0x2C PUSH26 0x2A2FAD06C2DEF8579C3F5EA64C1D9966889EC02ED2EEF664736F PUSH13 0x634300081A0033000000000000 ",
							"sourceMap": "1245:2685:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"getAddressSlot(bytes32)": "infinite",
								"getBooleanSlot(bytes32)": "infinite",
								"getBytes32Slot(bytes32)": "infinite",
								"getBytesSlot(bytes storage pointer)": "infinite",
								"getBytesSlot(bytes32)": "infinite",
								"getStringSlot(bytes32)": "infinite",
								"getStringSlot(string storage pointer)": "infinite",
								"getUint256Slot(bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 1245,
									"end": 3930,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220aad98eba5b3e3f2c792a2fad06c2def8579c3f5ea64c1d9966889ec02ed2eef664736f6c634300081a0033",
									".code": [
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 1245,
											"end": 3930,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts@5.0.2/access/Ownable.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/utils/Context.sol",
								"@openzeppelin/contracts@5.0.2/utils/Nonces.sol",
								"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol",
								"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol",
								"@openzeppelin/contracts@5.0.2/utils/Strings.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/Math.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol",
								"DADDY TATE.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(newImplementation.code.length > 0);         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ```\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/utils/Strings.sol": {
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@5.0.2/utils/Strings.sol\":251:3098  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@5.0.2/utils/Strings.sol\":251:3098  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220864e983de5aa4ed7d438bb7691ace24eac144fbf7e46c6fb1a342a8de31abb0a64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220864e983de5aa4ed7d438bb7691ace24eac144fbf7e46c6fb1a342a8de31abb0a64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 0x4E SWAP9 RETURNDATASIZE 0xE5 0xAA 0x4E 0xD7 0xD4 CODESIZE 0xBB PUSH23 0x91ACE24EAC144FBF7E46C6FB1A342A8DE31ABB0A64736F PUSH13 0x634300081A0033000000000000 ",
							"sourceMap": "251:2847:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;251:2847:13;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220864e983de5aa4ed7d438bb7691ace24eac144fbf7e46c6fb1a342a8de31abb0a64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP7 0x4E SWAP9 RETURNDATASIZE 0xE5 0xAA 0x4E 0xD7 0xD4 CODESIZE 0xBB PUSH23 0x91ACE24EAC144FBF7E46C6FB1A342A8DE31ABB0A64736F PUSH13 0x634300081A0033000000000000 ",
							"sourceMap": "251:2847:13:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite",
								"toStringSigned(int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH #[$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [$]",
									"source": 13,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "B"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "CODECOPY",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "BYTE",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "tag",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "ADDRESS",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "PUSH",
									"source": 13,
									"value": "73"
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "MSTORE8",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 251,
									"end": 3098,
									"name": "RETURN",
									"source": 13
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220864e983de5aa4ed7d438bb7691ace24eac144fbf7e46c6fb1a342a8de31abb0a64736f6c634300081a0033",
									".code": [
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSHDEPLOYADDRESS",
											"source": 13
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "ADDRESS",
											"source": 13
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 251,
											"end": 3098,
											"name": "REVERT",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts@5.0.2/access/Ownable.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/utils/Context.sol",
								"@openzeppelin/contracts@5.0.2/utils/Nonces.sol",
								"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol",
								"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol",
								"@openzeppelin/contracts@5.0.2/utils/Strings.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/Math.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol",
								"DADDY TATE.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts@5.0.2/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol": {
				"ECDSA": {
					"abi": [
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.",
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":344:7730  library ECDSA {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220e077d124f5d78984570a3a5879b824c37016b42605fabb50a2395c5df9dc361464736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e077d124f5d78984570a3a5879b824c37016b42605fabb50a2395c5df9dc361464736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 PUSH24 0xD124F5D78984570A3A5879B824C37016B42605FABB50A239 TLOAD TSTORE 0xF9 0xDC CALLDATASIZE EQ PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "344:7386:14:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;344:7386:14;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220e077d124f5d78984570a3a5879b824c37016b42605fabb50a2395c5df9dc361464736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE0 PUSH24 0xD124F5D78984570A3A5879B824C37016B42605FABB50A239 TLOAD TSTORE 0xF9 0xDC CALLDATASIZE EQ PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "344:7386:14:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"_throwError(enum ECDSA.RecoverError,bytes32)": "infinite",
								"recover(bytes32,bytes memory)": "infinite",
								"recover(bytes32,bytes32,bytes32)": "infinite",
								"recover(bytes32,uint8,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,bytes memory)": "infinite",
								"tryRecover(bytes32,bytes32,bytes32)": "infinite",
								"tryRecover(bytes32,uint8,bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH #[$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [$]",
									"source": 14,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 14,
									"value": "B"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "CODECOPY",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP1",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MLOAD",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "BYTE",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "EQ",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH [tag]",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPI",
									"source": 14
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 14,
									"value": "4"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 14,
									"value": "24"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "REVERT",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "tag",
									"source": 14,
									"value": "1"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "JUMPDEST",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "ADDRESS",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 14,
									"value": "0"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "PUSH",
									"source": 14,
									"value": "73"
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "MSTORE8",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP3",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "DUP2",
									"source": 14
								},
								{
									"begin": 344,
									"end": 7730,
									"name": "RETURN",
									"source": 14
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220e077d124f5d78984570a3a5879b824c37016b42605fabb50a2395c5df9dc361464736f6c634300081a0033",
									".code": [
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSHDEPLOYADDRESS",
											"source": 14
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "ADDRESS",
											"source": 14
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "EQ",
											"source": 14
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 14,
											"value": "80"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 344,
											"end": 7730,
											"name": "REVERT",
											"source": 14
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts@5.0.2/access/Ownable.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/utils/Context.sol",
								"@openzeppelin/contracts@5.0.2/utils/Nonces.sol",
								"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol",
								"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol",
								"@openzeppelin/contracts@5.0.2/utils/Strings.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/Math.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol",
								"DADDY TATE.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol": {
				"EIP712": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "state-variable-immutable",
						"details": "https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.",
						"events": {
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							}
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade]."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"eip712Domain()": "84b0196e"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\",\"details\":\"https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data. The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to produce the hash of their typed data using a combination of `abi.encode` and `keccak256`. This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA ({_hashTypedDataV4}). The implementation of the domain separator was designed to be as efficient as possible while still properly updating the chain id to protect against replay attacks on an eventual fork of the chain. NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask]. NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\",\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the domain separator and parameter caches. The meaning of `name` and `version` is specified in https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]: - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol. - `version`: the current major version of the signing domain. NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart contract upgrade].\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":\"EIP712\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts@5.0.2/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts@5.0.2/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 2229,
								"contract": "@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol:EIP712",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 2231,
								"contract": "@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol:EIP712",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							}
						],
						"types": {
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol": {
				"MessageHashUtils": {
					"abi": [],
					"devdoc": {
						"details": "Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":521:3756  library MessageHashUtils {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a9f28c45fe194a979f99bc19ccf32cc328b21e5277ce13850bf34f4c6d096d9d64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a9f28c45fe194a979f99bc19ccf32cc328b21e5277ce13850bf34f4c6d096d9d64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 CALLCODE DUP13 GASLIMIT INVALID NOT BLOBBASEFEE SWAP8 SWAP16 SWAP10 0xBC NOT 0xCC RETURN 0x2C 0xC3 0x28 0xB2 0x1E MSTORE PUSH24 0xCE13850BF34F4C6D096D9D64736F6C634300081A00330000 ",
							"sourceMap": "521:3235:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;521:3235:16;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220a9f28c45fe194a979f99bc19ccf32cc328b21e5277ce13850bf34f4c6d096d9d64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xA9 CALLCODE DUP13 GASLIMIT INVALID NOT BLOBBASEFEE SWAP8 SWAP16 SWAP10 0xBC NOT 0xCC RETURN 0x2C 0xC3 0x28 0xB2 0x1E MSTORE PUSH24 0xCE13850BF34F4C6D096D9D64736F6C634300081A00330000 ",
							"sourceMap": "521:3235:16:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"toDataWithIntendedValidatorHash(address,bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes memory)": "infinite",
								"toEthSignedMessageHash(bytes32)": "infinite",
								"toTypedDataHash(bytes32,bytes32)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH #[$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [$]",
									"source": 16,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 16,
									"value": "B"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "CODECOPY",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP1",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MLOAD",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "BYTE",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "EQ",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH [tag]",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPI",
									"source": 16
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 16,
									"value": "4"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 16,
									"value": "24"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "REVERT",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "tag",
									"source": 16,
									"value": "1"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "JUMPDEST",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "ADDRESS",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 16,
									"value": "0"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "PUSH",
									"source": 16,
									"value": "73"
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "MSTORE8",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP3",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "DUP2",
									"source": 16
								},
								{
									"begin": 521,
									"end": 3756,
									"name": "RETURN",
									"source": 16
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a9f28c45fe194a979f99bc19ccf32cc328b21e5277ce13850bf34f4c6d096d9d64736f6c634300081a0033",
									".code": [
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSHDEPLOYADDRESS",
											"source": 16
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "ADDRESS",
											"source": 16
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "EQ",
											"source": 16
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 16,
											"value": "80"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "PUSH",
											"source": 16,
											"value": "0"
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "DUP1",
											"source": 16
										},
										{
											"begin": 521,
											"end": 3756,
											"name": "REVERT",
											"source": 16
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts@5.0.2/access/Ownable.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/utils/Context.sol",
								"@openzeppelin/contracts@5.0.2/utils/Nonces.sol",
								"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol",
								"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol",
								"@openzeppelin/contracts@5.0.2/utils/Strings.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/Math.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol",
								"DADDY TATE.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts@5.0.2/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@5.0.2/utils/math/Math.sol\":203:15117  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@5.0.2/utils/math/Math.sol\":203:15117  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122015ac02b6a188a2c012740b5dd1ffc66d146b70cbf1dc6bd803be5904ad13a5bb64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122015ac02b6a188a2c012740b5dd1ffc66d146b70cbf1dc6bd803be5904ad13a5bb64736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO 0xAC MUL 0xB6 LOG1 DUP9 LOG2 0xC0 SLT PUSH21 0xB5DD1FFC66D146B70CBF1DC6BD803BE5904AD13A5 0xBB PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "203:14914:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;203:14914:17;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122015ac02b6a188a2c012740b5dd1ffc66d146b70cbf1dc6bd803be5904ad13a5bb64736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 ISZERO 0xAC MUL 0xB6 LOG1 DUP9 LOG2 0xC0 SLT PUSH21 0xB5DD1FFC66D146B70CBF1DC6BD803BE5904AD13A5 0xBB PUSH5 0x736F6C6343 STOP ADDMOD BYTE STOP CALLER ",
							"sourceMap": "203:14914:17:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH #[$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [$]",
									"source": 17,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "B"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "CODECOPY",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP1",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MLOAD",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "BYTE",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "EQ",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH [tag]",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPI",
									"source": 17
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "4"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "24"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "REVERT",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "tag",
									"source": 17,
									"value": "1"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "JUMPDEST",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "ADDRESS",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "0"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "PUSH",
									"source": 17,
									"value": "73"
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "MSTORE8",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP3",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "DUP2",
									"source": 17
								},
								{
									"begin": 203,
									"end": 15117,
									"name": "RETURN",
									"source": 17
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122015ac02b6a188a2c012740b5dd1ffc66d146b70cbf1dc6bd803be5904ad13a5bb64736f6c634300081a0033",
									".code": [
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSHDEPLOYADDRESS",
											"source": 17
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "ADDRESS",
											"source": 17
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "EQ",
											"source": 17
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 17,
											"value": "80"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 17,
											"value": "40"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "MSTORE",
											"source": 17
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "PUSH",
											"source": 17,
											"value": "0"
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "DUP1",
											"source": 17
										},
										{
											"begin": 203,
											"end": 15117,
											"name": "REVERT",
											"source": 17
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts@5.0.2/access/Ownable.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/utils/Context.sol",
								"@openzeppelin/contracts@5.0.2/utils/Nonces.sol",
								"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol",
								"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol",
								"@openzeppelin/contracts@5.0.2/utils/Strings.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/Math.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol",
								"DADDY TATE.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol\":216:1263  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122036e5d64758882e5b13927c5c610cb6eeab37f573dbdb53818b73d897e276e6d664736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122036e5d64758882e5b13927c5c610cb6eeab37f573dbdb53818b73d897e276e6d664736f6c634300081a0033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xE5 0xD6 SELFBALANCE PC DUP9 0x2E JUMPDEST SGT SWAP3 PUSH29 0x5C610CB6EEAB37F573DBDB53818B73D897E276E6D664736F6C63430008 BYTE STOP CALLER ",
							"sourceMap": "216:1047:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;216:1047:18;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122036e5d64758882e5b13927c5c610cb6eeab37f573dbdb53818b73d897e276e6d664736f6c634300081a0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0xE5 0xD6 SELFBALANCE PC DUP9 0x2E JUMPDEST SGT SWAP3 PUSH29 0x5C610CB6EEAB37F573DBDB53818B73D897E276E6D664736F6C63430008 BYTE STOP CALLER ",
							"sourceMap": "216:1047:18:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH #[$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [$]",
									"source": 18,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "B"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "CODECOPY",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP1",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MLOAD",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "BYTE",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "EQ",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH [tag]",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPI",
									"source": 18
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "4"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "24"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "REVERT",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "tag",
									"source": 18,
									"value": "1"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "JUMPDEST",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "ADDRESS",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "0"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "PUSH",
									"source": 18,
									"value": "73"
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "MSTORE8",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP3",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "DUP2",
									"source": 18
								},
								{
									"begin": 216,
									"end": 1263,
									"name": "RETURN",
									"source": 18
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122036e5d64758882e5b13927c5c610cb6eeab37f573dbdb53818b73d897e276e6d664736f6c634300081a0033",
									".code": [
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSHDEPLOYADDRESS",
											"source": 18
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "ADDRESS",
											"source": 18
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "EQ",
											"source": 18
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 18,
											"value": "80"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 18,
											"value": "40"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "MSTORE",
											"source": 18
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "PUSH",
											"source": 18,
											"value": "0"
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "DUP1",
											"source": 18
										},
										{
											"begin": 216,
											"end": 1263,
											"name": "REVERT",
											"source": 18
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts@5.0.2/access/Ownable.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/utils/Context.sol",
								"@openzeppelin/contracts@5.0.2/utils/Nonces.sol",
								"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol",
								"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol",
								"@openzeppelin/contracts@5.0.2/utils/Strings.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/Math.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol",
								"DADDY TATE.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"DADDY TATE.sol": {
				"DADDYTATEFRIEND": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialOwner",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "ECDSAInvalidSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "ECDSAInvalidSignatureLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "ECDSAInvalidSignatureS",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								}
							],
							"name": "ERC2612ExpiredSignature",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "signer",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC2612InvalidSigner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentNonce",
									"type": "uint256"
								}
							],
							"name": "InvalidAccountNonce",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "InvalidShortString",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "str",
									"type": "string"
								}
							],
							"name": "StringTooLong",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EIP712DomainChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "burnFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "eip712Domain",
							"outputs": [
								{
									"internalType": "bytes1",
									"name": "fields",
									"type": "bytes1"
								},
								{
									"internalType": "string",
									"name": "name",
									"type": "string"
								},
								{
									"internalType": "string",
									"name": "version",
									"type": "string"
								},
								{
									"internalType": "uint256",
									"name": "chainId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "verifyingContract",
									"type": "address"
								},
								{
									"internalType": "bytes32",
									"name": "salt",
									"type": "bytes32"
								},
								{
									"internalType": "uint256[]",
									"name": "extensions",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ECDSAInvalidSignature()": [
								{
									"details": "The signature derives the `address(0)`."
								}
							],
							"ECDSAInvalidSignatureLength(uint256)": [
								{
									"details": "The signature has an invalid length."
								}
							],
							"ECDSAInvalidSignatureS(bytes32)": [
								{
									"details": "The signature has an S value that is in the upper half order."
								}
							],
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC2612ExpiredSignature(uint256)": [
								{
									"details": "Permit deadline has expired."
								}
							],
							"ERC2612InvalidSigner(address,address)": [
								{
									"details": "Mismatched signature."
								}
							],
							"InvalidAccountNonce(address,uint256)": [
								{
									"details": "The nonce used for an `account` is not the expected current nonce."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"EIP712DomainChanged()": {
								"details": "MAY be emitted to signal that the domain could have changed."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"burn(uint256)": {
								"details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
							},
							"burnFrom(address,uint256)": {
								"details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"eip712Domain()": {
								"details": "See {IERC-5267}."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"DADDY TATE.sol\":398:708  contract DADDYTATEFRIEND is ERC20, ERC20Burnable, ERC20Permit, Ownable {... */\n  mstore(0x40, 0x0160)\n    /* \"DADDY TATE.sol\":476:705  constructor(address initialOwner)... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"DADDY TATE.sol\":619:631  initialOwner */\n  dup1\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1574:1626  constructor(string memory name) EIP712(name, \"1\") {} */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x11\n  dup2\n  mstore\n  0x20\n  add\n  shl(0x7a, 0x1110511116481510551148119492515391)\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1613:1617  name */\n  dup1\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3328:3759  constructor(string memory name, string memory version) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x01\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xf8, 0x31)\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":1896:2009  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x11\n  dup2\n  mstore\n  0x20\n  add\n  shl(0x7a, 0x1110511116481510551148119492515391)\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x0a\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xb0, 0x44414444592054415445)\n  dup2\n  mstore\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":1970:1975  name_ */\n  dup2\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":1962:1967  _name */\n  0x03\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":1962:1975  _name = name_ */\n  swap1\n  dup2\n  tag_10\n  swap2\n  swap1\n  tag_11\n  jump\t// in\ntag_10:\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  0x04\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  tag_12\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":1995:2002  symbol_ */\n  dup3\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":1985:1992  _symbol */\n  dup3\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":1985:2002  _symbol = symbol_ */\n  tag_11\n  jump\t// in\ntag_12:\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  tag_14\n  swap2\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3401:3405  name */\n  dup4\n  swap1\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3432:3445  _nameFallback */\n  0x05\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3401:3431  name.toShortStringWithFallback */\n  tag_15\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3401:3446  name.toShortStringWithFallback(_nameFallback) */\n  jump\t// in\ntag_14:\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3393:3446  _name = name.toShortStringWithFallback(_nameFallback) */\n  0x0120\n  mstore\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  tag_16\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3467:3474  version */\n  dup2\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3501:3517  _versionFallback */\n  0x06\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3467:3500  version.toShortStringWithFallback */\n  tag_15\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3467:3518  version.toShortStringWithFallback(_versionFallback) */\n  jump\t// in\ntag_16:\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3456:3518  _version = version.toShortStringWithFallback(_versionFallback) */\n  0x0140\n  mstore\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3542:3564  keccak256(bytes(name)) */\n  dup2\n  mload\n  0x20\n  dup1\n  dup5\n  add\n  swap2\n  swap1\n  swap2\n  keccak256\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3528:3564  _hashedName = keccak256(bytes(name)) */\n  0xe0\n  mstore\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3591:3616  keccak256(bytes(version)) */\n  dup2\n  mload\n  swap1\n  dup3\n  add\n  keccak256\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3574:3616  _hashedVersion = keccak256(bytes(version)) */\n  0x0100\n  mstore\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3644:3657  block.chainid */\n  chainid\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3627:3657  _cachedChainId = block.chainid */\n  0xa0\n  mstore\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3692:3715  _buildDomainSeparator() */\n  tag_17\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n  mload(0xe0)\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n  mload(0x0100)\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  0x40\n  dup1\n  mload\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n  0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  0x20\n  dup3\n  add\n    /* \"#utility.yul\":5154:5179   */\n  mstore\n    /* \"#utility.yul\":5195:5213   */\n  swap1\n  dup2\n  add\n    /* \"#utility.yul\":5188:5222   */\n  swap3\n  swap1\n  swap3\n  mstore\n    /* \"#utility.yul\":5238:5256   */\n  0x60\n  dup3\n  add\n    /* \"#utility.yul\":5231:5265   */\n  mstore\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n  chainid\n    /* \"#utility.yul\":5281:5299   */\n  0x80\n  dup3\n  add\n    /* \"#utility.yul\":5274:5308   */\n  mstore\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4278:4282  this */\n  address\n    /* \"#utility.yul\":5324:5343   */\n  0xa0\n  dup3\n  add\n    /* \"#utility.yul\":5317:5378   */\n  mstore\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4168:4175  bytes32 */\n  0x00\n  swap1\n    /* \"#utility.yul\":5126:5145   */\n  0xc0\n  add\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n  mload(0x40)\n  0x20\n  dup2\n  dup4\n  sub\n  sub\n  dup2\n  mstore\n  swap1\n  0x40\n  mstore\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  dup1\n  mload\n  swap1\n  0x20\n  add\n  keccak256\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4187:4285  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\n  swap1\n  jump\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3692:3715  _buildDomainSeparator() */\ntag_17:\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3667:3715  _cachedDomainSeparator = _buildDomainSeparator() */\n  0x80\n  mstore\n  pop\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3747:3751  this */\n  address\n    /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3725:3752  _cachedThis = address(this) */\n  0xc0\n  mstore\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1273:1299  initialOwner == address(0) */\n  dup2\n  and\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\n  tag_21\n  jumpi\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1350:1351  0 */\n  0x00\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":3096:3147   */\n  mstore\n    /* \"#utility.yul\":3069:3087   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1322:1353  OwnableInvalidOwner(address(0)) */\ntag_22:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1269:1364  if (initialOwner == address(0)) {... */\ntag_21:\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  tag_24\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1392:1404  initialOwner */\n  dup2\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1373:1391  _transferOwnership */\n  tag_25\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1373:1405  _transferOwnership(initialOwner) */\n  jump\t// in\ntag_24:\n  pop\n    /* \"DADDY TATE.sol\":649:697  _mint(msg.sender, 1000000000 * 10 ** decimals()) */\n  tag_27\n    /* \"DADDY TATE.sol\":655:665  msg.sender */\n  caller\n    /* \"DADDY TATE.sol\":680:696  10 ** decimals() */\n  tag_30\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3075:3077  18 */\n  0x12\n    /* \"DADDY TATE.sol\":680:682  10 */\n  0x0a\n    /* \"DADDY TATE.sol\":680:696  10 ** decimals() */\n  tag_31\n  jump\t// in\ntag_30:\n    /* \"DADDY TATE.sol\":667:696  1000000000 * 10 ** decimals() */\n  tag_32\n  swap1\n    /* \"DADDY TATE.sol\":667:677  1000000000 */\n  0x3b9aca00\n    /* \"DADDY TATE.sol\":667:696  1000000000 * 10 ** decimals() */\n  tag_33\n  jump\t// in\ntag_32:\n    /* \"DADDY TATE.sol\":649:654  _mint */\n  tag_34\n    /* \"DADDY TATE.sol\":649:697  _mint(msg.sender, 1000000000 * 10 ** decimals()) */\n  jump\t// in\ntag_27:\n    /* \"DADDY TATE.sol\":476:705  constructor(address initialOwner)... */\n  pop\n    /* \"DADDY TATE.sol\":398:708  contract DADDYTATEFRIEND is ERC20, ERC20Burnable, ERC20Permit, Ownable {... */\n  jump(tag_81)\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\ntag_15:\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3010:3021  ShortString */\n  0x00\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3059:3061  32 */\n  0x20\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3043:3048  value */\n  dup4\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3037:3056  bytes(value).length */\n  mload\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3037:3061  bytes(value).length < 32 */\n  lt\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\n  iszero\n  tag_37\n  jumpi\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3084:3104  toShortString(value) */\n  tag_38\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3098:3103  value */\n  dup4\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3084:3097  toShortString */\n  tag_39\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3084:3104  toShortString(value) */\n  jump\t// in\ntag_38:\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3077:3104  return toShortString(value) */\n  swap1\n  pop\n  jump(tag_40)\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_37:\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3161:3166  store */\n  dup2\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3135:3181  StorageSlot.getStringSlot(store).value = value */\n  tag_43\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3176:3181  value */\n  dup5\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3161:3166  store */\n  dup3\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3135:3181  StorageSlot.getStringSlot(store).value = value */\n  tag_11\n  jump\t// in\ntag_43:\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n  0xff\n  swap1\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3033:3248  if (bytes(value).length < 32) {... */\ntag_40:\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2914:3254  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {... */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\ntag_25:\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3004:3010  _owner */\n  0x08\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3004:3010  _owner */\n  swap2\n  and\n  swap2\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3020:3037  _owner = newOwner */\n  swap1\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3004:3010  _owner */\n  dup3\n  swap1\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2985:3001  address oldOwner */\n  0x00\n  swap1\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2975:3099  {... */\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\ntag_34:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7791:7812  account == address(0) */\n  dup3\n  and\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\n  tag_50\n  jumpi\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0xec442f05)\n  dup2\n  mstore\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7864:7865  0 */\n  0x00\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":3096:3147   */\n  mstore\n    /* \"#utility.yul\":3069:3087   */\n  0x24\n  add\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7835:7867  ERC20InvalidReceiver(address(0)) */\n  tag_22\n    /* \"#utility.yul\":2950:3153   */\n  jump\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7787:7878  if (account == address(0)) {... */\ntag_50:\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n  tag_52\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7903:7904  0 */\n  0x00\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7907:7914  account */\n  dup4\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7916:7921  value */\n  dup4\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7887:7894  _update */\n  tag_53\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7887:7922  _update(address(0), account, value) */\n  jump\t// in\ntag_52:\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7721:7929  function _mint(address account, uint256 value) internal {... */\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1708:1994  function toShortString(string memory str) internal pure returns (ShortString) {... */\ntag_39:\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1773:1784  ShortString */\n  0x00\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1796:1813  bytes memory bstr */\n  dup1\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1822:1825  str */\n  dup3\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1796:1826  bytes memory bstr = bytes(str) */\n  swap1\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1854:1856  31 */\n  0x1f\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1840:1844  bstr */\n  dup2\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1840:1851  bstr.length */\n  mload\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1840:1856  bstr.length > 31 */\n  gt\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\n  iszero\n  tag_55\n  jumpi\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1893:1896  str */\n  dup3\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1879:1897  StringTooLong(str) */\n  mload(0x40)\n  shl(0xe0, 0x305a27a9)\n  dup2\n  mstore\n  0x04\n  add\n  tag_22\n  swap2\n  swap1\n  tag_57\n  jump\t// in\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1836:1908  if (bstr.length > 31) {... */\ntag_55:\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1974:1985  bstr.length */\n  dup1\n  mload\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1957:1970  bytes32(bstr) */\n  tag_58\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1974:1978  bstr */\n  dup3\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1957:1970  bytes32(bstr) */\n  tag_59\n  jump\t// in\ntag_58:\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1949:1985  uint256(bytes32(bstr)) | bstr.length */\n  or\n  swap4\n    /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1708:1994  function toShortString(string memory str) internal pure returns (ShortString) {... */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\ntag_53:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n  dup4\n  and\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n  tag_62\n  jumpi\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6512:6517  value */\n  dup1\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6496:6508  _totalSupply */\n  0x02\n  0x00\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n  dup3\n  dup3\n  sload\n  tag_63\n  swap2\n  swap1\n  tag_64\n  jump\t// in\ntag_63:\n  swap1\n  swap2\n  sstore\n  pop\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n  tag_65\n  swap1\n  pop\n  jump\ntag_62:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n  dup4\n  and\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6548:6567  uint256 fromBalance */\n  0x00\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n  sload\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n  dup2\n  dup2\n  lt\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n  iszero\n  tag_66\n  jumpi\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n  mload(0x40)\n  shl(0xe2, 0x391434e3)\n  dup2\n  mstore\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":6464:6496   */\n  dup6\n  and\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":6446:6497   */\n  mstore\n    /* \"#utility.yul\":6513:6531   */\n  0x24\n  dup2\n  add\n    /* \"#utility.yul\":6506:6540   */\n  dup3\n  swap1\n  mstore\n    /* \"#utility.yul\":6556:6574   */\n  0x44\n  dup2\n  add\n    /* \"#utility.yul\":6549:6583   */\n  dup4\n  swap1\n  mstore\n    /* \"#utility.yul\":6419:6437   */\n  0x64\n  add\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n  tag_22\n    /* \"#utility.yul\":6244:6589   */\n  jump\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\ntag_66:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n  dup5\n  and\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6834:6843  _balances */\n  0x00\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6852:6871  fromBalance - value */\n  swap1\n  dup3\n  swap1\n  sub\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6834:6871  _balances[from] = fromBalance - value */\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\ntag_65:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n  dup3\n  and\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n  tag_69\n  jumpi\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7073:7085  _totalSupply */\n  0x02\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n  dup1\n  sload\n  dup3\n  swap1\n  sub\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n  jump(tag_70)\ntag_69:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n  dup3\n  and\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7284:7293  _balances */\n  0x00\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n  swap1\n  dup2\n  mstore\n  0x20\n  dup2\n  swap1\n  mstore\n  0x40\n  swap1\n  keccak256\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7284:7306  _balances[to] += value */\n  dup1\n  sload\n  dup3\n  add\n  swap1\n  sstore\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\ntag_70:\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7361:7363  to */\n  dup2\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n  and\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7355:7359  from */\n  dup4\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n  and\n  0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7365:7370  value */\n  dup4\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n  mload(0x40)\n  tag_71\n  swap2\n    /* \"#utility.yul\":6740:6765   */\n  dup2\n  mstore\n    /* \"#utility.yul\":6728:6730   */\n  0x20\n    /* \"#utility.yul\":6713:6731   */\n  add\n  swap1\n    /* \"#utility.yul\":6594:6771   */\n  jump\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\ntag_71:\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log3\n    /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:304   */\ntag_3:\n    /* \"#utility.yul\":84:90   */\n  0x00\n    /* \"#utility.yul\":137:139   */\n  0x20\n    /* \"#utility.yul\":125:134   */\n  dup3\n    /* \"#utility.yul\":116:123   */\n  dup5\n    /* \"#utility.yul\":112:135   */\n  sub\n    /* \"#utility.yul\":108:140   */\n  slt\n    /* \"#utility.yul\":105:157   */\n  iszero\n  tag_83\n  jumpi\n    /* \"#utility.yul\":153:154   */\n  0x00\n    /* \"#utility.yul\":150:151   */\n  dup1\n    /* \"#utility.yul\":143:155   */\n  revert\n    /* \"#utility.yul\":105:157   */\ntag_83:\n    /* \"#utility.yul\":179:195   */\n  dup2\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":224:255   */\n  dup2\n  and\n    /* \"#utility.yul\":214:256   */\n  dup2\n  eq\n    /* \"#utility.yul\":204:274   */\n  tag_84\n  jumpi\n    /* \"#utility.yul\":270:271   */\n  0x00\n    /* \"#utility.yul\":267:268   */\n  dup1\n    /* \"#utility.yul\":260:272   */\n  revert\n    /* \"#utility.yul\":204:274   */\ntag_84:\n    /* \"#utility.yul\":293:298   */\n  swap4\n    /* \"#utility.yul\":14:304   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":309:436   */\ntag_73:\n    /* \"#utility.yul\":370:380   */\n  0x4e487b71\n    /* \"#utility.yul\":365:368   */\n  0xe0\n    /* \"#utility.yul\":361:381   */\n  shl\n    /* \"#utility.yul\":358:359   */\n  0x00\n    /* \"#utility.yul\":351:382   */\n  mstore\n    /* \"#utility.yul\":401:405   */\n  0x41\n    /* \"#utility.yul\":398:399   */\n  0x04\n    /* \"#utility.yul\":391:406   */\n  mstore\n    /* \"#utility.yul\":425:429   */\n  0x24\n    /* \"#utility.yul\":422:423   */\n  0x00\n    /* \"#utility.yul\":415:430   */\n  revert\n    /* \"#utility.yul\":441:821   */\ntag_74:\n    /* \"#utility.yul\":520:521   */\n  0x01\n    /* \"#utility.yul\":516:528   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":563:575   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":584:645   */\n  tag_87\n  jumpi\n    /* \"#utility.yul\":638:642   */\n  0x7f\n    /* \"#utility.yul\":630:636   */\n  dup3\n    /* \"#utility.yul\":626:643   */\n  and\n    /* \"#utility.yul\":616:643   */\n  swap2\n  pop\n    /* \"#utility.yul\":584:645   */\ntag_87:\n    /* \"#utility.yul\":691:693   */\n  0x20\n    /* \"#utility.yul\":683:689   */\n  dup3\n    /* \"#utility.yul\":680:694   */\n  lt\n    /* \"#utility.yul\":660:678   */\n  dup2\n    /* \"#utility.yul\":657:695   */\n  sub\n    /* \"#utility.yul\":654:815   */\n  tag_88\n  jumpi\n    /* \"#utility.yul\":737:747   */\n  0x4e487b71\n    /* \"#utility.yul\":732:735   */\n  0xe0\n    /* \"#utility.yul\":728:748   */\n  shl\n    /* \"#utility.yul\":725:726   */\n  0x00\n    /* \"#utility.yul\":718:749   */\n  mstore\n    /* \"#utility.yul\":772:776   */\n  0x22\n    /* \"#utility.yul\":769:770   */\n  0x04\n    /* \"#utility.yul\":762:777   */\n  mstore\n    /* \"#utility.yul\":800:804   */\n  0x24\n    /* \"#utility.yul\":797:798   */\n  0x00\n    /* \"#utility.yul\":790:805   */\n  revert\n    /* \"#utility.yul\":654:815   */\ntag_88:\n  pop\n    /* \"#utility.yul\":441:821   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":952:1470   */\ntag_76:\n    /* \"#utility.yul\":1054:1056   */\n  0x1f\n    /* \"#utility.yul\":1049:1052   */\n  dup3\n    /* \"#utility.yul\":1046:1057   */\n  gt\n    /* \"#utility.yul\":1043:1464   */\n  iszero\n  tag_91\n  jumpi\n    /* \"#utility.yul\":1090:1095   */\n  dup1\n    /* \"#utility.yul\":1087:1088   */\n  0x00\n    /* \"#utility.yul\":1080:1096   */\n  mstore\n    /* \"#utility.yul\":1134:1138   */\n  0x20\n    /* \"#utility.yul\":1131:1132   */\n  0x00\n    /* \"#utility.yul\":1121:1139   */\n  keccak256\n    /* \"#utility.yul\":1204:1206   */\n  0x1f\n    /* \"#utility.yul\":1192:1202   */\n  dup5\n    /* \"#utility.yul\":1188:1207   */\n  add\n    /* \"#utility.yul\":1185:1186   */\n  0x05\n    /* \"#utility.yul\":1181:1208   */\n  shr\n    /* \"#utility.yul\":1175:1179   */\n  dup2\n    /* \"#utility.yul\":1171:1209   */\n  add\n    /* \"#utility.yul\":1240:1244   */\n  0x20\n    /* \"#utility.yul\":1228:1238   */\n  dup6\n    /* \"#utility.yul\":1225:1245   */\n  lt\n    /* \"#utility.yul\":1222:1269   */\n  iszero\n  tag_92\n  jumpi\n  pop\n    /* \"#utility.yul\":1263:1267   */\n  dup1\n    /* \"#utility.yul\":1222:1269   */\ntag_92:\n    /* \"#utility.yul\":1318:1320   */\n  0x1f\n    /* \"#utility.yul\":1313:1316   */\n  dup5\n    /* \"#utility.yul\":1309:1321   */\n  add\n    /* \"#utility.yul\":1306:1307   */\n  0x05\n    /* \"#utility.yul\":1302:1322   */\n  shr\n    /* \"#utility.yul\":1296:1300   */\n  dup3\n    /* \"#utility.yul\":1292:1323   */\n  add\n    /* \"#utility.yul\":1282:1323   */\n  swap2\n  pop\n    /* \"#utility.yul\":1373:1454   */\ntag_93:\n    /* \"#utility.yul\":1391:1393   */\n  dup2\n    /* \"#utility.yul\":1384:1389   */\n  dup2\n    /* \"#utility.yul\":1381:1394   */\n  lt\n    /* \"#utility.yul\":1373:1454   */\n  iszero\n  tag_95\n  jumpi\n    /* \"#utility.yul\":1450:1451   */\n  0x00\n    /* \"#utility.yul\":1436:1452   */\n  dup2\n  sstore\n    /* \"#utility.yul\":1417:1418   */\n  0x01\n    /* \"#utility.yul\":1406:1419   */\n  add\n    /* \"#utility.yul\":1373:1454   */\n  jump(tag_93)\ntag_95:\n    /* \"#utility.yul\":1377:1380   */\n  pop\n  pop\n    /* \"#utility.yul\":1043:1464   */\ntag_91:\n    /* \"#utility.yul\":952:1470   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1646:2945   */\ntag_11:\n    /* \"#utility.yul\":1766:1776   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":1788:1818   */\n  dup2\n  gt\n    /* \"#utility.yul\":1785:1841   */\n  iszero\n  tag_99\n  jumpi\n    /* \"#utility.yul\":1821:1839   */\n  tag_99\n  tag_73\n  jump\t// in\ntag_99:\n    /* \"#utility.yul\":1850:1947   */\n  tag_100\n    /* \"#utility.yul\":1940:1946   */\n  dup2\n    /* \"#utility.yul\":1900:1938   */\n  tag_101\n    /* \"#utility.yul\":1932:1936   */\n  dup5\n    /* \"#utility.yul\":1926:1937   */\n  sload\n    /* \"#utility.yul\":1900:1938   */\n  tag_74\n  jump\t// in\ntag_101:\n    /* \"#utility.yul\":1894:1898   */\n  dup5\n    /* \"#utility.yul\":1850:1947   */\n  tag_76\n  jump\t// in\ntag_100:\n    /* \"#utility.yul\":1996:2000   */\n  0x20\n    /* \"#utility.yul\":2027:2029   */\n  0x1f\n    /* \"#utility.yul\":2016:2030   */\n  dup3\n  gt\n    /* \"#utility.yul\":2044:2045   */\n  0x01\n    /* \"#utility.yul\":2039:2688   */\n  dup2\n  eq\n  tag_103\n  jumpi\n    /* \"#utility.yul\":2732:2733   */\n  0x00\n    /* \"#utility.yul\":2749:2755   */\n  dup4\n    /* \"#utility.yul\":2746:2835   */\n  iszero\n  tag_104\n  jumpi\n  pop\n    /* \"#utility.yul\":2801:2820   */\n  dup5\n  dup3\n  add\n    /* \"#utility.yul\":2795:2821   */\n  mload\n    /* \"#utility.yul\":2746:2835   */\ntag_104:\n  not(0x00)\n    /* \"#utility.yul\":1603:1604   */\n  0x03\n    /* \"#utility.yul\":1599:1610   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":1595:1619   */\n  shr\n    /* \"#utility.yul\":1591:1620   */\n  not\n    /* \"#utility.yul\":1581:1621   */\n  and\n    /* \"#utility.yul\":1627:1628   */\n  0x01\n    /* \"#utility.yul\":1623:1634   */\n  dup5\n  swap1\n  shl\n    /* \"#utility.yul\":1578:1635   */\n  or\n    /* \"#utility.yul\":2848:2929   */\n  dup5\n  sstore\n    /* \"#utility.yul\":2009:2939   */\n  jump(tag_95)\n    /* \"#utility.yul\":2039:2688   */\ntag_103:\n    /* \"#utility.yul\":899:900   */\n  0x00\n    /* \"#utility.yul\":892:906   */\n  dup5\n  dup2\n  mstore\n    /* \"#utility.yul\":936:940   */\n  0x20\n    /* \"#utility.yul\":923:941   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":2075:2095   */\n  dup6\n  and\n  swap2\n    /* \"#utility.yul\":2193:2415   */\ntag_107:\n    /* \"#utility.yul\":2207:2214   */\n  dup3\n    /* \"#utility.yul\":2204:2205   */\n  dup2\n    /* \"#utility.yul\":2201:2215   */\n  lt\n    /* \"#utility.yul\":2193:2415   */\n  iszero\n  tag_109\n  jumpi\n    /* \"#utility.yul\":2289:2308   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":2283:2309   */\n  mload\n    /* \"#utility.yul\":2268:2310   */\n  dup3\n  sstore\n    /* \"#utility.yul\":2396:2400   */\n  0x20\n    /* \"#utility.yul\":2381:2401   */\n  swap5\n  dup6\n  add\n  swap5\n    /* \"#utility.yul\":2349:2350   */\n  0x01\n    /* \"#utility.yul\":2337:2351   */\n  swap1\n  swap3\n  add\n  swap2\n    /* \"#utility.yul\":2223:2235   */\n  add\n    /* \"#utility.yul\":2193:2415   */\n  jump(tag_107)\ntag_109:\n    /* \"#utility.yul\":2197:2200   */\n  pop\n    /* \"#utility.yul\":2443:2449   */\n  dup5\n    /* \"#utility.yul\":2434:2441   */\n  dup3\n    /* \"#utility.yul\":2431:2450   */\n  lt\n    /* \"#utility.yul\":2428:2629   */\n  iszero\n  tag_110\n  jumpi\n    /* \"#utility.yul\":2504:2523   */\n  dup7\n  dup5\n  add\n    /* \"#utility.yul\":2498:2524   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":2587:2588   */\n  0x03\n    /* \"#utility.yul\":2583:2597   */\n  dup8\n  swap1\n  shl\n    /* \"#utility.yul\":2599:2602   */\n  0xf8\n    /* \"#utility.yul\":2579:2603   */\n  and\n    /* \"#utility.yul\":2575:2612   */\n  shr\n    /* \"#utility.yul\":2571:2613   */\n  not\n    /* \"#utility.yul\":2556:2614   */\n  and\n    /* \"#utility.yul\":2541:2615   */\n  dup2\n  sstore\n    /* \"#utility.yul\":2428:2629   */\ntag_110:\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":2675:2676   */\n  0x01\n    /* \"#utility.yul\":2659:2673   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":2655:2677   */\n  add\n    /* \"#utility.yul\":2642:2678   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":1646:2945   */\n  jump\t// out\n    /* \"#utility.yul\":3158:3285   */\ntag_78:\n    /* \"#utility.yul\":3219:3229   */\n  0x4e487b71\n    /* \"#utility.yul\":3214:3217   */\n  0xe0\n    /* \"#utility.yul\":3210:3230   */\n  shl\n    /* \"#utility.yul\":3207:3208   */\n  0x00\n    /* \"#utility.yul\":3200:3231   */\n  mstore\n    /* \"#utility.yul\":3250:3254   */\n  0x11\n    /* \"#utility.yul\":3247:3248   */\n  0x04\n    /* \"#utility.yul\":3240:3255   */\n  mstore\n    /* \"#utility.yul\":3274:3278   */\n  0x24\n    /* \"#utility.yul\":3271:3272   */\n  0x00\n    /* \"#utility.yul\":3264:3279   */\n  revert\n    /* \"#utility.yul\":3290:3665   */\ntag_79:\n    /* \"#utility.yul\":3378:3379   */\n  0x01\n    /* \"#utility.yul\":3396:3401   */\n  dup2\n    /* \"#utility.yul\":3410:3659   */\ntag_114:\n    /* \"#utility.yul\":3431:3432   */\n  0x01\n    /* \"#utility.yul\":3421:3429   */\n  dup5\n    /* \"#utility.yul\":3418:3433   */\n  gt\n    /* \"#utility.yul\":3410:3659   */\n  iszero\n  tag_116\n  jumpi\n    /* \"#utility.yul\":3481:3485   */\n  dup1\n    /* \"#utility.yul\":3476:3479   */\n  dup6\n    /* \"#utility.yul\":3472:3486   */\n  div\n    /* \"#utility.yul\":3466:3470   */\n  dup2\n    /* \"#utility.yul\":3463:3487   */\n  gt\n    /* \"#utility.yul\":3460:3510   */\n  iszero\n  tag_118\n  jumpi\n    /* \"#utility.yul\":3490:3508   */\n  tag_118\n  tag_78\n  jump\t// in\ntag_118:\n    /* \"#utility.yul\":3540:3541   */\n  0x01\n    /* \"#utility.yul\":3530:3538   */\n  dup5\n    /* \"#utility.yul\":3526:3542   */\n  and\n    /* \"#utility.yul\":3523:3572   */\n  iszero\n  tag_119\n  jumpi\n    /* \"#utility.yul\":3554:3570   */\n  swap1\n  dup2\n  mul\n  swap1\n    /* \"#utility.yul\":3523:3572   */\ntag_119:\n    /* \"#utility.yul\":3637:3638   */\n  0x01\n    /* \"#utility.yul\":3633:3649   */\n  swap4\n  swap1\n  swap4\n  shr\n  swap3\n    /* \"#utility.yul\":3593:3608   */\n  dup1\n  mul\n    /* \"#utility.yul\":3410:3659   */\n  jump(tag_114)\ntag_116:\n    /* \"#utility.yul\":3290:3665   */\n  swap4\n  pop\n  swap4\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":3670:4572   */\ntag_80:\n    /* \"#utility.yul\":3719:3724   */\n  0x00\n    /* \"#utility.yul\":3749:3757   */\n  dup3\n    /* \"#utility.yul\":3739:3819   */\n  tag_121\n  jumpi\n  pop\n    /* \"#utility.yul\":3790:3791   */\n  0x01\n    /* \"#utility.yul\":3804:3809   */\n  jump(tag_40)\n    /* \"#utility.yul\":3739:3819   */\ntag_121:\n    /* \"#utility.yul\":3838:3842   */\n  dup2\n    /* \"#utility.yul\":3828:3904   */\n  tag_122\n  jumpi\n  pop\n    /* \"#utility.yul\":3875:3876   */\n  0x00\n    /* \"#utility.yul\":3889:3894   */\n  jump(tag_40)\n    /* \"#utility.yul\":3828:3904   */\ntag_122:\n    /* \"#utility.yul\":3920:3924   */\n  dup2\n    /* \"#utility.yul\":3938:3939   */\n  0x01\n    /* \"#utility.yul\":3933:3992   */\n  dup2\n  eq\n  tag_124\n  jumpi\n    /* \"#utility.yul\":4006:4007   */\n  0x02\n    /* \"#utility.yul\":4001:4175   */\n  dup2\n  eq\n  tag_125\n  jumpi\n    /* \"#utility.yul\":3913:4175   */\n  jump(tag_123)\n    /* \"#utility.yul\":3933:3992   */\ntag_124:\n    /* \"#utility.yul\":3963:3964   */\n  0x01\n    /* \"#utility.yul\":3954:3964   */\n  swap2\n  pop\n    /* \"#utility.yul\":3977:3982   */\n  pop\n  jump(tag_40)\n    /* \"#utility.yul\":4001:4175   */\ntag_125:\n    /* \"#utility.yul\":4038:4041   */\n  0xff\n    /* \"#utility.yul\":4028:4036   */\n  dup5\n    /* \"#utility.yul\":4025:4042   */\n  gt\n    /* \"#utility.yul\":4022:4065   */\n  iszero\n  tag_127\n  jumpi\n    /* \"#utility.yul\":4045:4063   */\n  tag_127\n  tag_78\n  jump\t// in\ntag_127:\n  pop\n  pop\n    /* \"#utility.yul\":4101:4102   */\n  0x01\n    /* \"#utility.yul\":4087:4103   */\n  dup3\n  shl\n    /* \"#utility.yul\":4160:4165   */\n  jump(tag_40)\n    /* \"#utility.yul\":3913:4175   */\ntag_123:\n  pop\n    /* \"#utility.yul\":4259:4261   */\n  0x20\n    /* \"#utility.yul\":4249:4257   */\n  dup4\n    /* \"#utility.yul\":4246:4262   */\n  lt\n    /* \"#utility.yul\":4240:4243   */\n  0x0133\n    /* \"#utility.yul\":4234:4238   */\n  dup4\n    /* \"#utility.yul\":4231:4244   */\n  lt\n    /* \"#utility.yul\":4227:4263   */\n  and\n    /* \"#utility.yul\":4221:4223   */\n  0x4e\n    /* \"#utility.yul\":4211:4219   */\n  dup5\n    /* \"#utility.yul\":4208:4224   */\n  lt\n    /* \"#utility.yul\":4203:4205   */\n  0x0b\n    /* \"#utility.yul\":4197:4201   */\n  dup5\n    /* \"#utility.yul\":4194:4206   */\n  lt\n    /* \"#utility.yul\":4190:4225   */\n  and\n    /* \"#utility.yul\":4187:4264   */\n  or\n    /* \"#utility.yul\":4184:4387   */\n  iszero\n  tag_128\n  jumpi\n  pop\n    /* \"#utility.yul\":4296:4315   */\n  dup2\n  dup2\n  exp\n    /* \"#utility.yul\":4372:4377   */\n  jump(tag_40)\n    /* \"#utility.yul\":4184:4387   */\ntag_128:\n    /* \"#utility.yul\":4419:4461   */\n  tag_129\n  not(0x00)\n    /* \"#utility.yul\":4444:4452   */\n  dup5\n    /* \"#utility.yul\":4438:4442   */\n  dup5\n    /* \"#utility.yul\":4419:4461   */\n  tag_79\n  jump\t// in\ntag_129:\n    /* \"#utility.yul\":4497:4503   */\n  dup1\n    /* \"#utility.yul\":4493:4494   */\n  0x00\n    /* \"#utility.yul\":4489:4495   */\n  not\n    /* \"#utility.yul\":4485:4504   */\n  div\n    /* \"#utility.yul\":4476:4483   */\n  dup3\n    /* \"#utility.yul\":4473:4505   */\n  gt\n    /* \"#utility.yul\":4470:4528   */\n  iszero\n  tag_131\n  jumpi\n    /* \"#utility.yul\":4508:4526   */\n  tag_131\n  tag_78\n  jump\t// in\ntag_131:\n    /* \"#utility.yul\":4546:4566   */\n  mul\n  swap4\n    /* \"#utility.yul\":3670:4572   */\n  swap3\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":4577:4717   */\ntag_31:\n    /* \"#utility.yul\":4635:4640   */\n  0x00\n    /* \"#utility.yul\":4664:4711   */\n  tag_84\n    /* \"#utility.yul\":4705:4709   */\n  0xff\n    /* \"#utility.yul\":4695:4703   */\n  dup5\n    /* \"#utility.yul\":4691:4710   */\n  and\n    /* \"#utility.yul\":4685:4689   */\n  dup4\n    /* \"#utility.yul\":4664:4711   */\n  tag_80\n  jump\t// in\n    /* \"#utility.yul\":4722:4890   */\ntag_33:\n    /* \"#utility.yul\":4795:4804   */\n  dup1\n  dup3\n  mul\n    /* \"#utility.yul\":4826:4835   */\n  dup2\n  iszero\n    /* \"#utility.yul\":4843:4858   */\n  dup3\n  dup3\n  div\n    /* \"#utility.yul\":4837:4859   */\n  dup5\n  eq\n    /* \"#utility.yul\":4823:4860   */\n  or\n    /* \"#utility.yul\":4813:4884   */\n  tag_40\n  jumpi\n    /* \"#utility.yul\":4864:4882   */\n  tag_40\n  tag_78\n  jump\t// in\n    /* \"#utility.yul\":5389:5807   */\ntag_57:\n    /* \"#utility.yul\":5538:5540   */\n  0x20\n    /* \"#utility.yul\":5527:5536   */\n  dup2\n    /* \"#utility.yul\":5520:5541   */\n  mstore\n    /* \"#utility.yul\":5501:5505   */\n  0x00\n    /* \"#utility.yul\":5570:5576   */\n  dup3\n    /* \"#utility.yul\":5564:5577   */\n  mload\n    /* \"#utility.yul\":5613:5619   */\n  dup1\n    /* \"#utility.yul\":5608:5610   */\n  0x20\n    /* \"#utility.yul\":5597:5606   */\n  dup5\n    /* \"#utility.yul\":5593:5611   */\n  add\n    /* \"#utility.yul\":5586:5620   */\n  mstore\n    /* \"#utility.yul\":5672:5678   */\n  dup1\n    /* \"#utility.yul\":5667:5669   */\n  0x20\n    /* \"#utility.yul\":5659:5665   */\n  dup6\n    /* \"#utility.yul\":5655:5670   */\n  add\n    /* \"#utility.yul\":5650:5652   */\n  0x40\n    /* \"#utility.yul\":5639:5648   */\n  dup6\n    /* \"#utility.yul\":5635:5653   */\n  add\n    /* \"#utility.yul\":5629:5679   */\n  mcopy\n    /* \"#utility.yul\":5728:5729   */\n  0x00\n    /* \"#utility.yul\":5723:5725   */\n  0x40\n    /* \"#utility.yul\":5714:5720   */\n  dup3\n    /* \"#utility.yul\":5703:5712   */\n  dup6\n    /* \"#utility.yul\":5699:5721   */\n  add\n    /* \"#utility.yul\":5695:5726   */\n  add\n    /* \"#utility.yul\":5688:5730   */\n  mstore\n    /* \"#utility.yul\":5798:5800   */\n  0x40\n    /* \"#utility.yul\":5791:5793   */\n  0x1f\n    /* \"#utility.yul\":5787:5794   */\n  not\n    /* \"#utility.yul\":5782:5784   */\n  0x1f\n    /* \"#utility.yul\":5774:5780   */\n  dup4\n    /* \"#utility.yul\":5770:5785   */\n  add\n    /* \"#utility.yul\":5766:5795   */\n  and\n    /* \"#utility.yul\":5755:5764   */\n  dup5\n    /* \"#utility.yul\":5751:5796   */\n  add\n    /* \"#utility.yul\":5747:5801   */\n  add\n    /* \"#utility.yul\":5739:5801   */\n  swap2\n  pop\n  pop\n    /* \"#utility.yul\":5389:5807   */\n  swap3\n  swap2\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":5812:6109   */\ntag_59:\n    /* \"#utility.yul\":5930:5942   */\n  dup1\n  mload\n    /* \"#utility.yul\":5977:5981   */\n  0x20\n    /* \"#utility.yul\":5966:5982   */\n  dup1\n  dup4\n  add\n    /* \"#utility.yul\":5960:5983   */\n  mload\n  swap2\n    /* \"#utility.yul\":5930:5942   */\n  swap1\n    /* \"#utility.yul\":5995:6011   */\n  dup2\n  lt\n    /* \"#utility.yul\":5992:6103   */\n  iszero\n  tag_88\n  jumpi\n  not(0x00)\n    /* \"#utility.yul\":6069:6073   */\n  0x20\n    /* \"#utility.yul\":6065:6082   */\n  swap2\n  swap1\n  swap2\n  sub\n    /* \"#utility.yul\":6062:6063   */\n  0x03\n    /* \"#utility.yul\":6058:6083   */\n  shl\n    /* \"#utility.yul\":6054:6092   */\n  shl\n    /* \"#utility.yul\":6043:6093   */\n  and\n  swap2\n    /* \"#utility.yul\":5812:6109   */\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":6114:6239   */\ntag_64:\n    /* \"#utility.yul\":6179:6188   */\n  dup1\n  dup3\n  add\n    /* \"#utility.yul\":6200:6210   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":6197:6233   */\n  iszero\n  tag_40\n  jumpi\n    /* \"#utility.yul\":6213:6231   */\n  tag_40\n  tag_78\n  jump\t// in\n    /* \"#utility.yul\":6594:6771   */\ntag_81:\n    /* \"DADDY TATE.sol\":398:708  contract DADDYTATEFRIEND is ERC20, ERC20Burnable, ERC20Permit, Ownable {... */\n  mload(0x80)\n  mload(0xa0)\n  mload(0xc0)\n  mload(0xe0)\n  mload(0x0100)\n  mload(0x0120)\n  mload(0x0140)\n  codecopy(0x00, dataOffset(sub_0), dataSize(sub_0))\n  0x00\n  assignImmutable(\"0x88a9212fd0f7b4413dd5e22695ef38344770f45b3083970cb665e0e17dcb0bd6\")\n  0x00\n  assignImmutable(\"0x1a9d81b69a492c90d45241c17e21e75a0dfce976e6e4f4787646342d15de5831\")\n  0x00\n  assignImmutable(\"0xdf2d24c2d874d48b2dabce9e2d6532f89ac89bcd3a2fa18c072f46a075054de9\")\n  0x00\n  assignImmutable(\"0xbc3ba252f8041edd3ef6da5977b996ba149c3c4e1b7a0e1b1cfeb5ce24e1a570\")\n  0x00\n  assignImmutable(\"0xf73cad1bd82f5ecfaa44e643676c8bc2dbfff68b10bdfd2ece012251191c9803\")\n  0x00\n  assignImmutable(\"0xfd6071d659db89e8c5cd76f742b98262bad343c48d8e112fec697f28b0f6a85d\")\n  0x00\n  assignImmutable(\"0x0c33b51a7fc957312a3715e50adff78df156f236b317db19e164c2154d0c029f\")\n  return(0x00, dataSize(sub_0))\nstop\n\nsub_0: assembly {\n        /* \"DADDY TATE.sol\":398:708  contract DADDYTATEFRIEND is ERC20, ERC20Burnable, ERC20Permit, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x79cc6790\n      gt\n      tag_21\n      jumpi\n      dup1\n      0x95d89b41\n      gt\n      tag_22\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xd505accf\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_19\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_22:\n      dup1\n      0x79cc6790\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x7ecebe00\n      eq\n      tag_13\n      jumpi\n      dup1\n      0x84b0196e\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_15\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_21:\n      dup1\n      0x313ce567\n      gt\n      tag_23\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x3644e515\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x42966c68\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_11\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_3:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      tag_26\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n    tag_26:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_4:\n      tag_28\n      tag_29\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_29:\n      tag_31\n      jump\t// in\n    tag_28:\n      mload(0x40)\n        /* \"#utility.yul\":1181:1195   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1174:1196   */\n      iszero\n        /* \"#utility.yul\":1156:1197   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1144:1146   */\n      0x20\n        /* \"#utility.yul\":1129:1147   */\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n      tag_26\n        /* \"#utility.yul\":1016:1203   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3222:3234  _totalSupply */\n      sload(0x02)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n    tag_34:\n      mload(0x40)\n        /* \"#utility.yul\":1354:1379   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3144:3241  function totalSupply() public view virtual returns (uint256) {... */\n      tag_26\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_6:\n      tag_28\n      tag_39\n      calldatasize\n      0x04\n      tag_40\n      jump\t// in\n    tag_39:\n      tag_41\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3075:3077  18 */\n      0x12\n        /* \"#utility.yul\":1911:1947   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1899:1901   */\n      0x20\n        /* \"#utility.yul\":1884:1902   */\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3002:3084  function decimals() public view virtual returns (uint8) {... */\n      tag_26\n        /* \"#utility.yul\":1769:1953   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_8:\n      tag_34\n      tag_48\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n    tag_9:\n      tag_51\n      tag_52\n      calldatasize\n      0x04\n      tag_53\n      jump\t// in\n    tag_52:\n      tag_54\n      jump\t// in\n    tag_51:\n      stop\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n    tag_10:\n      tag_34\n      tag_56\n      calldatasize\n      0x04\n      tag_57\n      jump\t// in\n    tag_56:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3364:3371  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3390:3408  _balances[account] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3299:3415  function balanceOf(address account) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_11:\n      tag_51\n      tag_61\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_12:\n      tag_51\n      tag_63\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_63:\n      tag_64\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2406:2549  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_13:\n      tag_34\n      tag_66\n      calldatasize\n      0x04\n      tag_57\n      jump\t// in\n    tag_66:\n      tag_67\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n    tag_14:\n      tag_69\n      tag_70\n      jump\t// in\n    tag_69:\n      mload(0x40)\n      tag_26\n      swap8\n      swap7\n      swap6\n      swap5\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_72\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n    tag_15:\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1710:1716  _owner */\n      sload(0x08)\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1710:1716  _owner */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3951:4002   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3939:3941   */\n      0x20\n        /* \"#utility.yul\":3924:3942   */\n      add\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1638:1723  function owner() public view virtual returns (address) {... */\n      tag_26\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_16:\n      tag_24\n      tag_78\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_17:\n      tag_28\n      tag_81\n      calldatasize\n      0x04\n      tag_30\n      jump\t// in\n    tag_81:\n      tag_82\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n    tag_18:\n      tag_51\n      tag_85\n      calldatasize\n      0x04\n      tag_86\n      jump\t// in\n    tag_85:\n      tag_87\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n    tag_19:\n      tag_34\n      tag_89\n      calldatasize\n      0x04\n      tag_90\n      jump\t// in\n    tag_89:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3926:3933  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3846:3986  function allowance(address owner, address spender) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_20:\n      tag_51\n      tag_94\n      calldatasize\n      0x04\n      tag_57\n      jump\t// in\n    tag_94:\n      tag_95\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n    tag_25:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":2119:2132  string memory */\n      0x60\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":2151:2156  _name */\n      0x03\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":2144:2156  return _name */\n      dup1\n      sload\n      tag_97\n      swap1\n      tag_98\n      jump\t// in\n    tag_97:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_99\n      swap1\n      tag_98\n      jump\t// in\n    tag_99:\n      dup1\n      iszero\n      tag_100\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_101\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_100)\n    tag_101:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_102:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_102\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_100:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":2074:2163  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_31:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4366:4370  bool */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      tag_106\n        /* \"@openzeppelin/contracts@5.0.2/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4436:4443  spender */\n      dup6\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4445:4450  value */\n      dup6\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4420:4428  _approve */\n      tag_107\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4420:4451  _approve(owner, spender, value) */\n      jump\t// in\n    tag_106:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4468:4472  true */\n      0x01\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4461:4472  return true */\n      swap2\n      pop\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":4293:4479  function approve(address spender, uint256 value) public virtual returns (bool) {... */\n    tag_103:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n    tag_41:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5126:5130  bool */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      tag_111\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5198:5202  from */\n      dup6\n        /* \"@openzeppelin/contracts@5.0.2/utils/Context.sol\":735:745  msg.sender */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5213:5218  value */\n      dup6\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5182:5197  _spendAllowance */\n      tag_112\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5182:5219  _spendAllowance(from, spender, value) */\n      jump\t// in\n    tag_111:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      tag_113\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5239:5243  from */\n      dup6\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5245:5247  to */\n      dup6\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5249:5254  value */\n      dup6\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5229:5238  _transfer */\n      tag_114\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5229:5255  _transfer(from, to, value) */\n      jump\t// in\n    tag_113:\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5272:5276  true */\n      0x01\n      swap5\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5039:5283  function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n    tag_48:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2715:2722  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2741:2761  _domainSeparatorV4() */\n      tag_117\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2741:2759  _domainSeparatorV4 */\n      tag_118\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2741:2761  _domainSeparatorV4() */\n      jump\t// in\n    tag_117:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2734:2761  return _domainSeparatorV4() */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2656:2768  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n    tag_54:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":672:698  _burn(_msgSender(), value) */\n      tag_120\n        /* \"@openzeppelin/contracts@5.0.2/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":692:697  value */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":672:677  _burn */\n      tag_122\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":672:698  _burn(_msgSender(), value) */\n      jump\t// in\n    tag_120:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":618:705  function burn(uint256 value) public virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n    tag_61:\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_125\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_126\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_125:\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      tag_128\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2384:2385  0 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2357:2375  _transferOwnership */\n      tag_129\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2357:2387  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_128:\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2293:2394  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n    tag_64:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1096:1141  _spendAllowance(account, _msgSender(), value) */\n      tag_131\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1112:1119  account */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1135:1140  value */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1096:1111  _spendAllowance */\n      tag_112\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1096:1141  _spendAllowance(account, _msgSender(), value) */\n      jump\t// in\n    tag_131:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1151:1172  _burn(account, value) */\n      tag_133\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1157:1164  account */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1166:1171  value */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1151:1156  _burn */\n      tag_122\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1151:1172  _burn(account, value) */\n      jump\t// in\n    tag_133:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":1021:1179  function burnFrom(address account, uint256 value) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2406:2549  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {... */\n    tag_67:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":624:638  _nonces[owner] */\n      dup2\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2497:2504  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":624:638  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":624:631  _nonces */\n      0x07\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":624:638  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2523:2542  super.nonces(owner) */\n      tag_103\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":538:645  function nonces(address owner) public view virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n    tag_70:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5242:5255  bytes1 fields */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5269:5287  string memory name */\n      0x60\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5301:5322  string memory version */\n      dup1\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5336:5351  uint256 chainId */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5365:5390  address verifyingContract */\n      dup1\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5404:5416  bytes32 salt */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5430:5457  uint256[] memory extensions */\n      0x60\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5533:5546  _EIP712Name() */\n      tag_138\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5533:5544  _EIP712Name */\n      tag_139\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5533:5546  _EIP712Name() */\n      jump\t// in\n    tag_138:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5560:5576  _EIP712Version() */\n      tag_140\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5560:5574  _EIP712Version */\n      tag_141\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5560:5576  _EIP712Version() */\n      jump\t// in\n    tag_140:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5652:5653  0 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      shl(0xf8, 0x0f)\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5482:5694  return (... */\n      swap12\n      swap4\n      swap11\n      pop\n      swap2\n      swap9\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5590:5603  block.chainid */\n      chainid\n      swap8\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5625:5629  this */\n      address\n      swap7\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5652:5653  0 */\n      swap5\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5668:5684  new uint256[](0) */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5482:5694  return (... */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5144:5701  function eip712Domain()... */\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":2276:2369  function symbol() public view virtual returns (string memory) {... */\n    tag_78:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":2323:2336  string memory */\n      0x60\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":2355:2362  _symbol */\n      0x04\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":2348:2362  return _symbol */\n      dup1\n      sload\n      tag_97\n      swap1\n      tag_98\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3610:3788  function transfer(address to, uint256 value) public virtual returns (bool) {... */\n    tag_82:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3679:3683  bool */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      tag_106\n        /* \"@openzeppelin/contracts@5.0.2/utils/Context.sol\":735:745  msg.sender */\n      dup2\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3750:3752  to */\n      dup6\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3754:3759  value */\n      dup6\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3733:3742  _transfer */\n      tag_114\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3733:3760  _transfer(owner, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n    tag_87:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1901:1909  deadline */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1883:1898  block.timestamp */\n      timestamp\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1883:1909  block.timestamp > deadline */\n      gt\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1879:1976  if (block.timestamp > deadline) {... */\n      iszero\n      tag_157\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1932:1965  ERC2612ExpiredSignature(deadline) */\n      mload(0x40)\n      shl(0xe1, 0x313c8981)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1354:1379   */\n      dup6\n      swap1\n      mstore\n        /* \"#utility.yul\":1327:1345   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1932:1965  ERC2612ExpiredSignature(deadline) */\n    tag_158:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1879:1976  if (block.timestamp > deadline) {... */\n    tag_157:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1986:2004  bytes32 structHash */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1022:1117  keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\") */\n      0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2045:2050  owner */\n      dup9\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2052:2059  spender */\n      dup9\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2061:2066  value */\n      dup9\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2068:2084  _useNonce(owner) */\n      tag_159\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2078:2083  owner */\n      dup13\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      and\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":819:826  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":1121:1128  _nonces */\n      0x07\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":1121:1135  _nonces[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":1121:1137  _nonces[owner]++ */\n      dup1\n      sload\n      0x01\n      dup2\n      add\n      swap1\n      swap2\n      sstore\n      swap1\n        /* \"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":759:1154  function _useNonce(address owner) internal virtual returns (uint256) {... */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2068:2084  _useNonce(owner) */\n    tag_159:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2017:2095  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      0x40\n      dup1\n      mload\n      0x20\n      dup2\n      add\n        /* \"#utility.yul\":5990:6015   */\n      swap7\n      swap1\n      swap7\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6051:6083   */\n      swap5\n      dup6\n      and\n        /* \"#utility.yul\":6031:6049   */\n      swap1\n      dup7\n      add\n        /* \"#utility.yul\":6024:6084   */\n      mstore\n        /* \"#utility.yul\":6120:6152   */\n      swap3\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":6100:6118   */\n      0x60\n      dup5\n      add\n        /* \"#utility.yul\":6093:6153   */\n      mstore\n        /* \"#utility.yul\":6169:6187   */\n      0x80\n      dup4\n      add\n        /* \"#utility.yul\":6162:6196   */\n      mstore\n        /* \"#utility.yul\":6212:6231   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":6205:6240   */\n      mstore\n        /* \"#utility.yul\":6256:6275   */\n      0xc0\n      dup2\n      add\n        /* \"#utility.yul\":6249:6284   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":5962:5981   */\n      0xe0\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2017:2095  abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2007:2096  keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1986:2096  bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline)) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2107:2119  bytes32 hash */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2122:2150  _hashTypedDataV4(structHash) */\n      tag_163\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2139:2149  structHash */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2122:2138  _hashTypedDataV4 */\n      tag_164\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2122:2150  _hashTypedDataV4(structHash) */\n      jump\t// in\n    tag_163:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2107:2150  bytes32 hash = _hashTypedDataV4(structHash) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2161:2175  address signer */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2178:2206  ECDSA.recover(hash, v, r, s) */\n      tag_165\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2192:2196  hash */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2198:2199  v */\n      dup8\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2201:2202  r */\n      dup8\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2204:2205  s */\n      dup8\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2178:2191  ECDSA.recover */\n      tag_166\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2178:2206  ECDSA.recover(hash, v, r, s) */\n      jump\t// in\n    tag_165:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2161:2206  address signer = ECDSA.recover(hash, v, r, s) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2230:2235  owner */\n      dup10\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2220:2235  signer != owner */\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2220:2226  signer */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2220:2235  signer != owner */\n      and\n      eq\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2216:2304  if (signer != owner) {... */\n      tag_167\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2258:2293  ERC2612InvalidSigner(signer, owner) */\n      mload(0x40)\n      shl(0xe1, 0x25c00723)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6487:6519   */\n      dup1\n      dup4\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2258:2293  ERC2612InvalidSigner(signer, owner) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":6469:6520   */\n      mstore\n        /* \"#utility.yul\":6556:6588   */\n      dup12\n      and\n        /* \"#utility.yul\":6536:6554   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6529:6589   */\n      mstore\n        /* \"#utility.yul\":6442:6460   */\n      0x44\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2258:2293  ERC2612InvalidSigner(signer, owner) */\n      tag_158\n        /* \"#utility.yul\":6295:6595   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2216:2304  if (signer != owner) {... */\n    tag_167:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2314:2345  _approve(owner, spender, value) */\n      tag_170\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2323:2328  owner */\n      dup11\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2330:2337  spender */\n      dup11\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2339:2344  value */\n      dup11\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2314:2322  _approve */\n      tag_107\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":2314:2345  _approve(owner, spender, value) */\n      jump\t// in\n    tag_170:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1869:2352  {... */\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":1680:2352  function permit(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2543:2758  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_95:\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1531:1544  _checkOwner() */\n      tag_173\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1531:1542  _checkOwner */\n      tag_126\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1531:1544  _checkOwner() */\n      jump\t// in\n    tag_173:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2627:2649  newOwner == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n      tag_175\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2700:2701  0 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2672:2703  OwnableInvalidOwner(address(0)) */\n      tag_158\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2623:2714  if (newOwner == address(0)) {... */\n    tag_175:\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      tag_120\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2742:2750  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2723:2741  _transferOwnership */\n      tag_129\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2723:2751  _transferOwnership(newOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n    tag_107:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      tag_180\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":9082:9087  owner */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":9089:9096  spender */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":9098:9103  value */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":9105:9109  true */\n      0x01\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":9073:9081  _approve */\n      tag_181\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":9073:9110  _approve(owner, spender, value, true) */\n      jump\t// in\n    tag_180:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8989:9117  function _approve(address owner, address spender, uint256 value) internal {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      dup4\n      dup2\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10762:10786  uint256 currentAllowance */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3952:3963  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3952:3970  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":3952:3979  _allowances[owner][spender] */\n      swap4\n      dup7\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n      sload\n      not(0x00)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10828:10865  currentAllowance != type(uint256).max */\n      dup2\n      eq\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10824:11134  if (currentAllowance != type(uint256).max) {... */\n      tag_188\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10904:10909  value */\n      dup2\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10885:10901  currentAllowance */\n      dup2\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10885:10909  currentAllowance < value */\n      lt\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n      iszero\n      tag_185\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      mload(0x40)\n      shl(0xe1, 0x7dc7a0d9)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6820:6852   */\n      dup5\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6802:6853   */\n      mstore\n        /* \"#utility.yul\":6869:6887   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":6862:6896   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":6912:6930   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":6905:6939   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":6775:6793   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10936:10996  ERC20InsufficientAllowance(spender, currentAllowance, value) */\n      tag_158\n        /* \"#utility.yul\":6600:6945   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10881:11011  if (currentAllowance < value) {... */\n    tag_185:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      tag_188\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":11061:11066  owner */\n      dup5\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":11068:11075  spender */\n      dup5\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":11096:11101  value */\n      dup5\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":11077:11093  currentAllowance */\n      dup5\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":11077:11101  currentAllowance - value */\n      sub\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":11103:11108  false */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":11052:11060  _approve */\n      tag_181\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":11052:11109  _approve(owner, spender, currentAllowance - value, false) */\n      jump\t// in\n    tag_188:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10752:11140  {... */\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10663:11140  function _spendAllowance(address owner, address spender, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5656:5956  function _transfer(address from, address to, uint256 value) internal {... */\n    tag_114:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5739:5757  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n      tag_190\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5807:5808  0 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5780:5810  ERC20InvalidSender(address(0)) */\n      tag_158\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5735:5821  if (from == address(0)) {... */\n    tag_190:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5834:5850  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n      tag_192\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xec442f05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5902:5903  0 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5873:5905  ERC20InvalidReceiver(address(0)) */\n      tag_158\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5830:5916  if (to == address(0)) {... */\n    tag_192:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      tag_180\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5933:5937  from */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5939:5941  to */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5943:5948  value */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5925:5932  _update */\n      tag_195\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":5925:5949  _update(from, to, value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n    tag_118:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3898:3905  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3929:3933  this */\n      address\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3938:3949  _cachedThis */\n      immutable(\"0xf73cad1bd82f5ecfaa44e643676c8bc2dbfff68b10bdfd2ece012251191c9803\")\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3921:3949  address(this) == _cachedThis */\n      and\n      eq\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n      dup1\n      iszero\n      tag_197\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3970:3984  _cachedChainId */\n      immutable(\"0xfd6071d659db89e8c5cd76f742b98262bad343c48d8e112fec697f28b0f6a85d\")\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3953:3966  block.chainid */\n      chainid\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3953:3984  block.chainid == _cachedChainId */\n      eq\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3921:3984  address(this) == _cachedThis && block.chainid == _cachedChainId */\n    tag_197:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n      iszero\n      tag_198\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4007:4029  _cachedDomainSeparator */\n      immutable(\"0x0c33b51a7fc957312a3715e50adff78df156f236b317db19e164c2154d0c029f\")\n      swap1\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3845:4107  function _domainSeparatorV4() internal view returns (bytes32) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":3917:4101  if (address(this) == _cachedThis && block.chainid == _cachedChainId) {... */\n    tag_198:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4067:4090  _buildDomainSeparator() */\n      tag_117\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":2079:2174  keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\") */\n      0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      0x20\n      dup3\n      add\n        /* \"#utility.yul\":7436:7461   */\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4226:4237  _hashedName */\n      immutable(\"0xbc3ba252f8041edd3ef6da5977b996ba149c3c4e1b7a0e1b1cfeb5ce24e1a570\")\n        /* \"#utility.yul\":7477:7495   */\n      swap2\n      dup2\n      add\n        /* \"#utility.yul\":7470:7504   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4239:4253  _hashedVersion */\n      immutable(\"0xdf2d24c2d874d48b2dabce9e2d6532f89ac89bcd3a2fa18c072f46a075054de9\")\n        /* \"#utility.yul\":7520:7538   */\n      0x60\n      dup3\n      add\n        /* \"#utility.yul\":7513:7547   */\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4255:4268  block.chainid */\n      chainid\n        /* \"#utility.yul\":7563:7581   */\n      0x80\n      dup3\n      add\n        /* \"#utility.yul\":7556:7590   */\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4278:4282  this */\n      address\n        /* \"#utility.yul\":7606:7625   */\n      0xa0\n      dup3\n      add\n        /* \"#utility.yul\":7599:7660   */\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4168:4175  bytes32 */\n      0x00\n      swap1\n        /* \"#utility.yul\":7408:7427   */\n      0xc0\n      add\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4204:4284  abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)) */\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4194:4285  keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      dup1\n      mload\n      swap1\n      0x20\n      add\n      keccak256\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4187:4285  return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this))) */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4113:4292  function _buildDomainSeparator() private view returns (bytes32) {... */\n      swap1\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8247:8453  function _burn(address account, uint256 value) internal {... */\n    tag_122:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8317:8338  account == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n      tag_203\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4b637e8f)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8388:8389  0 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8361:8391  ERC20InvalidSender(address(0)) */\n      tag_158\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8313:8402  if (account == address(0)) {... */\n    tag_203:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      tag_133\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8419:8426  account */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8436:8437  0 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8440:8445  value */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8411:8418  _update */\n      tag_195\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":8411:8446  _update(account, address(0), value) */\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1796:1958  function _checkOwner() internal view virtual {... */\n    tag_126:\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1710:1716  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x08))\n        /* \"@openzeppelin/contracts@5.0.2/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1855:1878  owner() != _msgSender() */\n      eq\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1851:1952  if (owner() != _msgSender()) {... */\n      tag_128\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/Context.sol\":735:745  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":1901:1941  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_158\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_129:\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3004:3010  _owner */\n      0x08\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3004:3010  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3020:3037  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3004:3010  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2985:3001  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":3052:3092  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2975:3099  {... */\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":2912:3099  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6021:6147  function _EIP712Name() internal view returns (string memory) {... */\n    tag_139:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6067:6080  string memory */\n      0x60\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      tag_117\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6099:6104  _name */\n      immutable(\"0x1a9d81b69a492c90d45241c17e21e75a0dfce976e6e4f4787646342d15de5831\")\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6126:6139  _nameFallback */\n      0x05\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6099:6125  _name.toStringWithFallback */\n      tag_216\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6099:6140  _name.toStringWithFallback(_nameFallback) */\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6473:6608  function _EIP712Version() internal view returns (string memory) {... */\n    tag_141:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6522:6535  string memory */\n      0x60\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      tag_117\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6554:6562  _version */\n      immutable(\"0x88a9212fd0f7b4413dd5e22695ef38344770f45b3083970cb665e0e17dcb0bd6\")\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6584:6600  _versionFallback */\n      0x06\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6554:6583  _version.toStringWithFallback */\n      tag_216\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":6554:6601  _version.toStringWithFallback(_versionFallback) */\n      jump\t// in\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4917:5093  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {... */\n    tag_164:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":4994:5001  bytes32 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5020:5086  MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash) */\n      tag_103\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      tag_222\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5053:5071  _domainSeparatorV4 */\n      tag_118\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5053:5073  _domainSeparatorV4() */\n      jump\t// in\n    tag_222:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":5075:5085  structHash */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3555:3559  0x40 */\n      0x40\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3549:3560  mload(0x40) */\n      mload\n      shl(0xf0, 0x1901)\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3573:3596  mstore(ptr, hex\"19_01\") */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3625:3629  0x02 */\n      0x02\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3616:3630  add(ptr, 0x02) */\n      dup2\n      add\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3609:3648  mstore(add(ptr, 0x02), domainSeparator) */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3677:3681  0x22 */\n      0x22\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3668:3682  add(ptr, 0x22) */\n      dup3\n      add\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3661:3695  mstore(add(ptr, 0x22), structHash) */\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3733:3737  0x42 */\n      0x42\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3718:3738  keccak256(ptr, 0x42) */\n      swap1\n      keccak256\n      swap1\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":3353:3754  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {... */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6803:7063  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n    tag_166:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6888:6895  address */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6908:6925  address recovered */\n      dup1\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6927:6945  RecoverError error */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6947:6963  bytes32 errorArg */\n      dup1\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6967:6992  tryRecover(hash, v, r, s) */\n      tag_225\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6978:6982  hash */\n      dup9\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6984:6985  v */\n      dup9\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6987:6988  r */\n      dup9\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6990:6991  s */\n      dup9\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6967:6977  tryRecover */\n      tag_226\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6967:6992  tryRecover(hash, v, r, s) */\n      jump\t// in\n    tag_225:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6907:6992  (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s) */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7002:7030  _throwError(error, errorArg) */\n      tag_227\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7014:7019  error */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7021:7029  errorArg */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7002:7013  _throwError */\n      tag_228\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7002:7030  _throwError(error, errorArg) */\n      jump\t// in\n    tag_227:\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7047:7056  recovered */\n      swap1\n      swap7\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6803:7063  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {... */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n    tag_181:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10061:10080  owner == address(0) */\n      dup5\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n      tag_230\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0xe602df05)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10132:10133  0 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10103:10135  ERC20InvalidApprover(address(0)) */\n      tag_158\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10057:10146  if (owner == address(0)) {... */\n    tag_230:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10159:10180  spender == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n      tag_232\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x4a1406b1)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10231:10232  0 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3951:4002   */\n      mstore\n        /* \"#utility.yul\":3924:3942   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10203:10234  ERC20InvalidSpender(address(0)) */\n      tag_158\n        /* \"#utility.yul\":3805:4008   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10155:10245  if (spender == address(0)) {... */\n    tag_232:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      dup1\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10254:10265  _allowances */\n      0x01\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10254:10272  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10254:10281  _allowances[owner][spender] */\n      swap4\n      dup8\n      and\n      dup4\n      mstore\n      swap3\n      swap1\n      mstore\n      keccak256\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10254:10289  _allowances[owner][spender] = value */\n      dup3\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10299:10375  if (emitEvent) {... */\n      dup1\n      iszero\n      tag_188\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10349:10356  spender */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10342:10347  owner */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10358:10363  value */\n      dup5\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n      mload(0x40)\n      tag_235\n      swap2\n        /* \"#utility.yul\":1354:1379   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n      swap1\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":10333:10364  Approval(owner, spender, value) */\n    tag_235:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":9949:10381  function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n    tag_195:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6360:6378  from == address(0) */\n      dup4\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_237\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6512:6517  value */\n      dup1\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6496:6508  _totalSupply */\n      0x02\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6496:6517  _totalSupply += value */\n      dup3\n      dup3\n      sload\n      tag_238\n      swap2\n      swap1\n      tag_239\n      jump\t// in\n    tag_238:\n      swap1\n      swap2\n      sstore\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n      tag_240\n      swap1\n      pop\n      jump\n    tag_237:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      dup4\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6548:6567  uint256 fromBalance */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6570:6585  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6603:6622  fromBalance < value */\n      dup2\n      dup2\n      lt\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n      iszero\n      tag_241\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      mload(0x40)\n      shl(0xe2, 0x391434e3)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6820:6852   */\n      dup6\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6802:6853   */\n      mstore\n        /* \"#utility.yul\":6869:6887   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":6862:6896   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":6912:6930   */\n      0x44\n      dup2\n      add\n        /* \"#utility.yul\":6905:6939   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":6775:6793   */\n      0x64\n      add\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6649:6699  ERC20InsufficientBalance(from, fromBalance, value) */\n      tag_158\n        /* \"#utility.yul\":6600:6945   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6599:6714  if (fromBalance < value) {... */\n    tag_241:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      dup5\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6834:6843  _balances */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6834:6849  _balances[from] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6852:6871  fromBalance - value */\n      swap1\n      dup3\n      swap1\n      sub\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6834:6871  _balances[from] = fromBalance - value */\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6356:6896  if (from == address(0)) {... */\n    tag_240:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6910:6926  to == address(0) */\n      dup3\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      tag_243\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7073:7085  _totalSupply */\n      0x02\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7073:7094  _totalSupply -= value */\n      dup1\n      sload\n      dup3\n      swap1\n      sub\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n      jump(tag_244)\n    tag_243:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      dup3\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7284:7293  _balances */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7284:7297  _balances[to] */\n      swap1\n      dup2\n      mstore\n      0x20\n      dup2\n      swap1\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7284:7306  _balances[to] += value */\n      dup1\n      sload\n      dup3\n      add\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6906:7331  if (to == address(0)) {... */\n    tag_244:\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7361:7363  to */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      and\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7355:7359  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      and\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7365:7370  value */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n      mload(0x40)\n      tag_245\n      swap2\n        /* \"#utility.yul\":1354:1379   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1342:1344   */\n      0x20\n        /* \"#utility.yul\":1327:1345   */\n      add\n      swap1\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":7346:7371  Transfer(from, to, value) */\n    tag_245:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":6271:7378  function _update(address from, address to, uint256 value) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3385:3652  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {... */\n    tag_216:\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3479:3492  string memory */\n      0x60\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":1390:1456  0x00000000000000000000000000000000000000000000000000000000000000FF */\n      0xff\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3508:3554  ShortString.unwrap(value) != FALLBACK_SENTINEL */\n      dup4\n      eq\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n      tag_250\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      tag_251\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3586:3591  value */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3577:3585  toString */\n      tag_252\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3577:3592  toString(value) */\n      jump\t// in\n    tag_251:\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3570:3592  return toString(value) */\n      swap1\n      pop\n      jump(tag_103)\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3504:3646  if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {... */\n    tag_250:\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3630:3635  store */\n      dup2\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":3623:3635  return store */\n      dup1\n      sload\n      tag_254\n      swap1\n      tag_98\n      jump\t// in\n    tag_254:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_255\n      swap1\n      tag_98\n      jump\t// in\n    tag_255:\n      dup1\n      iszero\n      tag_256\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_257\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_256)\n    tag_257:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_258:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_258\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_256:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n      jump(tag_103)\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_226:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":5266:5273  address */\n      0x00\n      dup1\n      dup1\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6199:6265  0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      0x7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6186:6265  uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 */\n      dup5\n      gt\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n      iszero\n      tag_261\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6297:6298  0 */\n      0x00\n      swap2\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6301:6331  RecoverError.InvalidSignatureS */\n      0x03\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6333:6334  s */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6281:6335  return (address(0), RecoverError.InvalidSignatureS, s) */\n      jump(tag_260)\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6182:6346  if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {... */\n    tag_261:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6440:6454  address signer */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      dup1\n      dup3\n      mstore\n      0x20\n      dup3\n      add\n      dup1\n      dup5\n      mstore\n        /* \"#utility.yul\":7898:7923   */\n      dup11\n      swap1\n      mstore\n        /* \"#utility.yul\":7971:7975   */\n      0xff\n        /* \"#utility.yul\":7959:7976   */\n      dup10\n      and\n        /* \"#utility.yul\":7939:7957   */\n      swap3\n      dup3\n      add\n        /* \"#utility.yul\":7932:7977   */\n      swap3\n      swap1\n      swap3\n      mstore\n        /* \"#utility.yul\":7993:8011   */\n      0x60\n      dup2\n      add\n        /* \"#utility.yul\":7986:8020   */\n      dup8\n      swap1\n      mstore\n        /* \"#utility.yul\":8036:8054   */\n      0x80\n      dup2\n      add\n        /* \"#utility.yul\":8029:8063   */\n      dup7\n      swap1\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x01\n      swap1\n        /* \"#utility.yul\":7870:7889   */\n      0xa0\n      add\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6457:6481  ecrecover(hash, v, r, s) */\n      0x20\n      mload(0x40)\n      0x20\n      dup2\n      sub\n      swap1\n      dup1\n      dup5\n      sub\n      swap1\n      dup6\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_265\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_265:\n      pop\n      pop\n      mload(add(not(0x1f), mload(0x40)))\n      swap2\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6495:6515  signer == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n      tag_266\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6547:6548  0 */\n      0x00\n      swap3\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6551:6580  RecoverError.InvalidSignature */\n      0x01\n      swap2\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6547:6548  0 */\n      dup3\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6531:6593  return (address(0), RecoverError.InvalidSignature, bytes32(0)) */\n      jump(tag_260)\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6491:6604  if (signer == address(0)) {... */\n    tag_266:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6622:6628  signer */\n      swap3\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":6630:6650  RecoverError.NoError */\n      0x00\n      swap2\n      pop\n      dup2\n      swap1\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":5140:6670  function tryRecover(... */\n    tag_260:\n      swap5\n      pop\n      swap5\n      pop\n      swap5\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7196:7728  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n    tag_228:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7291:7311  RecoverError.NoError */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7282:7287  error */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7282:7311  error == RecoverError.NoError */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_272\n      jumpi\n      tag_272\n      tag_270\n      jump\t// in\n    tag_272:\n      sub\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7278:7722  if (error == RecoverError.NoError) {... */\n      tag_273\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7196:7728  function _throwError(RecoverError error, bytes32 errorArg) private pure {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7278:7722  if (error == RecoverError.NoError) {... */\n    tag_273:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7387:7416  RecoverError.InvalidSignature */\n      0x01\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7378:7383  error */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7378:7416  error == RecoverError.InvalidSignature */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_278\n      jumpi\n      tag_278\n      tag_270\n      jump\t// in\n    tag_278:\n      sub\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7374:7722  if (error == RecoverError.InvalidSignature) {... */\n      tag_279\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7439:7462  ECDSAInvalidSignature() */\n      mload(0x40)\n      shl(0xe0, 0xf645eedf)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7374:7722  if (error == RecoverError.InvalidSignature) {... */\n    tag_279:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7492:7527  RecoverError.InvalidSignatureLength */\n      0x02\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7483:7488  error */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7483:7527  error == RecoverError.InvalidSignatureLength */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_284\n      jumpi\n      tag_284\n      tag_270\n      jump\t// in\n    tag_284:\n      sub\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7479:7722  if (error == RecoverError.InvalidSignatureLength) {... */\n      tag_285\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7550:7596  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      mload(0x40)\n      shl(0xe0, 0xfce698f7)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1354:1379   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":1327:1345   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7550:7596  ECDSAInvalidSignatureLength(uint256(errorArg)) */\n      tag_158\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7479:7722  if (error == RecoverError.InvalidSignatureLength) {... */\n    tag_285:\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7626:7656  RecoverError.InvalidSignatureS */\n      0x03\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7617:7622  error */\n      dup3\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7617:7656  error == RecoverError.InvalidSignatureS */\n      0x03\n      dup2\n      gt\n      iszero\n      tag_291\n      jumpi\n      tag_291\n      tag_270\n      jump\t// in\n    tag_291:\n      sub\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7613:7722  if (error == RecoverError.InvalidSignatureS) {... */\n      tag_133\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7679:7711  ECDSAInvalidSignatureS(errorArg) */\n      mload(0x40)\n      shl(0xe2, 0x35e2f383)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":1354:1379   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":1327:1345   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":7679:7711  ECDSAInvalidSignatureS(errorArg) */\n      tag_158\n        /* \"#utility.yul\":1208:1385   */\n      jump\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n    tag_252:\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2137:2150  string memory */\n      0x60\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2162:2173  uint256 len */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2176:2192  byteLength(sstr) */\n      tag_295\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2187:2191  sstr */\n      dup4\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2176:2186  byteLength */\n      tag_296\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2176:2192  byteLength(sstr) */\n      jump\t// in\n    tag_295:\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      0x40\n      dup1\n      mload\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2311:2313  32 */\n      0x20\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      dup1\n      dup3\n      mstore\n      dup2\n      dup4\n      add\n      swap1\n      swap3\n      mstore\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2162:2192  uint256 len = byteLength(sstr) */\n      swap2\n      swap3\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2280:2297  string memory str */\n      0x00\n      swap2\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2300:2314  new string(32) */\n      swap1\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      pop\n      pop\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2390:2406  mstore(str, len) */\n      swap2\n      dup3\n      mstore\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2435:2439  0x20 */\n      0x20\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2426:2440  add(str, 0x20) */\n      dup2\n      add\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2419:2447  mstore(add(str, 0x20), sstr) */\n      swap3\n      swap1\n      swap3\n      mstore\n      pop\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2390:2406  mstore(str, len) */\n      swap1\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2078:2483  function toString(ShortString sstr) internal pure returns (string memory) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2555:2800  function byteLength(ShortString sstr) internal pure returns (uint256) {... */\n    tag_296:\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2616:2623  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2688:2692  0xFF */\n      0xff\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2652:2692  uint256(ShortString.unwrap(sstr)) & 0xFF */\n      dup3\n      and\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2715:2717  31 */\n      0x1f\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2706:2717  result > 31 */\n      dup2\n      gt\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2702:2771  if (result > 31) {... */\n      iszero\n      tag_103\n      jumpi\n        /* \"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":2740:2760  InvalidShortString() */\n      mload(0x40)\n      shl(0xe2, 0x2cd44ac3)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":14:303   */\n    tag_302:\n        /* \"#utility.yul\":56:59   */\n      0x00\n        /* \"#utility.yul\":94:99   */\n      dup2\n        /* \"#utility.yul\":88:100   */\n      mload\n        /* \"#utility.yul\":121:127   */\n      dup1\n        /* \"#utility.yul\":116:119   */\n      dup5\n        /* \"#utility.yul\":109:128   */\n      mstore\n        /* \"#utility.yul\":177:183   */\n      dup1\n        /* \"#utility.yul\":170:174   */\n      0x20\n        /* \"#utility.yul\":163:168   */\n      dup5\n        /* \"#utility.yul\":159:175   */\n      add\n        /* \"#utility.yul\":152:156   */\n      0x20\n        /* \"#utility.yul\":147:150   */\n      dup7\n        /* \"#utility.yul\":143:157   */\n      add\n        /* \"#utility.yul\":137:184   */\n      mcopy\n        /* \"#utility.yul\":229:230   */\n      0x00\n        /* \"#utility.yul\":222:226   */\n      0x20\n        /* \"#utility.yul\":213:219   */\n      dup3\n        /* \"#utility.yul\":208:211   */\n      dup7\n        /* \"#utility.yul\":204:220   */\n      add\n        /* \"#utility.yul\":200:227   */\n      add\n        /* \"#utility.yul\":193:231   */\n      mstore\n        /* \"#utility.yul\":292:296   */\n      0x20\n        /* \"#utility.yul\":285:287   */\n      0x1f\n        /* \"#utility.yul\":281:288   */\n      not\n        /* \"#utility.yul\":276:278   */\n      0x1f\n        /* \"#utility.yul\":268:274   */\n      dup4\n        /* \"#utility.yul\":264:279   */\n      add\n        /* \"#utility.yul\":260:289   */\n      and\n        /* \"#utility.yul\":255:258   */\n      dup6\n        /* \"#utility.yul\":251:290   */\n      add\n        /* \"#utility.yul\":247:297   */\n      add\n        /* \"#utility.yul\":240:297   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":14:303   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":308:528   */\n    tag_27:\n        /* \"#utility.yul\":457:459   */\n      0x20\n        /* \"#utility.yul\":446:455   */\n      dup2\n        /* \"#utility.yul\":439:460   */\n      mstore\n        /* \"#utility.yul\":420:424   */\n      0x00\n        /* \"#utility.yul\":477:522   */\n      tag_307\n        /* \"#utility.yul\":518:520   */\n      0x20\n        /* \"#utility.yul\":507:516   */\n      dup4\n        /* \"#utility.yul\":503:521   */\n      add\n        /* \"#utility.yul\":495:501   */\n      dup5\n        /* \"#utility.yul\":477:522   */\n      tag_302\n      jump\t// in\n    tag_307:\n        /* \"#utility.yul\":469:522   */\n      swap4\n        /* \"#utility.yul\":308:528   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":533:706   */\n    tag_303:\n        /* \"#utility.yul\":601:621   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":650:681   */\n      dup2\n      and\n        /* \"#utility.yul\":640:682   */\n      dup2\n      eq\n        /* \"#utility.yul\":630:700   */\n      tag_309\n      jumpi\n        /* \"#utility.yul\":696:697   */\n      0x00\n        /* \"#utility.yul\":693:694   */\n      dup1\n        /* \"#utility.yul\":686:698   */\n      revert\n        /* \"#utility.yul\":630:700   */\n    tag_309:\n        /* \"#utility.yul\":533:706   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":711:1011   */\n    tag_30:\n        /* \"#utility.yul\":779:785   */\n      0x00\n        /* \"#utility.yul\":787:793   */\n      dup1\n        /* \"#utility.yul\":840:842   */\n      0x40\n        /* \"#utility.yul\":828:837   */\n      dup4\n        /* \"#utility.yul\":819:826   */\n      dup6\n        /* \"#utility.yul\":815:838   */\n      sub\n        /* \"#utility.yul\":811:843   */\n      slt\n        /* \"#utility.yul\":808:860   */\n      iszero\n      tag_311\n      jumpi\n        /* \"#utility.yul\":856:857   */\n      0x00\n        /* \"#utility.yul\":853:854   */\n      dup1\n        /* \"#utility.yul\":846:858   */\n      revert\n        /* \"#utility.yul\":808:860   */\n    tag_311:\n        /* \"#utility.yul\":879:908   */\n      tag_312\n        /* \"#utility.yul\":898:907   */\n      dup4\n        /* \"#utility.yul\":879:908   */\n      tag_303\n      jump\t// in\n    tag_312:\n        /* \"#utility.yul\":869:908   */\n      swap5\n        /* \"#utility.yul\":977:979   */\n      0x20\n        /* \"#utility.yul\":962:980   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":949:981   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":711:1011   */\n      jump\t// out\n        /* \"#utility.yul\":1390:1764   */\n    tag_40:\n        /* \"#utility.yul\":1467:1473   */\n      0x00\n        /* \"#utility.yul\":1475:1481   */\n      dup1\n        /* \"#utility.yul\":1483:1489   */\n      0x00\n        /* \"#utility.yul\":1536:1538   */\n      0x60\n        /* \"#utility.yul\":1524:1533   */\n      dup5\n        /* \"#utility.yul\":1515:1522   */\n      dup7\n        /* \"#utility.yul\":1511:1534   */\n      sub\n        /* \"#utility.yul\":1507:1539   */\n      slt\n        /* \"#utility.yul\":1504:1556   */\n      iszero\n      tag_316\n      jumpi\n        /* \"#utility.yul\":1552:1553   */\n      0x00\n        /* \"#utility.yul\":1549:1550   */\n      dup1\n        /* \"#utility.yul\":1542:1554   */\n      revert\n        /* \"#utility.yul\":1504:1556   */\n    tag_316:\n        /* \"#utility.yul\":1575:1604   */\n      tag_317\n        /* \"#utility.yul\":1594:1603   */\n      dup5\n        /* \"#utility.yul\":1575:1604   */\n      tag_303\n      jump\t// in\n    tag_317:\n        /* \"#utility.yul\":1565:1604   */\n      swap3\n      pop\n        /* \"#utility.yul\":1623:1661   */\n      tag_318\n        /* \"#utility.yul\":1657:1659   */\n      0x20\n        /* \"#utility.yul\":1646:1655   */\n      dup6\n        /* \"#utility.yul\":1642:1660   */\n      add\n        /* \"#utility.yul\":1623:1661   */\n      tag_303\n      jump\t// in\n    tag_318:\n        /* \"#utility.yul\":1390:1764   */\n      swap3\n      swap6\n        /* \"#utility.yul\":1613:1661   */\n      swap3\n      swap5\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1730:1732   */\n      0x40\n        /* \"#utility.yul\":1715:1733   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1702:1734   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":1390:1764   */\n      jump\t// out\n        /* \"#utility.yul\":2140:2366   */\n    tag_53:\n        /* \"#utility.yul\":2199:2205   */\n      0x00\n        /* \"#utility.yul\":2252:2254   */\n      0x20\n        /* \"#utility.yul\":2240:2249   */\n      dup3\n        /* \"#utility.yul\":2231:2238   */\n      dup5\n        /* \"#utility.yul\":2227:2250   */\n      sub\n        /* \"#utility.yul\":2223:2255   */\n      slt\n        /* \"#utility.yul\":2220:2272   */\n      iszero\n      tag_322\n      jumpi\n        /* \"#utility.yul\":2268:2269   */\n      0x00\n        /* \"#utility.yul\":2265:2266   */\n      dup1\n        /* \"#utility.yul\":2258:2270   */\n      revert\n        /* \"#utility.yul\":2220:2272   */\n    tag_322:\n      pop\n        /* \"#utility.yul\":2313:2336   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2140:2366   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2371:2557   */\n    tag_57:\n        /* \"#utility.yul\":2430:2436   */\n      0x00\n        /* \"#utility.yul\":2483:2485   */\n      0x20\n        /* \"#utility.yul\":2471:2480   */\n      dup3\n        /* \"#utility.yul\":2462:2469   */\n      dup5\n        /* \"#utility.yul\":2458:2481   */\n      sub\n        /* \"#utility.yul\":2454:2486   */\n      slt\n        /* \"#utility.yul\":2451:2503   */\n      iszero\n      tag_324\n      jumpi\n        /* \"#utility.yul\":2499:2500   */\n      0x00\n        /* \"#utility.yul\":2496:2497   */\n      dup1\n        /* \"#utility.yul\":2489:2501   */\n      revert\n        /* \"#utility.yul\":2451:2503   */\n    tag_324:\n        /* \"#utility.yul\":2522:2551   */\n      tag_307\n        /* \"#utility.yul\":2541:2550   */\n      dup3\n        /* \"#utility.yul\":2522:2551   */\n      tag_303\n      jump\t// in\n        /* \"#utility.yul\":2562:3800   */\n    tag_72:\n        /* \"#utility.yul\":2968:2971   */\n      0xff\n        /* \"#utility.yul\":2963:2966   */\n      0xf8\n        /* \"#utility.yul\":2959:2972   */\n      shl\n        /* \"#utility.yul\":2951:2957   */\n      dup9\n        /* \"#utility.yul\":2947:2973   */\n      and\n        /* \"#utility.yul\":2936:2945   */\n      dup2\n        /* \"#utility.yul\":2929:2974   */\n      mstore\n        /* \"#utility.yul\":3010:3013   */\n      0xe0\n        /* \"#utility.yul\":3005:3007   */\n      0x20\n        /* \"#utility.yul\":2994:3003   */\n      dup3\n        /* \"#utility.yul\":2990:3008   */\n      add\n        /* \"#utility.yul\":2983:3014   */\n      mstore\n        /* \"#utility.yul\":2910:2914   */\n      0x00\n        /* \"#utility.yul\":3037:3083   */\n      tag_327\n        /* \"#utility.yul\":3078:3081   */\n      0xe0\n        /* \"#utility.yul\":3067:3076   */\n      dup4\n        /* \"#utility.yul\":3063:3082   */\n      add\n        /* \"#utility.yul\":3055:3061   */\n      dup10\n        /* \"#utility.yul\":3037:3083   */\n      tag_302\n      jump\t// in\n    tag_327:\n        /* \"#utility.yul\":3131:3140   */\n      dup3\n        /* \"#utility.yul\":3123:3129   */\n      dup2\n        /* \"#utility.yul\":3119:3141   */\n      sub\n        /* \"#utility.yul\":3114:3116   */\n      0x40\n        /* \"#utility.yul\":3103:3112   */\n      dup5\n        /* \"#utility.yul\":3099:3117   */\n      add\n        /* \"#utility.yul\":3092:3142   */\n      mstore\n        /* \"#utility.yul\":3165:3198   */\n      tag_328\n        /* \"#utility.yul\":3191:3197   */\n      dup2\n        /* \"#utility.yul\":3183:3189   */\n      dup10\n        /* \"#utility.yul\":3165:3198   */\n      tag_302\n      jump\t// in\n    tag_328:\n        /* \"#utility.yul\":3229:3231   */\n      0x60\n        /* \"#utility.yul\":3214:3232   */\n      dup5\n      add\n        /* \"#utility.yul\":3207:3241   */\n      dup9\n      swap1\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3278:3310   */\n      dup8\n      and\n        /* \"#utility.yul\":3272:3275   */\n      0x80\n        /* \"#utility.yul\":3257:3276   */\n      dup6\n      add\n        /* \"#utility.yul\":3250:3311   */\n      mstore\n        /* \"#utility.yul\":3298:3301   */\n      0xa0\n        /* \"#utility.yul\":3327:3346   */\n      dup5\n      add\n        /* \"#utility.yul\":3320:3355   */\n      dup7\n      swap1\n      mstore\n        /* \"#utility.yul\":3392:3414   */\n      dup4\n      dup2\n      sub\n        /* \"#utility.yul\":3386:3389   */\n      0xc0\n        /* \"#utility.yul\":3371:3390   */\n      dup6\n      add\n        /* \"#utility.yul\":3364:3415   */\n      mstore\n        /* \"#utility.yul\":3464:3477   */\n      dup5\n      mload\n        /* \"#utility.yul\":3486:3508   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3536:3538   */\n      0x20\n        /* \"#utility.yul\":3562:3577   */\n      dup1\n      dup8\n      add\n      swap4\n      pop\n        /* \"#utility.yul\":3524:3539   */\n      swap1\n      swap2\n      add\n      swap1\n      0x00\n        /* \"#utility.yul\":3605:3774   */\n    tag_329:\n        /* \"#utility.yul\":3619:3625   */\n      dup2\n        /* \"#utility.yul\":3616:3617   */\n      dup2\n        /* \"#utility.yul\":3613:3626   */\n      lt\n        /* \"#utility.yul\":3605:3774   */\n      iszero\n      tag_331\n      jumpi\n        /* \"#utility.yul\":3680:3693   */\n      dup4\n      mload\n        /* \"#utility.yul\":3668:3694   */\n      dup4\n      mstore\n        /* \"#utility.yul\":3723:3725   */\n      0x20\n        /* \"#utility.yul\":3749:3764   */\n      swap4\n      dup5\n      add\n      swap4\n        /* \"#utility.yul\":3714:3726   */\n      swap1\n      swap3\n      add\n      swap2\n        /* \"#utility.yul\":3641:3642   */\n      0x01\n        /* \"#utility.yul\":3634:3643   */\n      add\n        /* \"#utility.yul\":3605:3774   */\n      jump(tag_329)\n    tag_331:\n      pop\n        /* \"#utility.yul\":3791:3794   */\n      swap1\n      swap12\n        /* \"#utility.yul\":2562:3800   */\n      swap11\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4013:4916   */\n    tag_86:\n        /* \"#utility.yul\":4124:4130   */\n      0x00\n        /* \"#utility.yul\":4132:4138   */\n      dup1\n        /* \"#utility.yul\":4140:4146   */\n      0x00\n        /* \"#utility.yul\":4148:4154   */\n      dup1\n        /* \"#utility.yul\":4156:4162   */\n      0x00\n        /* \"#utility.yul\":4164:4170   */\n      dup1\n        /* \"#utility.yul\":4172:4178   */\n      0x00\n        /* \"#utility.yul\":4225:4228   */\n      0xe0\n        /* \"#utility.yul\":4213:4222   */\n      dup9\n        /* \"#utility.yul\":4204:4211   */\n      dup11\n        /* \"#utility.yul\":4200:4223   */\n      sub\n        /* \"#utility.yul\":4196:4229   */\n      slt\n        /* \"#utility.yul\":4193:4246   */\n      iszero\n      tag_334\n      jumpi\n        /* \"#utility.yul\":4242:4243   */\n      0x00\n        /* \"#utility.yul\":4239:4240   */\n      dup1\n        /* \"#utility.yul\":4232:4244   */\n      revert\n        /* \"#utility.yul\":4193:4246   */\n    tag_334:\n        /* \"#utility.yul\":4265:4294   */\n      tag_335\n        /* \"#utility.yul\":4284:4293   */\n      dup9\n        /* \"#utility.yul\":4265:4294   */\n      tag_303\n      jump\t// in\n    tag_335:\n        /* \"#utility.yul\":4255:4294   */\n      swap7\n      pop\n        /* \"#utility.yul\":4313:4351   */\n      tag_336\n        /* \"#utility.yul\":4347:4349   */\n      0x20\n        /* \"#utility.yul\":4336:4345   */\n      dup10\n        /* \"#utility.yul\":4332:4350   */\n      add\n        /* \"#utility.yul\":4313:4351   */\n      tag_303\n      jump\t// in\n    tag_336:\n        /* \"#utility.yul\":4303:4351   */\n      swap6\n      pop\n        /* \"#utility.yul\":4420:4422   */\n      0x40\n        /* \"#utility.yul\":4405:4423   */\n      dup9\n      add\n        /* \"#utility.yul\":4392:4424   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":4521:4523   */\n      0x60\n        /* \"#utility.yul\":4506:4524   */\n      dup9\n      add\n        /* \"#utility.yul\":4493:4525   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":4603:4606   */\n      0x80\n        /* \"#utility.yul\":4588:4607   */\n      dup9\n      add\n        /* \"#utility.yul\":4575:4608   */\n      calldataload\n        /* \"#utility.yul\":4652:4656   */\n      0xff\n        /* \"#utility.yul\":4639:4657   */\n      dup2\n      and\n        /* \"#utility.yul\":4627:4658   */\n      dup2\n      eq\n        /* \"#utility.yul\":4617:4676   */\n      tag_337\n      jumpi\n        /* \"#utility.yul\":4672:4673   */\n      0x00\n        /* \"#utility.yul\":4669:4670   */\n      dup1\n        /* \"#utility.yul\":4662:4674   */\n      revert\n        /* \"#utility.yul\":4617:4676   */\n    tag_337:\n        /* \"#utility.yul\":4013:4916   */\n      swap7\n      swap10\n      swap6\n      swap9\n      pop\n      swap4\n      swap7\n      swap3\n      swap6\n        /* \"#utility.yul\":4695:4702   */\n      swap5\n        /* \"#utility.yul\":4775:4778   */\n      0xa0\n        /* \"#utility.yul\":4760:4779   */\n      dup5\n      add\n        /* \"#utility.yul\":4747:4780   */\n      calldataload\n      swap5\n      pop\n        /* \"#utility.yul\":4879:4882   */\n      0xc0\n        /* \"#utility.yul\":4864:4883   */\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":4851:4884   */\n      calldataload\n      swap3\n        /* \"#utility.yul\":4013:4916   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4921:5181   */\n    tag_90:\n        /* \"#utility.yul\":4989:4995   */\n      0x00\n        /* \"#utility.yul\":4997:5003   */\n      dup1\n        /* \"#utility.yul\":5050:5052   */\n      0x40\n        /* \"#utility.yul\":5038:5047   */\n      dup4\n        /* \"#utility.yul\":5029:5036   */\n      dup6\n        /* \"#utility.yul\":5025:5048   */\n      sub\n        /* \"#utility.yul\":5021:5053   */\n      slt\n        /* \"#utility.yul\":5018:5070   */\n      iszero\n      tag_339\n      jumpi\n        /* \"#utility.yul\":5066:5067   */\n      0x00\n        /* \"#utility.yul\":5063:5064   */\n      dup1\n        /* \"#utility.yul\":5056:5068   */\n      revert\n        /* \"#utility.yul\":5018:5070   */\n    tag_339:\n        /* \"#utility.yul\":5089:5118   */\n      tag_340\n        /* \"#utility.yul\":5108:5117   */\n      dup4\n        /* \"#utility.yul\":5089:5118   */\n      tag_303\n      jump\t// in\n    tag_340:\n        /* \"#utility.yul\":5079:5118   */\n      swap2\n      pop\n        /* \"#utility.yul\":5137:5175   */\n      tag_341\n        /* \"#utility.yul\":5171:5173   */\n      0x20\n        /* \"#utility.yul\":5160:5169   */\n      dup5\n        /* \"#utility.yul\":5156:5174   */\n      add\n        /* \"#utility.yul\":5137:5175   */\n      tag_303\n      jump\t// in\n    tag_341:\n        /* \"#utility.yul\":5127:5175   */\n      swap1\n      pop\n        /* \"#utility.yul\":4921:5181   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5186:5566   */\n    tag_98:\n        /* \"#utility.yul\":5265:5266   */\n      0x01\n        /* \"#utility.yul\":5261:5273   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":5308:5320   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5329:5390   */\n      tag_343\n      jumpi\n        /* \"#utility.yul\":5383:5387   */\n      0x7f\n        /* \"#utility.yul\":5375:5381   */\n      dup3\n        /* \"#utility.yul\":5371:5388   */\n      and\n        /* \"#utility.yul\":5361:5388   */\n      swap2\n      pop\n        /* \"#utility.yul\":5329:5390   */\n    tag_343:\n        /* \"#utility.yul\":5436:5438   */\n      0x20\n        /* \"#utility.yul\":5428:5434   */\n      dup3\n        /* \"#utility.yul\":5425:5439   */\n      lt\n        /* \"#utility.yul\":5405:5423   */\n      dup2\n        /* \"#utility.yul\":5402:5440   */\n      sub\n        /* \"#utility.yul\":5399:5560   */\n      tag_344\n      jumpi\n        /* \"#utility.yul\":5482:5492   */\n      0x4e487b71\n        /* \"#utility.yul\":5477:5480   */\n      0xe0\n        /* \"#utility.yul\":5473:5493   */\n      shl\n        /* \"#utility.yul\":5470:5471   */\n      0x00\n        /* \"#utility.yul\":5463:5494   */\n      mstore\n        /* \"#utility.yul\":5517:5521   */\n      0x22\n        /* \"#utility.yul\":5514:5515   */\n      0x04\n        /* \"#utility.yul\":5507:5522   */\n      mstore\n        /* \"#utility.yul\":5545:5549   */\n      0x24\n        /* \"#utility.yul\":5542:5543   */\n      0x00\n        /* \"#utility.yul\":5535:5550   */\n      revert\n        /* \"#utility.yul\":5399:5560   */\n    tag_344:\n      pop\n        /* \"#utility.yul\":5186:5566   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6950:7172   */\n    tag_239:\n        /* \"#utility.yul\":7015:7024   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":7036:7046   */\n      dup1\n      dup3\n      gt\n        /* \"#utility.yul\":7033:7166   */\n      iszero\n      tag_103\n      jumpi\n        /* \"#utility.yul\":7088:7098   */\n      0x4e487b71\n        /* \"#utility.yul\":7083:7086   */\n      0xe0\n        /* \"#utility.yul\":7079:7099   */\n      shl\n        /* \"#utility.yul\":7076:7077   */\n      0x00\n        /* \"#utility.yul\":7069:7100   */\n      mstore\n        /* \"#utility.yul\":7123:7127   */\n      0x11\n        /* \"#utility.yul\":7120:7121   */\n      0x04\n        /* \"#utility.yul\":7113:7128   */\n      mstore\n        /* \"#utility.yul\":7151:7155   */\n      0x24\n        /* \"#utility.yul\":7148:7149   */\n      0x00\n        /* \"#utility.yul\":7141:7156   */\n      revert\n        /* \"#utility.yul\":8074:8201   */\n    tag_270:\n        /* \"#utility.yul\":8135:8145   */\n      0x4e487b71\n        /* \"#utility.yul\":8130:8133   */\n      0xe0\n        /* \"#utility.yul\":8126:8146   */\n      shl\n        /* \"#utility.yul\":8123:8124   */\n      0x00\n        /* \"#utility.yul\":8116:8147   */\n      mstore\n        /* \"#utility.yul\":8166:8170   */\n      0x21\n        /* \"#utility.yul\":8163:8164   */\n      0x04\n        /* \"#utility.yul\":8156:8171   */\n      mstore\n        /* \"#utility.yul\":8190:8194   */\n      0x24\n        /* \"#utility.yul\":8187:8188   */\n      0x00\n        /* \"#utility.yul\":8180:8195   */\n      revert\n\n    auxdata: 0xa26469706673582212206435f0c322ac2d37a1fd9833cd6122a3b386d3e3e64627f975ddf49afa2aa46b64736f6c634300081a0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_2289": {
									"entryPoint": null,
									"id": 2289,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_361": {
									"entryPoint": null,
									"id": 361,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_3693": {
									"entryPoint": null,
									"id": 3693,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_50": {
									"entryPoint": null,
									"id": 50,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_997": {
									"entryPoint": null,
									"id": 997,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2336": {
									"entryPoint": null,
									"id": 2336,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_mint_664": {
									"entryPoint": 631,
									"id": 664,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 550,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_update_631": {
									"entryPoint": 748,
									"id": 631,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@decimals_388": {
									"entryPoint": null,
									"id": 388,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getStringSlot_1566": {
									"entryPoint": null,
									"id": 1566,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toShortStringWithFallback_1420": {
									"entryPoint": 500,
									"id": 1420,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toShortString_1322": {
									"entryPoint": 687,
									"id": 1322,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address_fromMemory": {
									"entryPoint": 1042,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1709,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 1797,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 1445,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 1672,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 1512,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 1686,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 1163,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32": {
									"entryPoint": 1762,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 1239,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 1107,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1425,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 1087,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:6773:20",
										"nodeType": "YulBlock",
										"src": "0:6773:20",
										"statements": [
											{
												"nativeSrc": "6:3:20",
												"nodeType": "YulBlock",
												"src": "6:3:20",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "95:209:20",
													"nodeType": "YulBlock",
													"src": "95:209:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "141:16:20",
																"nodeType": "YulBlock",
																"src": "141:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "150:1:20",
																					"nodeType": "YulLiteral",
																					"src": "150:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "153:1:20",
																					"nodeType": "YulLiteral",
																					"src": "153:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "143:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "143:6:20"
																			},
																			"nativeSrc": "143:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "143:12:20"
																		},
																		"nativeSrc": "143:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "143:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "116:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "116:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "125:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "125:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "112:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "112:3:20"
																		},
																		"nativeSrc": "112:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "112:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "137:2:20",
																		"nodeType": "YulLiteral",
																		"src": "137:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "108:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "108:3:20"
																},
																"nativeSrc": "108:32:20",
																"nodeType": "YulFunctionCall",
																"src": "108:32:20"
															},
															"nativeSrc": "105:52:20",
															"nodeType": "YulIf",
															"src": "105:52:20"
														},
														{
															"nativeSrc": "166:29:20",
															"nodeType": "YulVariableDeclaration",
															"src": "166:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "185:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "185:9:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "179:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "179:5:20"
																},
																"nativeSrc": "179:16:20",
																"nodeType": "YulFunctionCall",
																"src": "179:16:20"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "170:5:20",
																	"nodeType": "YulTypedName",
																	"src": "170:5:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "258:16:20",
																"nodeType": "YulBlock",
																"src": "258:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "267:1:20",
																					"nodeType": "YulLiteral",
																					"src": "267:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "270:1:20",
																					"nodeType": "YulLiteral",
																					"src": "270:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "260:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "260:6:20"
																			},
																			"nativeSrc": "260:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "260:12:20"
																		},
																		"nativeSrc": "260:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "260:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "217:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "217:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "228:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "228:5:20"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "243:3:20",
																										"nodeType": "YulLiteral",
																										"src": "243:3:20",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "248:1:20",
																										"nodeType": "YulLiteral",
																										"src": "248:1:20",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "239:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "239:3:20"
																								},
																								"nativeSrc": "239:11:20",
																								"nodeType": "YulFunctionCall",
																								"src": "239:11:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "252:1:20",
																								"nodeType": "YulLiteral",
																								"src": "252:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "235:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "235:3:20"
																						},
																						"nativeSrc": "235:19:20",
																						"nodeType": "YulFunctionCall",
																						"src": "235:19:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "224:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "224:3:20"
																				},
																				"nativeSrc": "224:31:20",
																				"nodeType": "YulFunctionCall",
																				"src": "224:31:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "214:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "214:2:20"
																		},
																		"nativeSrc": "214:42:20",
																		"nodeType": "YulFunctionCall",
																		"src": "214:42:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "207:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "207:6:20"
																},
																"nativeSrc": "207:50:20",
																"nodeType": "YulFunctionCall",
																"src": "207:50:20"
															},
															"nativeSrc": "204:70:20",
															"nodeType": "YulIf",
															"src": "204:70:20"
														},
														{
															"nativeSrc": "283:15:20",
															"nodeType": "YulAssignment",
															"src": "283:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "293:5:20",
																"nodeType": "YulIdentifier",
																"src": "293:5:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "283:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "283:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address_fromMemory",
												"nativeSrc": "14:290:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "61:9:20",
														"nodeType": "YulTypedName",
														"src": "61:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "72:7:20",
														"nodeType": "YulTypedName",
														"src": "72:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "84:6:20",
														"nodeType": "YulTypedName",
														"src": "84:6:20",
														"type": ""
													}
												],
												"src": "14:290:20"
											},
											{
												"body": {
													"nativeSrc": "341:95:20",
													"nodeType": "YulBlock",
													"src": "341:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "358:1:20",
																		"nodeType": "YulLiteral",
																		"src": "358:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "365:3:20",
																				"nodeType": "YulLiteral",
																				"src": "365:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "370:10:20",
																				"nodeType": "YulLiteral",
																				"src": "370:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "361:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "361:3:20"
																		},
																		"nativeSrc": "361:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "361:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "351:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "351:6:20"
																},
																"nativeSrc": "351:31:20",
																"nodeType": "YulFunctionCall",
																"src": "351:31:20"
															},
															"nativeSrc": "351:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "351:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "398:1:20",
																		"nodeType": "YulLiteral",
																		"src": "398:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "401:4:20",
																		"nodeType": "YulLiteral",
																		"src": "401:4:20",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "391:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "391:6:20"
																},
																"nativeSrc": "391:15:20",
																"nodeType": "YulFunctionCall",
																"src": "391:15:20"
															},
															"nativeSrc": "391:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "391:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "422:1:20",
																		"nodeType": "YulLiteral",
																		"src": "422:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "425:4:20",
																		"nodeType": "YulLiteral",
																		"src": "425:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "415:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "415:6:20"
																},
																"nativeSrc": "415:15:20",
																"nodeType": "YulFunctionCall",
																"src": "415:15:20"
															},
															"nativeSrc": "415:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "415:15:20"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "309:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "309:127:20"
											},
											{
												"body": {
													"nativeSrc": "496:325:20",
													"nodeType": "YulBlock",
													"src": "496:325:20",
													"statements": [
														{
															"nativeSrc": "506:22:20",
															"nodeType": "YulAssignment",
															"src": "506:22:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "520:1:20",
																		"nodeType": "YulLiteral",
																		"src": "520:1:20",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "523:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "523:4:20"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "516:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "516:3:20"
																},
																"nativeSrc": "516:12:20",
																"nodeType": "YulFunctionCall",
																"src": "516:12:20"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "506:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "506:6:20"
																}
															]
														},
														{
															"nativeSrc": "537:38:20",
															"nodeType": "YulVariableDeclaration",
															"src": "537:38:20",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "567:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "567:4:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "573:1:20",
																		"nodeType": "YulLiteral",
																		"src": "573:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "563:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "563:3:20"
																},
																"nativeSrc": "563:12:20",
																"nodeType": "YulFunctionCall",
																"src": "563:12:20"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "541:18:20",
																	"nodeType": "YulTypedName",
																	"src": "541:18:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "614:31:20",
																"nodeType": "YulBlock",
																"src": "614:31:20",
																"statements": [
																	{
																		"nativeSrc": "616:27:20",
																		"nodeType": "YulAssignment",
																		"src": "616:27:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "630:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "630:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "638:4:20",
																					"nodeType": "YulLiteral",
																					"src": "638:4:20",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "626:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "626:3:20"
																			},
																			"nativeSrc": "626:17:20",
																			"nodeType": "YulFunctionCall",
																			"src": "626:17:20"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "616:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "616:6:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "594:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "594:18:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "587:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "587:6:20"
																},
																"nativeSrc": "587:26:20",
																"nodeType": "YulFunctionCall",
																"src": "587:26:20"
															},
															"nativeSrc": "584:61:20",
															"nodeType": "YulIf",
															"src": "584:61:20"
														},
														{
															"body": {
																"nativeSrc": "704:111:20",
																"nodeType": "YulBlock",
																"src": "704:111:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "725:1:20",
																					"nodeType": "YulLiteral",
																					"src": "725:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "732:3:20",
																							"nodeType": "YulLiteral",
																							"src": "732:3:20",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "737:10:20",
																							"nodeType": "YulLiteral",
																							"src": "737:10:20",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "728:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "728:3:20"
																					},
																					"nativeSrc": "728:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "728:20:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "718:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "718:6:20"
																			},
																			"nativeSrc": "718:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "718:31:20"
																		},
																		"nativeSrc": "718:31:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "718:31:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "769:1:20",
																					"nodeType": "YulLiteral",
																					"src": "769:1:20",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "772:4:20",
																					"nodeType": "YulLiteral",
																					"src": "772:4:20",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "762:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "762:6:20"
																			},
																			"nativeSrc": "762:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "762:15:20"
																		},
																		"nativeSrc": "762:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "762:15:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "797:1:20",
																					"nodeType": "YulLiteral",
																					"src": "797:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "800:4:20",
																					"nodeType": "YulLiteral",
																					"src": "800:4:20",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "790:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "790:6:20"
																			},
																			"nativeSrc": "790:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "790:15:20"
																		},
																		"nativeSrc": "790:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "790:15:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "660:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "660:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "683:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "683:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "691:2:20",
																				"nodeType": "YulLiteral",
																				"src": "691:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "680:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "680:2:20"
																		},
																		"nativeSrc": "680:14:20",
																		"nodeType": "YulFunctionCall",
																		"src": "680:14:20"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "657:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "657:2:20"
																},
																"nativeSrc": "657:38:20",
																"nodeType": "YulFunctionCall",
																"src": "657:38:20"
															},
															"nativeSrc": "654:161:20",
															"nodeType": "YulIf",
															"src": "654:161:20"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "441:380:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "476:4:20",
														"nodeType": "YulTypedName",
														"src": "476:4:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "485:6:20",
														"nodeType": "YulTypedName",
														"src": "485:6:20",
														"type": ""
													}
												],
												"src": "441:380:20"
											},
											{
												"body": {
													"nativeSrc": "882:65:20",
													"nodeType": "YulBlock",
													"src": "882:65:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "899:1:20",
																		"nodeType": "YulLiteral",
																		"src": "899:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nativeSrc": "902:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "902:3:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "892:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "892:6:20"
																},
																"nativeSrc": "892:14:20",
																"nodeType": "YulFunctionCall",
																"src": "892:14:20"
															},
															"nativeSrc": "892:14:20",
															"nodeType": "YulExpressionStatement",
															"src": "892:14:20"
														},
														{
															"nativeSrc": "915:26:20",
															"nodeType": "YulAssignment",
															"src": "915:26:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "933:1:20",
																		"nodeType": "YulLiteral",
																		"src": "933:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "936:4:20",
																		"nodeType": "YulLiteral",
																		"src": "936:4:20",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "923:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "923:9:20"
																},
																"nativeSrc": "923:18:20",
																"nodeType": "YulFunctionCall",
																"src": "923:18:20"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nativeSrc": "915:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "915:4:20"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nativeSrc": "826:121:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nativeSrc": "865:3:20",
														"nodeType": "YulTypedName",
														"src": "865:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nativeSrc": "873:4:20",
														"nodeType": "YulTypedName",
														"src": "873:4:20",
														"type": ""
													}
												],
												"src": "826:121:20"
											},
											{
												"body": {
													"nativeSrc": "1033:437:20",
													"nodeType": "YulBlock",
													"src": "1033:437:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "1066:398:20",
																"nodeType": "YulBlock",
																"src": "1066:398:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1087:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1087:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"name": "array",
																					"nativeSrc": "1090:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "1090:5:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "1080:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1080:6:20"
																			},
																			"nativeSrc": "1080:16:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1080:16:20"
																		},
																		"nativeSrc": "1080:16:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1080:16:20"
																	},
																	{
																		"nativeSrc": "1109:30:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1109:30:20",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1131:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1131:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1134:4:20",
																					"nodeType": "YulLiteral",
																					"src": "1134:4:20",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nativeSrc": "1121:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1121:9:20"
																			},
																			"nativeSrc": "1121:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1121:18:20"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nativeSrc": "1113:4:20",
																				"nodeType": "YulTypedName",
																				"src": "1113:4:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "1152:57:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1152:57:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "1175:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "1175:4:20"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "1185:1:20",
																							"nodeType": "YulLiteral",
																							"src": "1185:1:20",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nativeSrc": "1192:10:20",
																									"nodeType": "YulIdentifier",
																									"src": "1192:10:20"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "1204:2:20",
																									"nodeType": "YulLiteral",
																									"src": "1204:2:20",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "1188:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "1188:3:20"
																							},
																							"nativeSrc": "1188:19:20",
																							"nodeType": "YulFunctionCall",
																							"src": "1188:19:20"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "1181:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "1181:3:20"
																					},
																					"nativeSrc": "1181:27:20",
																					"nodeType": "YulFunctionCall",
																					"src": "1181:27:20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "1171:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "1171:3:20"
																			},
																			"nativeSrc": "1171:38:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1171:38:20"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nativeSrc": "1156:11:20",
																				"nodeType": "YulTypedName",
																				"src": "1156:11:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "1246:23:20",
																			"nodeType": "YulBlock",
																			"src": "1246:23:20",
																			"statements": [
																				{
																					"nativeSrc": "1248:19:20",
																					"nodeType": "YulAssignment",
																					"src": "1248:19:20",
																					"value": {
																						"name": "data",
																						"nativeSrc": "1263:4:20",
																						"nodeType": "YulIdentifier",
																						"src": "1263:4:20"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nativeSrc": "1248:11:20",
																							"nodeType": "YulIdentifier",
																							"src": "1248:11:20"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nativeSrc": "1228:10:20",
																					"nodeType": "YulIdentifier",
																					"src": "1228:10:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1240:4:20",
																					"nodeType": "YulLiteral",
																					"src": "1240:4:20",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "1225:2:20",
																				"nodeType": "YulIdentifier",
																				"src": "1225:2:20"
																			},
																			"nativeSrc": "1225:20:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1225:20:20"
																		},
																		"nativeSrc": "1222:47:20",
																		"nodeType": "YulIf",
																		"src": "1222:47:20"
																	},
																	{
																		"nativeSrc": "1282:41:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1282:41:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nativeSrc": "1296:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "1296:4:20"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "1306:1:20",
																							"nodeType": "YulLiteral",
																							"src": "1306:1:20",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nativeSrc": "1313:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "1313:3:20"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "1318:2:20",
																									"nodeType": "YulLiteral",
																									"src": "1318:2:20",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "1309:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "1309:3:20"
																							},
																							"nativeSrc": "1309:12:20",
																							"nodeType": "YulFunctionCall",
																							"src": "1309:12:20"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nativeSrc": "1302:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "1302:3:20"
																					},
																					"nativeSrc": "1302:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "1302:20:20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "1292:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "1292:3:20"
																			},
																			"nativeSrc": "1292:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1292:31:20"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nativeSrc": "1286:2:20",
																				"nodeType": "YulTypedName",
																				"src": "1286:2:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "1336:24:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "1336:24:20",
																		"value": {
																			"name": "deleteStart",
																			"nativeSrc": "1349:11:20",
																			"nodeType": "YulIdentifier",
																			"src": "1349:11:20"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nativeSrc": "1340:5:20",
																				"nodeType": "YulTypedName",
																				"src": "1340:5:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nativeSrc": "1434:20:20",
																			"nodeType": "YulBlock",
																			"src": "1434:20:20",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "1443:5:20",
																								"nodeType": "YulIdentifier",
																								"src": "1443:5:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1450:1:20",
																								"nodeType": "YulLiteral",
																								"src": "1450:1:20",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nativeSrc": "1436:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "1436:6:20"
																						},
																						"nativeSrc": "1436:16:20",
																						"nodeType": "YulFunctionCall",
																						"src": "1436:16:20"
																					},
																					"nativeSrc": "1436:16:20",
																					"nodeType": "YulExpressionStatement",
																					"src": "1436:16:20"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nativeSrc": "1384:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "1384:5:20"
																				},
																				{
																					"name": "_1",
																					"nativeSrc": "1391:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "1391:2:20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nativeSrc": "1381:2:20",
																				"nodeType": "YulIdentifier",
																				"src": "1381:2:20"
																			},
																			"nativeSrc": "1381:13:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1381:13:20"
																		},
																		"nativeSrc": "1373:81:20",
																		"nodeType": "YulForLoop",
																		"post": {
																			"nativeSrc": "1395:26:20",
																			"nodeType": "YulBlock",
																			"src": "1395:26:20",
																			"statements": [
																				{
																					"nativeSrc": "1397:22:20",
																					"nodeType": "YulAssignment",
																					"src": "1397:22:20",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nativeSrc": "1410:5:20",
																								"nodeType": "YulIdentifier",
																								"src": "1410:5:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "1417:1:20",
																								"nodeType": "YulLiteral",
																								"src": "1417:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "1406:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "1406:3:20"
																						},
																						"nativeSrc": "1406:13:20",
																						"nodeType": "YulFunctionCall",
																						"src": "1406:13:20"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nativeSrc": "1397:5:20",
																							"nodeType": "YulIdentifier",
																							"src": "1397:5:20"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nativeSrc": "1377:3:20",
																			"nodeType": "YulBlock",
																			"src": "1377:3:20",
																			"statements": []
																		},
																		"src": "1373:81:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nativeSrc": "1049:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "1049:3:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1054:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1054:2:20",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1046:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1046:2:20"
																},
																"nativeSrc": "1046:11:20",
																"nodeType": "YulFunctionCall",
																"src": "1046:11:20"
															},
															"nativeSrc": "1043:421:20",
															"nodeType": "YulIf",
															"src": "1043:421:20"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nativeSrc": "952:518:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "1005:5:20",
														"nodeType": "YulTypedName",
														"src": "1005:5:20",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "1012:3:20",
														"nodeType": "YulTypedName",
														"src": "1012:3:20",
														"type": ""
													},
													{
														"name": "startIndex",
														"nativeSrc": "1017:10:20",
														"nodeType": "YulTypedName",
														"src": "1017:10:20",
														"type": ""
													}
												],
												"src": "952:518:20"
											},
											{
												"body": {
													"nativeSrc": "1560:81:20",
													"nodeType": "YulBlock",
													"src": "1560:81:20",
													"statements": [
														{
															"nativeSrc": "1570:65:20",
															"nodeType": "YulAssignment",
															"src": "1570:65:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nativeSrc": "1585:4:20",
																				"nodeType": "YulIdentifier",
																				"src": "1585:4:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "1603:1:20",
																										"nodeType": "YulLiteral",
																										"src": "1603:1:20",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nativeSrc": "1606:3:20",
																										"nodeType": "YulIdentifier",
																										"src": "1606:3:20"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "1599:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "1599:3:20"
																								},
																								"nativeSrc": "1599:11:20",
																								"nodeType": "YulFunctionCall",
																								"src": "1599:11:20"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "1616:1:20",
																										"nodeType": "YulLiteral",
																										"src": "1616:1:20",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nativeSrc": "1612:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "1612:3:20"
																								},
																								"nativeSrc": "1612:6:20",
																								"nodeType": "YulFunctionCall",
																								"src": "1612:6:20"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nativeSrc": "1595:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "1595:3:20"
																						},
																						"nativeSrc": "1595:24:20",
																						"nodeType": "YulFunctionCall",
																						"src": "1595:24:20"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "1591:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "1591:3:20"
																				},
																				"nativeSrc": "1591:29:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1591:29:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1581:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1581:3:20"
																		},
																		"nativeSrc": "1581:40:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1581:40:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "1627:1:20",
																				"nodeType": "YulLiteral",
																				"src": "1627:1:20",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nativeSrc": "1630:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "1630:3:20"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "1623:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1623:3:20"
																		},
																		"nativeSrc": "1623:11:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1623:11:20"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "1578:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1578:2:20"
																},
																"nativeSrc": "1578:57:20",
																"nodeType": "YulFunctionCall",
																"src": "1578:57:20"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nativeSrc": "1570:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1570:4:20"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nativeSrc": "1475:166:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "1537:4:20",
														"nodeType": "YulTypedName",
														"src": "1537:4:20",
														"type": ""
													},
													{
														"name": "len",
														"nativeSrc": "1543:3:20",
														"nodeType": "YulTypedName",
														"src": "1543:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nativeSrc": "1551:4:20",
														"nodeType": "YulTypedName",
														"src": "1551:4:20",
														"type": ""
													}
												],
												"src": "1475:166:20"
											},
											{
												"body": {
													"nativeSrc": "1742:1203:20",
													"nodeType": "YulBlock",
													"src": "1742:1203:20",
													"statements": [
														{
															"nativeSrc": "1752:24:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1752:24:20",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nativeSrc": "1772:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "1772:3:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "1766:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1766:5:20"
																},
																"nativeSrc": "1766:10:20",
																"nodeType": "YulFunctionCall",
																"src": "1766:10:20"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nativeSrc": "1756:6:20",
																	"nodeType": "YulTypedName",
																	"src": "1756:6:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "1819:22:20",
																"nodeType": "YulBlock",
																"src": "1819:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nativeSrc": "1821:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "1821:16:20"
																			},
																			"nativeSrc": "1821:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1821:18:20"
																		},
																		"nativeSrc": "1821:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1821:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "1791:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1791:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "1807:2:20",
																						"nodeType": "YulLiteral",
																						"src": "1807:2:20",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "1811:1:20",
																						"nodeType": "YulLiteral",
																						"src": "1811:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "1803:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "1803:3:20"
																				},
																				"nativeSrc": "1803:10:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1803:10:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1815:1:20",
																				"nodeType": "YulLiteral",
																				"src": "1815:1:20",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1799:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1799:3:20"
																		},
																		"nativeSrc": "1799:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1799:18:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "1788:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "1788:2:20"
																},
																"nativeSrc": "1788:30:20",
																"nodeType": "YulFunctionCall",
																"src": "1788:30:20"
															},
															"nativeSrc": "1785:56:20",
															"nodeType": "YulIf",
															"src": "1785:56:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nativeSrc": "1894:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "1894:4:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nativeSrc": "1932:4:20",
																						"nodeType": "YulIdentifier",
																						"src": "1932:4:20"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nativeSrc": "1926:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "1926:5:20"
																				},
																				"nativeSrc": "1926:11:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1926:11:20"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nativeSrc": "1900:25:20",
																			"nodeType": "YulIdentifier",
																			"src": "1900:25:20"
																		},
																		"nativeSrc": "1900:38:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1900:38:20"
																	},
																	{
																		"name": "newLen",
																		"nativeSrc": "1940:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1940:6:20"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nativeSrc": "1850:43:20",
																	"nodeType": "YulIdentifier",
																	"src": "1850:43:20"
																},
																"nativeSrc": "1850:97:20",
																"nodeType": "YulFunctionCall",
																"src": "1850:97:20"
															},
															"nativeSrc": "1850:97:20",
															"nodeType": "YulExpressionStatement",
															"src": "1850:97:20"
														},
														{
															"nativeSrc": "1956:18:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1956:18:20",
															"value": {
																"kind": "number",
																"nativeSrc": "1973:1:20",
																"nodeType": "YulLiteral",
																"src": "1973:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "1960:9:20",
																	"nodeType": "YulTypedName",
																	"src": "1960:9:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1983:17:20",
															"nodeType": "YulAssignment",
															"src": "1983:17:20",
															"value": {
																"kind": "number",
																"nativeSrc": "1996:4:20",
																"nodeType": "YulLiteral",
																"src": "1996:4:20",
																"type": "",
																"value": "0x20"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nativeSrc": "1983:9:20",
																	"nodeType": "YulIdentifier",
																	"src": "1983:9:20"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "2046:642:20",
																		"nodeType": "YulBlock",
																		"src": "2046:642:20",
																		"statements": [
																			{
																				"nativeSrc": "2060:35:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "2060:35:20",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nativeSrc": "2079:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "2079:6:20"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "2091:2:20",
																									"nodeType": "YulLiteral",
																									"src": "2091:2:20",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "2087:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "2087:3:20"
																							},
																							"nativeSrc": "2087:7:20",
																							"nodeType": "YulFunctionCall",
																							"src": "2087:7:20"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nativeSrc": "2075:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "2075:3:20"
																					},
																					"nativeSrc": "2075:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2075:20:20"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nativeSrc": "2064:7:20",
																						"nodeType": "YulTypedName",
																						"src": "2064:7:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "2108:49:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "2108:49:20",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "2152:4:20",
																							"nodeType": "YulIdentifier",
																							"src": "2152:4:20"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nativeSrc": "2122:29:20",
																						"nodeType": "YulIdentifier",
																						"src": "2122:29:20"
																					},
																					"nativeSrc": "2122:35:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2122:35:20"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nativeSrc": "2112:6:20",
																						"nodeType": "YulTypedName",
																						"src": "2112:6:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "2170:10:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "2170:10:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "2179:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2179:1:20",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nativeSrc": "2174:1:20",
																						"nodeType": "YulTypedName",
																						"src": "2174:1:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "2250:165:20",
																					"nodeType": "YulBlock",
																					"src": "2250:165:20",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "2275:6:20",
																										"nodeType": "YulIdentifier",
																										"src": "2275:6:20"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nativeSrc": "2293:3:20",
																														"nodeType": "YulIdentifier",
																														"src": "2293:3:20"
																													},
																													{
																														"name": "srcOffset",
																														"nativeSrc": "2298:9:20",
																														"nodeType": "YulIdentifier",
																														"src": "2298:9:20"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nativeSrc": "2289:3:20",
																													"nodeType": "YulIdentifier",
																													"src": "2289:3:20"
																												},
																												"nativeSrc": "2289:19:20",
																												"nodeType": "YulFunctionCall",
																												"src": "2289:19:20"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nativeSrc": "2283:5:20",
																											"nodeType": "YulIdentifier",
																											"src": "2283:5:20"
																										},
																										"nativeSrc": "2283:26:20",
																										"nodeType": "YulFunctionCall",
																										"src": "2283:26:20"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "2268:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "2268:6:20"
																								},
																								"nativeSrc": "2268:42:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2268:42:20"
																							},
																							"nativeSrc": "2268:42:20",
																							"nodeType": "YulExpressionStatement",
																							"src": "2268:42:20"
																						},
																						{
																							"nativeSrc": "2327:24:20",
																							"nodeType": "YulAssignment",
																							"src": "2327:24:20",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "2341:6:20",
																										"nodeType": "YulIdentifier",
																										"src": "2341:6:20"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "2349:1:20",
																										"nodeType": "YulLiteral",
																										"src": "2349:1:20",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "2337:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "2337:3:20"
																								},
																								"nativeSrc": "2337:14:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2337:14:20"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nativeSrc": "2327:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "2327:6:20"
																								}
																							]
																						},
																						{
																							"nativeSrc": "2368:33:20",
																							"nodeType": "YulAssignment",
																							"src": "2368:33:20",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nativeSrc": "2385:9:20",
																										"nodeType": "YulIdentifier",
																										"src": "2385:9:20"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "2396:4:20",
																										"nodeType": "YulLiteral",
																										"src": "2396:4:20",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "2381:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "2381:3:20"
																								},
																								"nativeSrc": "2381:20:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2381:20:20"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nativeSrc": "2368:9:20",
																									"nodeType": "YulIdentifier",
																									"src": "2368:9:20"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nativeSrc": "2204:1:20",
																							"nodeType": "YulIdentifier",
																							"src": "2204:1:20"
																						},
																						{
																							"name": "loopEnd",
																							"nativeSrc": "2207:7:20",
																							"nodeType": "YulIdentifier",
																							"src": "2207:7:20"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "2201:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "2201:2:20"
																					},
																					"nativeSrc": "2201:14:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2201:14:20"
																				},
																				"nativeSrc": "2193:222:20",
																				"nodeType": "YulForLoop",
																				"post": {
																					"nativeSrc": "2216:21:20",
																					"nodeType": "YulBlock",
																					"src": "2216:21:20",
																					"statements": [
																						{
																							"nativeSrc": "2218:17:20",
																							"nodeType": "YulAssignment",
																							"src": "2218:17:20",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nativeSrc": "2227:1:20",
																										"nodeType": "YulIdentifier",
																										"src": "2227:1:20"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "2230:4:20",
																										"nodeType": "YulLiteral",
																										"src": "2230:4:20",
																										"type": "",
																										"value": "0x20"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nativeSrc": "2223:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "2223:3:20"
																								},
																								"nativeSrc": "2223:12:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2223:12:20"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nativeSrc": "2218:1:20",
																									"nodeType": "YulIdentifier",
																									"src": "2218:1:20"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nativeSrc": "2197:3:20",
																					"nodeType": "YulBlock",
																					"src": "2197:3:20",
																					"statements": []
																				},
																				"src": "2193:222:20"
																			},
																			{
																				"body": {
																					"nativeSrc": "2463:166:20",
																					"nodeType": "YulBlock",
																					"src": "2463:166:20",
																					"statements": [
																						{
																							"nativeSrc": "2481:43:20",
																							"nodeType": "YulVariableDeclaration",
																							"src": "2481:43:20",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "2508:3:20",
																												"nodeType": "YulIdentifier",
																												"src": "2508:3:20"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "2513:9:20",
																												"nodeType": "YulIdentifier",
																												"src": "2513:9:20"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "2504:3:20",
																											"nodeType": "YulIdentifier",
																											"src": "2504:3:20"
																										},
																										"nativeSrc": "2504:19:20",
																										"nodeType": "YulFunctionCall",
																										"src": "2504:19:20"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "2498:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "2498:5:20"
																								},
																								"nativeSrc": "2498:26:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2498:26:20"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nativeSrc": "2485:9:20",
																									"nodeType": "YulTypedName",
																									"src": "2485:9:20",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nativeSrc": "2548:6:20",
																										"nodeType": "YulIdentifier",
																										"src": "2548:6:20"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nativeSrc": "2560:9:20",
																												"nodeType": "YulIdentifier",
																												"src": "2560:9:20"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nativeSrc": "2587:1:20",
																																				"nodeType": "YulLiteral",
																																				"src": "2587:1:20",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nativeSrc": "2590:6:20",
																																				"nodeType": "YulIdentifier",
																																				"src": "2590:6:20"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nativeSrc": "2583:3:20",
																																			"nodeType": "YulIdentifier",
																																			"src": "2583:3:20"
																																		},
																																		"nativeSrc": "2583:14:20",
																																		"nodeType": "YulFunctionCall",
																																		"src": "2583:14:20"
																																	},
																																	{
																																		"kind": "number",
																																		"nativeSrc": "2599:3:20",
																																		"nodeType": "YulLiteral",
																																		"src": "2599:3:20",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nativeSrc": "2579:3:20",
																																	"nodeType": "YulIdentifier",
																																	"src": "2579:3:20"
																																},
																																"nativeSrc": "2579:24:20",
																																"nodeType": "YulFunctionCall",
																																"src": "2579:24:20"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nativeSrc": "2609:1:20",
																																		"nodeType": "YulLiteral",
																																		"src": "2609:1:20",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nativeSrc": "2605:3:20",
																																	"nodeType": "YulIdentifier",
																																	"src": "2605:3:20"
																																},
																																"nativeSrc": "2605:6:20",
																																"nodeType": "YulFunctionCall",
																																"src": "2605:6:20"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nativeSrc": "2575:3:20",
																															"nodeType": "YulIdentifier",
																															"src": "2575:3:20"
																														},
																														"nativeSrc": "2575:37:20",
																														"nodeType": "YulFunctionCall",
																														"src": "2575:37:20"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nativeSrc": "2571:3:20",
																													"nodeType": "YulIdentifier",
																													"src": "2571:3:20"
																												},
																												"nativeSrc": "2571:42:20",
																												"nodeType": "YulFunctionCall",
																												"src": "2571:42:20"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nativeSrc": "2556:3:20",
																											"nodeType": "YulIdentifier",
																											"src": "2556:3:20"
																										},
																										"nativeSrc": "2556:58:20",
																										"nodeType": "YulFunctionCall",
																										"src": "2556:58:20"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nativeSrc": "2541:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "2541:6:20"
																								},
																								"nativeSrc": "2541:74:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2541:74:20"
																							},
																							"nativeSrc": "2541:74:20",
																							"nodeType": "YulExpressionStatement",
																							"src": "2541:74:20"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nativeSrc": "2434:7:20",
																							"nodeType": "YulIdentifier",
																							"src": "2434:7:20"
																						},
																						{
																							"name": "newLen",
																							"nativeSrc": "2443:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "2443:6:20"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nativeSrc": "2431:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "2431:2:20"
																					},
																					"nativeSrc": "2431:19:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2431:19:20"
																				},
																				"nativeSrc": "2428:201:20",
																				"nodeType": "YulIf",
																				"src": "2428:201:20"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "2649:4:20",
																							"nodeType": "YulIdentifier",
																							"src": "2649:4:20"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "2663:1:20",
																											"nodeType": "YulLiteral",
																											"src": "2663:1:20",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nativeSrc": "2666:6:20",
																											"nodeType": "YulIdentifier",
																											"src": "2666:6:20"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nativeSrc": "2659:3:20",
																										"nodeType": "YulIdentifier",
																										"src": "2659:3:20"
																									},
																									"nativeSrc": "2659:14:20",
																									"nodeType": "YulFunctionCall",
																									"src": "2659:14:20"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2675:1:20",
																									"nodeType": "YulLiteral",
																									"src": "2675:1:20",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2655:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "2655:3:20"
																							},
																							"nativeSrc": "2655:22:20",
																							"nodeType": "YulFunctionCall",
																							"src": "2655:22:20"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "2642:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "2642:6:20"
																					},
																					"nativeSrc": "2642:36:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2642:36:20"
																				},
																				"nativeSrc": "2642:36:20",
																				"nodeType": "YulExpressionStatement",
																				"src": "2642:36:20"
																			}
																		]
																	},
																	"nativeSrc": "2039:649:20",
																	"nodeType": "YulCase",
																	"src": "2039:649:20",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "2044:1:20",
																		"nodeType": "YulLiteral",
																		"src": "2044:1:20",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "2705:234:20",
																		"nodeType": "YulBlock",
																		"src": "2705:234:20",
																		"statements": [
																			{
																				"nativeSrc": "2719:14:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "2719:14:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "2732:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2732:1:20",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nativeSrc": "2723:5:20",
																						"nodeType": "YulTypedName",
																						"src": "2723:5:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nativeSrc": "2768:67:20",
																					"nodeType": "YulBlock",
																					"src": "2768:67:20",
																					"statements": [
																						{
																							"nativeSrc": "2786:35:20",
																							"nodeType": "YulAssignment",
																							"src": "2786:35:20",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nativeSrc": "2805:3:20",
																												"nodeType": "YulIdentifier",
																												"src": "2805:3:20"
																											},
																											{
																												"name": "srcOffset",
																												"nativeSrc": "2810:9:20",
																												"nodeType": "YulIdentifier",
																												"src": "2810:9:20"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nativeSrc": "2801:3:20",
																											"nodeType": "YulIdentifier",
																											"src": "2801:3:20"
																										},
																										"nativeSrc": "2801:19:20",
																										"nodeType": "YulFunctionCall",
																										"src": "2801:19:20"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nativeSrc": "2795:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "2795:5:20"
																								},
																								"nativeSrc": "2795:26:20",
																								"nodeType": "YulFunctionCall",
																								"src": "2795:26:20"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nativeSrc": "2786:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "2786:5:20"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nativeSrc": "2749:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "2749:6:20"
																				},
																				"nativeSrc": "2746:89:20",
																				"nodeType": "YulIf",
																				"src": "2746:89:20"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nativeSrc": "2855:4:20",
																							"nodeType": "YulIdentifier",
																							"src": "2855:4:20"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nativeSrc": "2914:5:20",
																									"nodeType": "YulIdentifier",
																									"src": "2914:5:20"
																								},
																								{
																									"name": "newLen",
																									"nativeSrc": "2921:6:20",
																									"nodeType": "YulIdentifier",
																									"src": "2921:6:20"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nativeSrc": "2861:52:20",
																								"nodeType": "YulIdentifier",
																								"src": "2861:52:20"
																							},
																							"nativeSrc": "2861:67:20",
																							"nodeType": "YulFunctionCall",
																							"src": "2861:67:20"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nativeSrc": "2848:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "2848:6:20"
																					},
																					"nativeSrc": "2848:81:20",
																					"nodeType": "YulFunctionCall",
																					"src": "2848:81:20"
																				},
																				"nativeSrc": "2848:81:20",
																				"nodeType": "YulExpressionStatement",
																				"src": "2848:81:20"
																			}
																		]
																	},
																	"nativeSrc": "2697:242:20",
																	"nodeType": "YulCase",
																	"src": "2697:242:20",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nativeSrc": "2019:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "2019:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2027:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2027:2:20",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "2016:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "2016:2:20"
																},
																"nativeSrc": "2016:14:20",
																"nodeType": "YulFunctionCall",
																"src": "2016:14:20"
															},
															"nativeSrc": "2009:930:20",
															"nodeType": "YulSwitch",
															"src": "2009:930:20"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nativeSrc": "1646:1299:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nativeSrc": "1727:4:20",
														"nodeType": "YulTypedName",
														"src": "1727:4:20",
														"type": ""
													},
													{
														"name": "src",
														"nativeSrc": "1733:3:20",
														"nodeType": "YulTypedName",
														"src": "1733:3:20",
														"type": ""
													}
												],
												"src": "1646:1299:20"
											},
											{
												"body": {
													"nativeSrc": "3051:102:20",
													"nodeType": "YulBlock",
													"src": "3051:102:20",
													"statements": [
														{
															"nativeSrc": "3061:26:20",
															"nodeType": "YulAssignment",
															"src": "3061:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3073:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "3073:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3084:2:20",
																		"nodeType": "YulLiteral",
																		"src": "3084:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3069:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3069:3:20"
																},
																"nativeSrc": "3069:18:20",
																"nodeType": "YulFunctionCall",
																"src": "3069:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3061:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "3061:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3103:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "3103:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3118:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3118:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3134:3:20",
																								"nodeType": "YulLiteral",
																								"src": "3134:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3139:1:20",
																								"nodeType": "YulLiteral",
																								"src": "3139:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3130:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "3130:3:20"
																						},
																						"nativeSrc": "3130:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "3130:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3143:1:20",
																						"nodeType": "YulLiteral",
																						"src": "3143:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3126:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3126:3:20"
																				},
																				"nativeSrc": "3126:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "3126:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3114:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3114:3:20"
																		},
																		"nativeSrc": "3114:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3114:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3096:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3096:6:20"
																},
																"nativeSrc": "3096:51:20",
																"nodeType": "YulFunctionCall",
																"src": "3096:51:20"
															},
															"nativeSrc": "3096:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "3096:51:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "2950:203:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3020:9:20",
														"nodeType": "YulTypedName",
														"src": "3020:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3031:6:20",
														"nodeType": "YulTypedName",
														"src": "3031:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3042:4:20",
														"nodeType": "YulTypedName",
														"src": "3042:4:20",
														"type": ""
													}
												],
												"src": "2950:203:20"
											},
											{
												"body": {
													"nativeSrc": "3190:95:20",
													"nodeType": "YulBlock",
													"src": "3190:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3207:1:20",
																		"nodeType": "YulLiteral",
																		"src": "3207:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "3214:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3214:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3219:10:20",
																				"nodeType": "YulLiteral",
																				"src": "3219:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "3210:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3210:3:20"
																		},
																		"nativeSrc": "3210:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3210:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3200:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3200:6:20"
																},
																"nativeSrc": "3200:31:20",
																"nodeType": "YulFunctionCall",
																"src": "3200:31:20"
															},
															"nativeSrc": "3200:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "3200:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3247:1:20",
																		"nodeType": "YulLiteral",
																		"src": "3247:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3250:4:20",
																		"nodeType": "YulLiteral",
																		"src": "3250:4:20",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3240:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3240:6:20"
																},
																"nativeSrc": "3240:15:20",
																"nodeType": "YulFunctionCall",
																"src": "3240:15:20"
															},
															"nativeSrc": "3240:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "3240:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3271:1:20",
																		"nodeType": "YulLiteral",
																		"src": "3271:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3274:4:20",
																		"nodeType": "YulLiteral",
																		"src": "3274:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "3264:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3264:6:20"
																},
																"nativeSrc": "3264:15:20",
																"nodeType": "YulFunctionCall",
																"src": "3264:15:20"
															},
															"nativeSrc": "3264:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "3264:15:20"
														}
													]
												},
												"name": "panic_error_0x11",
												"nativeSrc": "3158:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "3158:127:20"
											},
											{
												"body": {
													"nativeSrc": "3359:306:20",
													"nodeType": "YulBlock",
													"src": "3359:306:20",
													"statements": [
														{
															"nativeSrc": "3369:10:20",
															"nodeType": "YulAssignment",
															"src": "3369:10:20",
															"value": {
																"kind": "number",
																"nativeSrc": "3378:1:20",
																"nodeType": "YulLiteral",
																"src": "3378:1:20",
																"type": "",
																"value": "1"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "3369:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "3369:5:20"
																}
															]
														},
														{
															"nativeSrc": "3388:13:20",
															"nodeType": "YulAssignment",
															"src": "3388:13:20",
															"value": {
																"name": "_base",
																"nativeSrc": "3396:5:20",
																"nodeType": "YulIdentifier",
																"src": "3396:5:20"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nativeSrc": "3388:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "3388:4:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3446:213:20",
																"nodeType": "YulBlock",
																"src": "3446:213:20",
																"statements": [
																	{
																		"body": {
																			"nativeSrc": "3488:22:20",
																			"nodeType": "YulBlock",
																			"src": "3488:22:20",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nativeSrc": "3490:16:20",
																							"nodeType": "YulIdentifier",
																							"src": "3490:16:20"
																						},
																						"nativeSrc": "3490:18:20",
																						"nodeType": "YulFunctionCall",
																						"src": "3490:18:20"
																					},
																					"nativeSrc": "3490:18:20",
																					"nodeType": "YulExpressionStatement",
																					"src": "3490:18:20"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "3466:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "3466:4:20"
																				},
																				{
																					"arguments": [
																						{
																							"name": "max",
																							"nativeSrc": "3476:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "3476:3:20"
																						},
																						{
																							"name": "base",
																							"nativeSrc": "3481:4:20",
																							"nodeType": "YulIdentifier",
																							"src": "3481:4:20"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nativeSrc": "3472:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "3472:3:20"
																					},
																					"nativeSrc": "3472:14:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3472:14:20"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nativeSrc": "3463:2:20",
																				"nodeType": "YulIdentifier",
																				"src": "3463:2:20"
																			},
																			"nativeSrc": "3463:24:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3463:24:20"
																		},
																		"nativeSrc": "3460:50:20",
																		"nodeType": "YulIf",
																		"src": "3460:50:20"
																	},
																	{
																		"body": {
																			"nativeSrc": "3543:29:20",
																			"nodeType": "YulBlock",
																			"src": "3543:29:20",
																			"statements": [
																				{
																					"nativeSrc": "3545:25:20",
																					"nodeType": "YulAssignment",
																					"src": "3545:25:20",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nativeSrc": "3558:5:20",
																								"nodeType": "YulIdentifier",
																								"src": "3558:5:20"
																							},
																							{
																								"name": "base",
																								"nativeSrc": "3565:4:20",
																								"nodeType": "YulIdentifier",
																								"src": "3565:4:20"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nativeSrc": "3554:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "3554:3:20"
																						},
																						"nativeSrc": "3554:16:20",
																						"nodeType": "YulFunctionCall",
																						"src": "3554:16:20"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nativeSrc": "3545:5:20",
																							"nodeType": "YulIdentifier",
																							"src": "3545:5:20"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nativeSrc": "3530:8:20",
																					"nodeType": "YulIdentifier",
																					"src": "3530:8:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3540:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3540:1:20",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "3526:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3526:3:20"
																			},
																			"nativeSrc": "3526:16:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3526:16:20"
																		},
																		"nativeSrc": "3523:49:20",
																		"nodeType": "YulIf",
																		"src": "3523:49:20"
																	},
																	{
																		"nativeSrc": "3585:23:20",
																		"nodeType": "YulAssignment",
																		"src": "3585:23:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "3597:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "3597:4:20"
																				},
																				{
																					"name": "base",
																					"nativeSrc": "3603:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "3603:4:20"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nativeSrc": "3593:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3593:3:20"
																			},
																			"nativeSrc": "3593:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3593:15:20"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nativeSrc": "3585:4:20",
																				"nodeType": "YulIdentifier",
																				"src": "3585:4:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3621:28:20",
																		"nodeType": "YulAssignment",
																		"src": "3621:28:20",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "3637:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3637:1:20",
																					"type": "",
																					"value": "1"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "3640:8:20",
																					"nodeType": "YulIdentifier",
																					"src": "3640:8:20"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nativeSrc": "3633:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3633:3:20"
																			},
																			"nativeSrc": "3633:16:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3633:16:20"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nativeSrc": "3621:8:20",
																				"nodeType": "YulIdentifier",
																				"src": "3621:8:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "3421:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "3421:8:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3431:1:20",
																		"nodeType": "YulLiteral",
																		"src": "3431:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "3418:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "3418:2:20"
																},
																"nativeSrc": "3418:15:20",
																"nodeType": "YulFunctionCall",
																"src": "3418:15:20"
															},
															"nativeSrc": "3410:249:20",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3434:3:20",
																"nodeType": "YulBlock",
																"src": "3434:3:20",
																"statements": []
															},
															"pre": {
																"nativeSrc": "3414:3:20",
																"nodeType": "YulBlock",
																"src": "3414:3:20",
																"statements": []
															},
															"src": "3410:249:20"
														}
													]
												},
												"name": "checked_exp_helper",
												"nativeSrc": "3290:375:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nativeSrc": "3318:5:20",
														"nodeType": "YulTypedName",
														"src": "3318:5:20",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "3325:8:20",
														"nodeType": "YulTypedName",
														"src": "3325:8:20",
														"type": ""
													},
													{
														"name": "max",
														"nativeSrc": "3335:3:20",
														"nodeType": "YulTypedName",
														"src": "3335:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "3343:5:20",
														"nodeType": "YulTypedName",
														"src": "3343:5:20",
														"type": ""
													},
													{
														"name": "base",
														"nativeSrc": "3350:4:20",
														"nodeType": "YulTypedName",
														"src": "3350:4:20",
														"type": ""
													}
												],
												"src": "3290:375:20"
											},
											{
												"body": {
													"nativeSrc": "3729:843:20",
													"nodeType": "YulBlock",
													"src": "3729:843:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "3767:52:20",
																"nodeType": "YulBlock",
																"src": "3767:52:20",
																"statements": [
																	{
																		"nativeSrc": "3781:10:20",
																		"nodeType": "YulAssignment",
																		"src": "3781:10:20",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "3790:1:20",
																			"nodeType": "YulLiteral",
																			"src": "3790:1:20",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "3781:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "3781:5:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3804:5:20",
																		"nodeType": "YulLeave",
																		"src": "3804:5:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nativeSrc": "3749:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "3749:8:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3742:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3742:6:20"
																},
																"nativeSrc": "3742:16:20",
																"nodeType": "YulFunctionCall",
																"src": "3742:16:20"
															},
															"nativeSrc": "3739:80:20",
															"nodeType": "YulIf",
															"src": "3739:80:20"
														},
														{
															"body": {
																"nativeSrc": "3852:52:20",
																"nodeType": "YulBlock",
																"src": "3852:52:20",
																"statements": [
																	{
																		"nativeSrc": "3866:10:20",
																		"nodeType": "YulAssignment",
																		"src": "3866:10:20",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "3875:1:20",
																			"nodeType": "YulLiteral",
																			"src": "3875:1:20",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "3866:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "3866:5:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3889:5:20",
																		"nodeType": "YulLeave",
																		"src": "3889:5:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "3838:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "3838:4:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "3831:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3831:6:20"
																},
																"nativeSrc": "3831:12:20",
																"nodeType": "YulFunctionCall",
																"src": "3831:12:20"
															},
															"nativeSrc": "3828:76:20",
															"nodeType": "YulIf",
															"src": "3828:76:20"
														},
														{
															"cases": [
																{
																	"body": {
																		"nativeSrc": "3940:52:20",
																		"nodeType": "YulBlock",
																		"src": "3940:52:20",
																		"statements": [
																			{
																				"nativeSrc": "3954:10:20",
																				"nodeType": "YulAssignment",
																				"src": "3954:10:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "3963:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3963:1:20",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "3954:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "3954:5:20"
																					}
																				]
																			},
																			{
																				"nativeSrc": "3977:5:20",
																				"nodeType": "YulLeave",
																				"src": "3977:5:20"
																			}
																		]
																	},
																	"nativeSrc": "3933:59:20",
																	"nodeType": "YulCase",
																	"src": "3933:59:20",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "3938:1:20",
																		"nodeType": "YulLiteral",
																		"src": "3938:1:20",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nativeSrc": "4008:167:20",
																		"nodeType": "YulBlock",
																		"src": "4008:167:20",
																		"statements": [
																			{
																				"body": {
																					"nativeSrc": "4043:22:20",
																					"nodeType": "YulBlock",
																					"src": "4043:22:20",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nativeSrc": "4045:16:20",
																									"nodeType": "YulIdentifier",
																									"src": "4045:16:20"
																								},
																								"nativeSrc": "4045:18:20",
																								"nodeType": "YulFunctionCall",
																								"src": "4045:18:20"
																							},
																							"nativeSrc": "4045:18:20",
																							"nodeType": "YulExpressionStatement",
																							"src": "4045:18:20"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "4028:8:20",
																							"nodeType": "YulIdentifier",
																							"src": "4028:8:20"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4038:3:20",
																							"nodeType": "YulLiteral",
																							"src": "4038:3:20",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nativeSrc": "4025:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "4025:2:20"
																					},
																					"nativeSrc": "4025:17:20",
																					"nodeType": "YulFunctionCall",
																					"src": "4025:17:20"
																				},
																				"nativeSrc": "4022:43:20",
																				"nodeType": "YulIf",
																				"src": "4022:43:20"
																			},
																			{
																				"nativeSrc": "4078:25:20",
																				"nodeType": "YulAssignment",
																				"src": "4078:25:20",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nativeSrc": "4091:8:20",
																							"nodeType": "YulIdentifier",
																							"src": "4091:8:20"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "4101:1:20",
																							"nodeType": "YulLiteral",
																							"src": "4101:1:20",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "4087:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "4087:3:20"
																					},
																					"nativeSrc": "4087:16:20",
																					"nodeType": "YulFunctionCall",
																					"src": "4087:16:20"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nativeSrc": "4078:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "4078:5:20"
																					}
																				]
																			},
																			{
																				"nativeSrc": "4116:11:20",
																				"nodeType": "YulVariableDeclaration",
																				"src": "4116:11:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "4126:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4126:1:20",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "_1",
																						"nativeSrc": "4120:2:20",
																						"nodeType": "YulTypedName",
																						"src": "4120:2:20",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nativeSrc": "4140:7:20",
																				"nodeType": "YulAssignment",
																				"src": "4140:7:20",
																				"value": {
																					"kind": "number",
																					"nativeSrc": "4146:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4146:1:20",
																					"type": "",
																					"value": "0"
																				},
																				"variableNames": [
																					{
																						"name": "_1",
																						"nativeSrc": "4140:2:20",
																						"nodeType": "YulIdentifier",
																						"src": "4140:2:20"
																					}
																				]
																			},
																			{
																				"nativeSrc": "4160:5:20",
																				"nodeType": "YulLeave",
																				"src": "4160:5:20"
																			}
																		]
																	},
																	"nativeSrc": "4001:174:20",
																	"nodeType": "YulCase",
																	"src": "4001:174:20",
																	"value": {
																		"kind": "number",
																		"nativeSrc": "4006:1:20",
																		"nodeType": "YulLiteral",
																		"src": "4006:1:20",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nativeSrc": "3920:4:20",
																"nodeType": "YulIdentifier",
																"src": "3920:4:20"
															},
															"nativeSrc": "3913:262:20",
															"nodeType": "YulSwitch",
															"src": "3913:262:20"
														},
														{
															"body": {
																"nativeSrc": "4273:114:20",
																"nodeType": "YulBlock",
																"src": "4273:114:20",
																"statements": [
																	{
																		"nativeSrc": "4287:28:20",
																		"nodeType": "YulAssignment",
																		"src": "4287:28:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nativeSrc": "4300:4:20",
																					"nodeType": "YulIdentifier",
																					"src": "4300:4:20"
																				},
																				{
																					"name": "exponent",
																					"nativeSrc": "4306:8:20",
																					"nodeType": "YulIdentifier",
																					"src": "4306:8:20"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nativeSrc": "4296:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "4296:3:20"
																			},
																			"nativeSrc": "4296:19:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4296:19:20"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nativeSrc": "4287:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "4287:5:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "4328:11:20",
																		"nodeType": "YulVariableDeclaration",
																		"src": "4328:11:20",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "4338:1:20",
																			"nodeType": "YulLiteral",
																			"src": "4338:1:20",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nativeSrc": "4332:2:20",
																				"nodeType": "YulTypedName",
																				"src": "4332:2:20",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nativeSrc": "4352:7:20",
																		"nodeType": "YulAssignment",
																		"src": "4352:7:20",
																		"value": {
																			"kind": "number",
																			"nativeSrc": "4358:1:20",
																			"nodeType": "YulLiteral",
																			"src": "4358:1:20",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "_2",
																				"nativeSrc": "4352:2:20",
																				"nodeType": "YulIdentifier",
																				"src": "4352:2:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "4372:5:20",
																		"nodeType": "YulLeave",
																		"src": "4372:5:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "4197:4:20",
																						"nodeType": "YulIdentifier",
																						"src": "4197:4:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4203:2:20",
																						"nodeType": "YulLiteral",
																						"src": "4203:2:20",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4194:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "4194:2:20"
																				},
																				"nativeSrc": "4194:12:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4194:12:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "4211:8:20",
																						"nodeType": "YulIdentifier",
																						"src": "4211:8:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4221:2:20",
																						"nodeType": "YulLiteral",
																						"src": "4221:2:20",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4208:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "4208:2:20"
																				},
																				"nativeSrc": "4208:16:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4208:16:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4190:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4190:3:20"
																		},
																		"nativeSrc": "4190:35:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4190:35:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nativeSrc": "4234:4:20",
																						"nodeType": "YulIdentifier",
																						"src": "4234:4:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4240:3:20",
																						"nodeType": "YulLiteral",
																						"src": "4240:3:20",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4231:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "4231:2:20"
																				},
																				"nativeSrc": "4231:13:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4231:13:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nativeSrc": "4249:8:20",
																						"nodeType": "YulIdentifier",
																						"src": "4249:8:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4259:2:20",
																						"nodeType": "YulLiteral",
																						"src": "4259:2:20",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4246:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "4246:2:20"
																				},
																				"nativeSrc": "4246:16:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4246:16:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4227:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4227:3:20"
																		},
																		"nativeSrc": "4227:36:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4227:36:20"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nativeSrc": "4187:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "4187:2:20"
																},
																"nativeSrc": "4187:77:20",
																"nodeType": "YulFunctionCall",
																"src": "4187:77:20"
															},
															"nativeSrc": "4184:203:20",
															"nodeType": "YulIf",
															"src": "4184:203:20"
														},
														{
															"nativeSrc": "4396:65:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4396:65:20",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "4438:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "4438:4:20"
																	},
																	{
																		"name": "exponent",
																		"nativeSrc": "4444:8:20",
																		"nodeType": "YulIdentifier",
																		"src": "4444:8:20"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "4458:1:20",
																				"nodeType": "YulLiteral",
																				"src": "4458:1:20",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nativeSrc": "4454:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4454:3:20"
																		},
																		"nativeSrc": "4454:6:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4454:6:20"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nativeSrc": "4419:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "4419:18:20"
																},
																"nativeSrc": "4419:42:20",
																"nodeType": "YulFunctionCall",
																"src": "4419:42:20"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nativeSrc": "4400:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4400:7:20",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nativeSrc": "4409:6:20",
																	"nodeType": "YulTypedName",
																	"src": "4409:6:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4506:22:20",
																"nodeType": "YulBlock",
																"src": "4506:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "4508:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "4508:16:20"
																			},
																			"nativeSrc": "4508:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4508:18:20"
																		},
																		"nativeSrc": "4508:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4508:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "4476:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "4476:7:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4493:1:20",
																						"nodeType": "YulLiteral",
																						"src": "4493:1:20",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4489:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "4489:3:20"
																				},
																				"nativeSrc": "4489:6:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4489:6:20"
																			},
																			{
																				"name": "base_1",
																				"nativeSrc": "4497:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "4497:6:20"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "4485:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4485:3:20"
																		},
																		"nativeSrc": "4485:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4485:19:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "4473:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "4473:2:20"
																},
																"nativeSrc": "4473:32:20",
																"nodeType": "YulFunctionCall",
																"src": "4473:32:20"
															},
															"nativeSrc": "4470:58:20",
															"nodeType": "YulIf",
															"src": "4470:58:20"
														},
														{
															"nativeSrc": "4537:29:20",
															"nodeType": "YulAssignment",
															"src": "4537:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nativeSrc": "4550:7:20",
																		"nodeType": "YulIdentifier",
																		"src": "4550:7:20"
																	},
																	{
																		"name": "base_1",
																		"nativeSrc": "4559:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "4559:6:20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "4546:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4546:3:20"
																},
																"nativeSrc": "4546:20:20",
																"nodeType": "YulFunctionCall",
																"src": "4546:20:20"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "4537:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4537:5:20"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nativeSrc": "3670:902:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "3700:4:20",
														"nodeType": "YulTypedName",
														"src": "3700:4:20",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "3706:8:20",
														"nodeType": "YulTypedName",
														"src": "3706:8:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "3719:5:20",
														"nodeType": "YulTypedName",
														"src": "3719:5:20",
														"type": ""
													}
												],
												"src": "3670:902:20"
											},
											{
												"body": {
													"nativeSrc": "4645:72:20",
													"nodeType": "YulBlock",
													"src": "4645:72:20",
													"statements": [
														{
															"nativeSrc": "4655:56:20",
															"nodeType": "YulAssignment",
															"src": "4655:56:20",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nativeSrc": "4685:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "4685:4:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "exponent",
																				"nativeSrc": "4695:8:20",
																				"nodeType": "YulIdentifier",
																				"src": "4695:8:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4705:4:20",
																				"nodeType": "YulLiteral",
																				"src": "4705:4:20",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "4691:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4691:3:20"
																		},
																		"nativeSrc": "4691:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4691:19:20"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nativeSrc": "4664:20:20",
																	"nodeType": "YulIdentifier",
																	"src": "4664:20:20"
																},
																"nativeSrc": "4664:47:20",
																"nodeType": "YulFunctionCall",
																"src": "4664:47:20"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nativeSrc": "4655:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4655:5:20"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nativeSrc": "4577:140:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nativeSrc": "4616:4:20",
														"nodeType": "YulTypedName",
														"src": "4616:4:20",
														"type": ""
													},
													{
														"name": "exponent",
														"nativeSrc": "4622:8:20",
														"nodeType": "YulTypedName",
														"src": "4622:8:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nativeSrc": "4635:5:20",
														"nodeType": "YulTypedName",
														"src": "4635:5:20",
														"type": ""
													}
												],
												"src": "4577:140:20"
											},
											{
												"body": {
													"nativeSrc": "4774:116:20",
													"nodeType": "YulBlock",
													"src": "4774:116:20",
													"statements": [
														{
															"nativeSrc": "4784:20:20",
															"nodeType": "YulAssignment",
															"src": "4784:20:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "4799:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "4799:1:20"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "4802:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "4802:1:20"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nativeSrc": "4795:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4795:3:20"
																},
																"nativeSrc": "4795:9:20",
																"nodeType": "YulFunctionCall",
																"src": "4795:9:20"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nativeSrc": "4784:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4784:7:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4862:22:20",
																"nodeType": "YulBlock",
																"src": "4862:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "4864:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "4864:16:20"
																			},
																			"nativeSrc": "4864:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4864:18:20"
																		},
																		"nativeSrc": "4864:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4864:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nativeSrc": "4833:1:20",
																						"nodeType": "YulIdentifier",
																						"src": "4833:1:20"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "4826:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "4826:6:20"
																				},
																				"nativeSrc": "4826:9:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4826:9:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "y",
																						"nativeSrc": "4840:1:20",
																						"nodeType": "YulIdentifier",
																						"src": "4840:1:20"
																					},
																					{
																						"arguments": [
																							{
																								"name": "product",
																								"nativeSrc": "4847:7:20",
																								"nodeType": "YulIdentifier",
																								"src": "4847:7:20"
																							},
																							{
																								"name": "x",
																								"nativeSrc": "4856:1:20",
																								"nodeType": "YulIdentifier",
																								"src": "4856:1:20"
																							}
																						],
																						"functionName": {
																							"name": "div",
																							"nativeSrc": "4843:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "4843:3:20"
																						},
																						"nativeSrc": "4843:15:20",
																						"nodeType": "YulFunctionCall",
																						"src": "4843:15:20"
																					}
																				],
																				"functionName": {
																					"name": "eq",
																					"nativeSrc": "4837:2:20",
																					"nodeType": "YulIdentifier",
																					"src": "4837:2:20"
																				},
																				"nativeSrc": "4837:22:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4837:22:20"
																			}
																		],
																		"functionName": {
																			"name": "or",
																			"nativeSrc": "4823:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "4823:2:20"
																		},
																		"nativeSrc": "4823:37:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4823:37:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4816:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4816:6:20"
																},
																"nativeSrc": "4816:45:20",
																"nodeType": "YulFunctionCall",
																"src": "4816:45:20"
															},
															"nativeSrc": "4813:71:20",
															"nodeType": "YulIf",
															"src": "4813:71:20"
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nativeSrc": "4722:168:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "4753:1:20",
														"nodeType": "YulTypedName",
														"src": "4753:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "4756:1:20",
														"nodeType": "YulTypedName",
														"src": "4756:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nativeSrc": "4762:7:20",
														"nodeType": "YulTypedName",
														"src": "4762:7:20",
														"type": ""
													}
												],
												"src": "4722:168:20"
											},
											{
												"body": {
													"nativeSrc": "5108:276:20",
													"nodeType": "YulBlock",
													"src": "5108:276:20",
													"statements": [
														{
															"nativeSrc": "5118:27:20",
															"nodeType": "YulAssignment",
															"src": "5118:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5130:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "5130:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5141:3:20",
																		"nodeType": "YulLiteral",
																		"src": "5141:3:20",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5126:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5126:3:20"
																},
																"nativeSrc": "5126:19:20",
																"nodeType": "YulFunctionCall",
																"src": "5126:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5118:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "5118:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5161:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "5161:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "5172:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5172:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5154:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5154:6:20"
																},
																"nativeSrc": "5154:25:20",
																"nodeType": "YulFunctionCall",
																"src": "5154:25:20"
															},
															"nativeSrc": "5154:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "5154:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5199:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5199:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5210:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5210:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5195:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5195:3:20"
																		},
																		"nativeSrc": "5195:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5195:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "5215:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5215:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5188:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5188:6:20"
																},
																"nativeSrc": "5188:34:20",
																"nodeType": "YulFunctionCall",
																"src": "5188:34:20"
															},
															"nativeSrc": "5188:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "5188:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5242:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5242:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5253:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5253:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5238:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5238:3:20"
																		},
																		"nativeSrc": "5238:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5238:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "5258:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5258:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5231:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5231:6:20"
																},
																"nativeSrc": "5231:34:20",
																"nodeType": "YulFunctionCall",
																"src": "5231:34:20"
															},
															"nativeSrc": "5231:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "5231:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5285:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5285:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5296:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5296:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5281:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5281:3:20"
																		},
																		"nativeSrc": "5281:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5281:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "5301:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5301:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5274:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5274:6:20"
																},
																"nativeSrc": "5274:34:20",
																"nodeType": "YulFunctionCall",
																"src": "5274:34:20"
															},
															"nativeSrc": "5274:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "5274:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5328:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5328:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5339:3:20",
																				"nodeType": "YulLiteral",
																				"src": "5339:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5324:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5324:3:20"
																		},
																		"nativeSrc": "5324:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5324:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "5349:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5349:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5365:3:20",
																								"nodeType": "YulLiteral",
																								"src": "5365:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5370:1:20",
																								"nodeType": "YulLiteral",
																								"src": "5370:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "5361:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "5361:3:20"
																						},
																						"nativeSrc": "5361:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "5361:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "5374:1:20",
																						"nodeType": "YulLiteral",
																						"src": "5374:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "5357:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "5357:3:20"
																				},
																				"nativeSrc": "5357:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "5357:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "5345:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5345:3:20"
																		},
																		"nativeSrc": "5345:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5345:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5317:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5317:6:20"
																},
																"nativeSrc": "5317:61:20",
																"nodeType": "YulFunctionCall",
																"src": "5317:61:20"
															},
															"nativeSrc": "5317:61:20",
															"nodeType": "YulExpressionStatement",
															"src": "5317:61:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "4895:489:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5045:9:20",
														"nodeType": "YulTypedName",
														"src": "5045:9:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "5056:6:20",
														"nodeType": "YulTypedName",
														"src": "5056:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "5064:6:20",
														"nodeType": "YulTypedName",
														"src": "5064:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "5072:6:20",
														"nodeType": "YulTypedName",
														"src": "5072:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5080:6:20",
														"nodeType": "YulTypedName",
														"src": "5080:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5088:6:20",
														"nodeType": "YulTypedName",
														"src": "5088:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5099:4:20",
														"nodeType": "YulTypedName",
														"src": "5099:4:20",
														"type": ""
													}
												],
												"src": "4895:489:20"
											},
											{
												"body": {
													"nativeSrc": "5510:297:20",
													"nodeType": "YulBlock",
													"src": "5510:297:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5527:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "5527:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5538:2:20",
																		"nodeType": "YulLiteral",
																		"src": "5538:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5520:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5520:6:20"
																},
																"nativeSrc": "5520:21:20",
																"nodeType": "YulFunctionCall",
																"src": "5520:21:20"
															},
															"nativeSrc": "5520:21:20",
															"nodeType": "YulExpressionStatement",
															"src": "5520:21:20"
														},
														{
															"nativeSrc": "5550:27:20",
															"nodeType": "YulVariableDeclaration",
															"src": "5550:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "5570:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5570:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5564:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5564:5:20"
																},
																"nativeSrc": "5564:13:20",
																"nodeType": "YulFunctionCall",
																"src": "5564:13:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "5554:6:20",
																	"nodeType": "YulTypedName",
																	"src": "5554:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5597:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5597:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5608:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5608:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5593:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5593:3:20"
																		},
																		"nativeSrc": "5593:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5593:18:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "5613:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5613:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5586:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5586:6:20"
																},
																"nativeSrc": "5586:34:20",
																"nodeType": "YulFunctionCall",
																"src": "5586:34:20"
															},
															"nativeSrc": "5586:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "5586:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5639:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5639:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5650:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5650:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5635:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5635:3:20"
																		},
																		"nativeSrc": "5635:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5635:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "5659:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5659:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5667:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5667:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5655:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5655:3:20"
																		},
																		"nativeSrc": "5655:15:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5655:15:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "5672:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5672:6:20"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "5629:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5629:5:20"
																},
																"nativeSrc": "5629:50:20",
																"nodeType": "YulFunctionCall",
																"src": "5629:50:20"
															},
															"nativeSrc": "5629:50:20",
															"nodeType": "YulExpressionStatement",
															"src": "5629:50:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nativeSrc": "5703:9:20",
																						"nodeType": "YulIdentifier",
																						"src": "5703:9:20"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "5714:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "5714:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "5699:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "5699:3:20"
																				},
																				"nativeSrc": "5699:22:20",
																				"nodeType": "YulFunctionCall",
																				"src": "5699:22:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5723:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5723:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5695:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5695:3:20"
																		},
																		"nativeSrc": "5695:31:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5695:31:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5728:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5728:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5688:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5688:6:20"
																},
																"nativeSrc": "5688:42:20",
																"nodeType": "YulFunctionCall",
																"src": "5688:42:20"
															},
															"nativeSrc": "5688:42:20",
															"nodeType": "YulExpressionStatement",
															"src": "5688:42:20"
														},
														{
															"nativeSrc": "5739:62:20",
															"nodeType": "YulAssignment",
															"src": "5739:62:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5755:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5755:9:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "5774:6:20",
																								"nodeType": "YulIdentifier",
																								"src": "5774:6:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "5782:2:20",
																								"nodeType": "YulLiteral",
																								"src": "5782:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "5770:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "5770:3:20"
																						},
																						"nativeSrc": "5770:15:20",
																						"nodeType": "YulFunctionCall",
																						"src": "5770:15:20"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "5791:2:20",
																								"nodeType": "YulLiteral",
																								"src": "5791:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "5787:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "5787:3:20"
																						},
																						"nativeSrc": "5787:7:20",
																						"nodeType": "YulFunctionCall",
																						"src": "5787:7:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "5766:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "5766:3:20"
																				},
																				"nativeSrc": "5766:29:20",
																				"nodeType": "YulFunctionCall",
																				"src": "5766:29:20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5751:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5751:3:20"
																		},
																		"nativeSrc": "5751:45:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5751:45:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5798:2:20",
																		"nodeType": "YulLiteral",
																		"src": "5798:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5747:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5747:3:20"
																},
																"nativeSrc": "5747:54:20",
																"nodeType": "YulFunctionCall",
																"src": "5747:54:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5739:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "5739:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "5389:418:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5479:9:20",
														"nodeType": "YulTypedName",
														"src": "5479:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5490:6:20",
														"nodeType": "YulTypedName",
														"src": "5490:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5501:4:20",
														"nodeType": "YulTypedName",
														"src": "5501:4:20",
														"type": ""
													}
												],
												"src": "5389:418:20"
											},
											{
												"body": {
													"nativeSrc": "5906:203:20",
													"nodeType": "YulBlock",
													"src": "5906:203:20",
													"statements": [
														{
															"nativeSrc": "5916:26:20",
															"nodeType": "YulVariableDeclaration",
															"src": "5916:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "array",
																		"nativeSrc": "5936:5:20",
																		"nodeType": "YulIdentifier",
																		"src": "5936:5:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5930:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5930:5:20"
																},
																"nativeSrc": "5930:12:20",
																"nodeType": "YulFunctionCall",
																"src": "5930:12:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "5920:6:20",
																	"nodeType": "YulTypedName",
																	"src": "5920:6:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "5951:32:20",
															"nodeType": "YulAssignment",
															"src": "5951:32:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "array",
																				"nativeSrc": "5970:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "5970:5:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5977:4:20",
																				"nodeType": "YulLiteral",
																				"src": "5977:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5966:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5966:3:20"
																		},
																		"nativeSrc": "5966:16:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5966:16:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "5960:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5960:5:20"
																},
																"nativeSrc": "5960:23:20",
																"nodeType": "YulFunctionCall",
																"src": "5960:23:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "5951:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "5951:5:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6020:83:20",
																"nodeType": "YulBlock",
																"src": "6020:83:20",
																"statements": [
																	{
																		"nativeSrc": "6034:59:20",
																		"nodeType": "YulAssignment",
																		"src": "6034:59:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "value",
																					"nativeSrc": "6047:5:20",
																					"nodeType": "YulIdentifier",
																					"src": "6047:5:20"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "6062:1:20",
																									"nodeType": "YulLiteral",
																									"src": "6062:1:20",
																									"type": "",
																									"value": "3"
																								},
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nativeSrc": "6069:4:20",
																											"nodeType": "YulLiteral",
																											"src": "6069:4:20",
																											"type": "",
																											"value": "0x20"
																										},
																										{
																											"name": "length",
																											"nativeSrc": "6075:6:20",
																											"nodeType": "YulIdentifier",
																											"src": "6075:6:20"
																										}
																									],
																									"functionName": {
																										"name": "sub",
																										"nativeSrc": "6065:3:20",
																										"nodeType": "YulIdentifier",
																										"src": "6065:3:20"
																									},
																									"nativeSrc": "6065:17:20",
																									"nodeType": "YulFunctionCall",
																									"src": "6065:17:20"
																								}
																							],
																							"functionName": {
																								"name": "shl",
																								"nativeSrc": "6058:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "6058:3:20"
																							},
																							"nativeSrc": "6058:25:20",
																							"nodeType": "YulFunctionCall",
																							"src": "6058:25:20"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nativeSrc": "6089:1:20",
																									"nodeType": "YulLiteral",
																									"src": "6089:1:20",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nativeSrc": "6085:3:20",
																								"nodeType": "YulIdentifier",
																								"src": "6085:3:20"
																							},
																							"nativeSrc": "6085:6:20",
																							"nodeType": "YulFunctionCall",
																							"src": "6085:6:20"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "6054:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "6054:3:20"
																					},
																					"nativeSrc": "6054:38:20",
																					"nodeType": "YulFunctionCall",
																					"src": "6054:38:20"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "6043:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "6043:3:20"
																			},
																			"nativeSrc": "6043:50:20",
																			"nodeType": "YulFunctionCall",
																			"src": "6043:50:20"
																		},
																		"variableNames": [
																			{
																				"name": "value",
																				"nativeSrc": "6034:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "6034:5:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "length",
																		"nativeSrc": "5998:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "5998:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6006:4:20",
																		"nodeType": "YulLiteral",
																		"src": "6006:4:20",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "5995:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "5995:2:20"
																},
																"nativeSrc": "5995:16:20",
																"nodeType": "YulFunctionCall",
																"src": "5995:16:20"
															},
															"nativeSrc": "5992:111:20",
															"nodeType": "YulIf",
															"src": "5992:111:20"
														}
													]
												},
												"name": "convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32",
												"nativeSrc": "5812:297:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nativeSrc": "5886:5:20",
														"nodeType": "YulTypedName",
														"src": "5886:5:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "5896:5:20",
														"nodeType": "YulTypedName",
														"src": "5896:5:20",
														"type": ""
													}
												],
												"src": "5812:297:20"
											},
											{
												"body": {
													"nativeSrc": "6162:77:20",
													"nodeType": "YulBlock",
													"src": "6162:77:20",
													"statements": [
														{
															"nativeSrc": "6172:16:20",
															"nodeType": "YulAssignment",
															"src": "6172:16:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6183:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6183:1:20"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "6186:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6186:1:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6179:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6179:3:20"
																},
																"nativeSrc": "6179:9:20",
																"nodeType": "YulFunctionCall",
																"src": "6179:9:20"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "6172:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6172:3:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "6211:22:20",
																"nodeType": "YulBlock",
																"src": "6211:22:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nativeSrc": "6213:16:20",
																				"nodeType": "YulIdentifier",
																				"src": "6213:16:20"
																			},
																			"nativeSrc": "6213:18:20",
																			"nodeType": "YulFunctionCall",
																			"src": "6213:18:20"
																		},
																		"nativeSrc": "6213:18:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "6213:18:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "6203:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "6203:1:20"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "6206:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "6206:3:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "6200:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "6200:2:20"
																},
																"nativeSrc": "6200:10:20",
																"nodeType": "YulFunctionCall",
																"src": "6200:10:20"
															},
															"nativeSrc": "6197:36:20",
															"nodeType": "YulIf",
															"src": "6197:36:20"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "6114:125:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "6145:1:20",
														"nodeType": "YulTypedName",
														"src": "6145:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "6148:1:20",
														"nodeType": "YulTypedName",
														"src": "6148:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "6154:3:20",
														"nodeType": "YulTypedName",
														"src": "6154:3:20",
														"type": ""
													}
												],
												"src": "6114:125:20"
											},
											{
												"body": {
													"nativeSrc": "6401:188:20",
													"nodeType": "YulBlock",
													"src": "6401:188:20",
													"statements": [
														{
															"nativeSrc": "6411:26:20",
															"nodeType": "YulAssignment",
															"src": "6411:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6423:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6423:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6434:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6434:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6419:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6419:3:20"
																},
																"nativeSrc": "6419:18:20",
																"nodeType": "YulFunctionCall",
																"src": "6419:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6411:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "6411:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6453:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6453:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6468:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6468:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6484:3:20",
																								"nodeType": "YulLiteral",
																								"src": "6484:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6489:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6489:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6480:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6480:3:20"
																						},
																						"nativeSrc": "6480:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6480:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6493:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6493:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6476:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6476:3:20"
																				},
																				"nativeSrc": "6476:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6476:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6464:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6464:3:20"
																		},
																		"nativeSrc": "6464:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6464:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6446:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6446:6:20"
																},
																"nativeSrc": "6446:51:20",
																"nodeType": "YulFunctionCall",
																"src": "6446:51:20"
															},
															"nativeSrc": "6446:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "6446:51:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6517:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6517:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6528:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6528:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6513:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6513:3:20"
																		},
																		"nativeSrc": "6513:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6513:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "6533:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6533:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6506:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6506:6:20"
																},
																"nativeSrc": "6506:34:20",
																"nodeType": "YulFunctionCall",
																"src": "6506:34:20"
															},
															"nativeSrc": "6506:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "6506:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6560:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6560:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6571:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6571:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6556:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6556:3:20"
																		},
																		"nativeSrc": "6556:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6556:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "6576:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6576:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6549:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6549:6:20"
																},
																"nativeSrc": "6549:34:20",
																"nodeType": "YulFunctionCall",
																"src": "6549:34:20"
															},
															"nativeSrc": "6549:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "6549:34:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "6244:345:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6354:9:20",
														"nodeType": "YulTypedName",
														"src": "6354:9:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "6365:6:20",
														"nodeType": "YulTypedName",
														"src": "6365:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6373:6:20",
														"nodeType": "YulTypedName",
														"src": "6373:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6381:6:20",
														"nodeType": "YulTypedName",
														"src": "6381:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6392:4:20",
														"nodeType": "YulTypedName",
														"src": "6392:4:20",
														"type": ""
													}
												],
												"src": "6244:345:20"
											},
											{
												"body": {
													"nativeSrc": "6695:76:20",
													"nodeType": "YulBlock",
													"src": "6695:76:20",
													"statements": [
														{
															"nativeSrc": "6705:26:20",
															"nodeType": "YulAssignment",
															"src": "6705:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6717:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6717:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6728:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6728:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6713:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6713:3:20"
																},
																"nativeSrc": "6713:18:20",
																"nodeType": "YulFunctionCall",
																"src": "6713:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6705:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "6705:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6747:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6747:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "6758:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6758:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6740:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6740:6:20"
																},
																"nativeSrc": "6740:25:20",
																"nodeType": "YulFunctionCall",
																"src": "6740:25:20"
															},
															"nativeSrc": "6740:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "6740:25:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "6594:177:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6664:9:20",
														"nodeType": "YulTypedName",
														"src": "6664:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6675:6:20",
														"nodeType": "YulTypedName",
														"src": "6675:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6686:4:20",
														"nodeType": "YulTypedName",
														"src": "6686:4:20",
														"type": ""
													}
												],
												"src": "6594:177:20"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _1 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _1) { start := add(start, 1) }\n            { sstore(start, 0) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_exp_helper(_base, exponent, max) -> power, base\n    {\n        power := 1\n        base := _base\n        for { } gt(exponent, 1) { }\n        {\n            if gt(base, div(max, base)) { panic_error_0x11() }\n            if and(exponent, 1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            let _1 := 0\n            _1 := 0\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            let _2 := 0\n            _2 := 0\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent, not(0))\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        product := mul(x, y)\n        if iszero(or(iszero(x), eq(y, div(product, x)))) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        mcopy(add(headStart, 64), add(value0, 32), length)\n        mstore(add(add(headStart, length), 64), 0)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function convert_bytes_to_fixedbytes_from_t_bytes_memory_ptr_to_t_bytes32(array) -> value\n    {\n        let length := mload(array)\n        value := mload(add(array, 0x20))\n        if lt(length, 0x20)\n        {\n            value := and(value, shl(shl(3, sub(0x20, length)), not(0)))\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n}",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH2 0x160 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x17DD CODESIZE SUB DUP1 PUSH2 0x17DD DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH2 0x2F SWAP2 PUSH2 0x412 JUMP JUMPDEST DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD PUSH17 0x1110511116481510551148119492515391 PUSH1 0x7A SHL DUP2 MSTORE POP DUP1 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x31 PUSH1 0xF8 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x11 DUP2 MSTORE PUSH1 0x20 ADD PUSH17 0x1110511116481510551148119492515391 PUSH1 0x7A SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xA DUP2 MSTORE PUSH1 0x20 ADD PUSH10 0x44414444592054415445 PUSH1 0xB0 SHL DUP2 MSTORE POP DUP2 PUSH1 0x3 SWAP1 DUP2 PUSH2 0xD1 SWAP2 SWAP1 PUSH2 0x4D7 JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0xDE DUP3 DUP3 PUSH2 0x4D7 JUMP JUMPDEST POP PUSH2 0xEE SWAP2 POP DUP4 SWAP1 POP PUSH1 0x5 PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0x120 MSTORE PUSH2 0xFD DUP2 PUSH1 0x6 PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0x140 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 KECCAK256 PUSH1 0xE0 MSTORE DUP2 MLOAD SWAP1 DUP3 ADD KECCAK256 PUSH2 0x100 MSTORE CHAINID PUSH1 0xA0 MSTORE PUSH2 0x189 PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x80 MSTORE POP POP ADDRESS PUSH1 0xC0 MSTORE POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x1C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1CA DUP2 PUSH2 0x226 JUMP JUMPDEST POP PUSH2 0x1EE CALLER PUSH2 0x1DB PUSH1 0x12 PUSH1 0xA PUSH2 0x688 JUMP JUMPDEST PUSH2 0x1E9 SWAP1 PUSH4 0x3B9ACA00 PUSH2 0x696 JUMP JUMPDEST PUSH2 0x277 JUMP JUMPDEST POP PUSH2 0x718 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP4 MLOAD LT ISZERO PUSH2 0x20F JUMPI PUSH2 0x208 DUP4 PUSH2 0x2AF JUMP JUMPDEST SWAP1 POP PUSH2 0x220 JUMP JUMPDEST DUP2 PUSH2 0x21A DUP5 DUP3 PUSH2 0x4D7 JUMP JUMPDEST POP PUSH1 0xFF SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x2A0 JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x1B8 JUMP JUMPDEST PUSH2 0x2AB PUSH0 DUP4 DUP4 PUSH2 0x2EC JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 DUP3 SWAP1 POP PUSH1 0x1F DUP2 MLOAD GT ISZERO PUSH2 0x2D9 JUMPI DUP3 PUSH1 0x40 MLOAD PUSH4 0x305A27A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1B8 SWAP2 SWAP1 PUSH2 0x6AD JUMP JUMPDEST DUP1 MLOAD PUSH2 0x2E4 DUP3 PUSH2 0x6E2 JUMP JUMPDEST OR SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x316 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x30B SWAP2 SWAP1 PUSH2 0x705 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x386 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x368 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x1B8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x3A2 JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0x3C0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0x405 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x422 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x438 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x467 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x485 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x4D2 JUMPI DUP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x4B0 JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP5 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4CF JUMPI PUSH0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x4BC JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH2 0x4F0 JUMPI PUSH2 0x4F0 PUSH2 0x43F JUMP JUMPDEST PUSH2 0x504 DUP2 PUSH2 0x4FE DUP5 SLOAD PUSH2 0x453 JUMP JUMPDEST DUP5 PUSH2 0x48B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x1F DUP3 GT PUSH1 0x1 DUP2 EQ PUSH2 0x536 JUMPI PUSH0 DUP4 ISZERO PUSH2 0x51F JUMPI POP DUP5 DUP3 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP6 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP5 SWAP1 SHL OR DUP5 SSTORE PUSH2 0x4CF JUMP JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP6 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x565 JUMPI DUP8 DUP6 ADD MLOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x545 JUMP JUMPDEST POP DUP5 DUP3 LT ISZERO PUSH2 0x582 JUMPI DUP7 DUP5 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP8 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x1 DUP2 JUMPDEST PUSH1 0x1 DUP5 GT ISZERO PUSH2 0x5E0 JUMPI DUP1 DUP6 DIV DUP2 GT ISZERO PUSH2 0x5C4 JUMPI PUSH2 0x5C4 PUSH2 0x591 JUMP JUMPDEST PUSH1 0x1 DUP5 AND ISZERO PUSH2 0x5D2 JUMPI SWAP1 DUP2 MUL SWAP1 JUMPDEST PUSH1 0x1 SWAP4 SWAP1 SWAP4 SHR SWAP3 DUP1 MUL PUSH2 0x5A9 JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH2 0x5F6 JUMPI POP PUSH1 0x1 PUSH2 0x220 JUMP JUMPDEST DUP2 PUSH2 0x602 JUMPI POP PUSH0 PUSH2 0x220 JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0x618 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0x622 JUMPI PUSH2 0x63E JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x220 JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0x633 JUMPI PUSH2 0x633 PUSH2 0x591 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x220 JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0x661 JUMPI POP DUP2 DUP2 EXP PUSH2 0x220 JUMP JUMPDEST PUSH2 0x66D PUSH0 NOT DUP5 DUP5 PUSH2 0x5A5 JUMP JUMPDEST DUP1 PUSH0 NOT DIV DUP3 GT ISZERO PUSH2 0x680 JUMPI PUSH2 0x680 PUSH2 0x591 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x438 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0x5E8 JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 0x220 JUMPI PUSH2 0x220 PUSH2 0x591 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE DUP1 PUSH1 0x20 DUP6 ADD PUSH1 0x40 DUP6 ADD MCOPY PUSH0 PUSH1 0x40 DUP3 DUP6 ADD ADD MSTORE PUSH1 0x40 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP5 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x20 DUP1 DUP4 ADD MLOAD SWAP2 SWAP1 DUP2 LT ISZERO PUSH2 0x485 JUMPI PUSH0 NOT PUSH1 0x20 SWAP2 SWAP1 SWAP2 SUB PUSH1 0x3 SHL SHL AND SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x220 JUMPI PUSH2 0x220 PUSH2 0x591 JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH1 0xE0 MLOAD PUSH2 0x100 MLOAD PUSH2 0x120 MLOAD PUSH2 0x140 MLOAD PUSH2 0x1074 PUSH2 0x769 PUSH0 CODECOPY PUSH0 PUSH2 0x8A8 ADD MSTORE PUSH0 PUSH2 0x87B ADD MSTORE PUSH0 PUSH2 0x772 ADD MSTORE PUSH0 PUSH2 0x74A ADD MSTORE PUSH0 PUSH2 0x6A5 ADD MSTORE PUSH0 PUSH2 0x6CF ADD MSTORE PUSH0 PUSH2 0x6F9 ADD MSTORE PUSH2 0x1074 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x111 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79CC6790 GT PUSH2 0x9E JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x6E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x24E JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x299 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x218 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xE4 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x17B JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1CF JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x168 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x11D PUSH2 0x2AC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x146 PUSH2 0x141 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0D JUMP JUMPDEST PUSH2 0x33C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12A JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12A JUMP JUMPDEST PUSH2 0x146 PUSH2 0x176 CALLDATASIZE PUSH1 0x4 PUSH2 0xE35 JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12A JUMP JUMPDEST PUSH2 0x15A PUSH2 0x378 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x1A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xE6F JUMP JUMPDEST PUSH2 0x386 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15A PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0xE86 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x393 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0D JUMP JUMPDEST PUSH2 0x3A6 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1F8 CALLDATASIZE PUSH1 0x4 PUSH2 0xE86 JUMP JUMPDEST PUSH2 0x3BF JUMP JUMPDEST PUSH2 0x205 PUSH2 0x3DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12A SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE9F JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12A JUMP JUMPDEST PUSH2 0x11D PUSH2 0x41E JUMP JUMPDEST PUSH2 0x146 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0D JUMP JUMPDEST PUSH2 0x42D JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x25C CALLDATASIZE PUSH1 0x4 PUSH2 0xF35 JUMP JUMPDEST PUSH2 0x43A JUMP JUMPDEST PUSH2 0x15A PUSH2 0x26F CALLDATASIZE PUSH1 0x4 PUSH2 0xFA2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x2A7 CALLDATASIZE PUSH1 0x4 PUSH2 0xE86 JUMP JUMPDEST PUSH2 0x575 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2BB SWAP1 PUSH2 0xFD3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2E7 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x332 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x309 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x332 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x315 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x349 DUP2 DUP6 DUP6 PUSH2 0x5AF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x362 DUP6 DUP3 DUP6 PUSH2 0x5C1 JUMP JUMPDEST PUSH2 0x36D DUP6 DUP6 DUP6 PUSH2 0x63C JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x381 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x390 CALLER DUP3 PUSH2 0x7C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x39B PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x3A4 PUSH0 PUSH2 0x823 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3B1 DUP3 CALLER DUP4 PUSH2 0x5C1 JUMP JUMPDEST PUSH2 0x3BB DUP3 DUP3 PUSH2 0x7C2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x34F JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x3ED PUSH2 0x874 JUMP JUMPDEST PUSH2 0x3F5 PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x2BB SWAP1 PUSH2 0xFD3 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x349 DUP2 DUP6 DUP6 PUSH2 0x63C JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x463 JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x4AE DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x508 DUP3 PUSH2 0x8CE JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x517 DUP3 DUP8 DUP8 DUP8 PUSH2 0x8FA JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x45A JUMP JUMPDEST PUSH2 0x569 DUP11 DUP11 DUP11 PUSH2 0x5AF JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x57D PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH2 0x390 DUP2 PUSH2 0x823 JUMP JUMPDEST PUSH2 0x5BC DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x926 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x636 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x628 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x45A JUMP JUMPDEST PUSH2 0x636 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x926 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x665 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x68E JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH2 0x5BC DUP4 DUP4 DUP4 PUSH2 0x9F8 JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x6F1 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x71B JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x381 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH2 0x3BB DUP3 PUSH0 DUP4 PUSH2 0x9F8 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x381 PUSH32 0x0 PUSH1 0x5 PUSH2 0xB1E JUMP JUMPDEST PUSH1 0x60 PUSH2 0x381 PUSH32 0x0 PUSH1 0x6 PUSH2 0xB1E JUMP JUMPDEST PUSH0 PUSH2 0x34F PUSH2 0x8DA PUSH2 0x699 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x90A DUP9 DUP9 DUP9 DUP9 PUSH2 0xBC7 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x91A DUP3 DUP3 PUSH2 0xC8F JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x94F JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x978 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x636 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x9EA SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xA22 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xA17 SWAP2 SWAP1 PUSH2 0x100B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xA92 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xA74 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAAE JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xACC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xB11 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xB38 JUMPI PUSH2 0xB31 DUP4 PUSH2 0xD47 JUMP JUMPDEST SWAP1 POP PUSH2 0x34F JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xB44 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB70 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBBB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB92 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBBB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB9E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x34F JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xC00 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xC85 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC51 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC7C JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xC85 JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCA2 JUMPI PUSH2 0xCA2 PUSH2 0x102A JUMP JUMPDEST SUB PUSH2 0xCAB JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCBF JUMPI PUSH2 0xCBF PUSH2 0x102A JUMP JUMPDEST SUB PUSH2 0xCDD JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCF1 JUMPI PUSH2 0xCF1 PUSH2 0x102A JUMP JUMPDEST SUB PUSH2 0xD12 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD26 JUMPI PUSH2 0xD26 PUSH2 0x102A JUMP JUMPDEST SUB PUSH2 0x3BB JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xD53 DUP4 PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x34F JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xDEB PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDAB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE1E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE27 DUP4 PUSH2 0xDF2 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE47 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE50 DUP5 PUSH2 0xDF2 JUMP JUMPDEST SWAP3 POP PUSH2 0xE5E PUSH1 0x20 DUP6 ADD PUSH2 0xDF2 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE7F JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE96 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xDEB DUP3 PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xEBD PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0xDAB JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xECF DUP2 DUP10 PUSH2 0xDAB JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF24 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xF06 JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xF4B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF54 DUP9 PUSH2 0xDF2 JUMP JUMPDEST SWAP7 POP PUSH2 0xF62 PUSH1 0x20 DUP10 ADD PUSH2 0xDF2 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xF85 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFB3 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFBC DUP4 PUSH2 0xDF2 JUMP JUMPDEST SWAP2 POP PUSH2 0xFCA PUSH1 0x20 DUP5 ADD PUSH2 0xDF2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xFE7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1005 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x34F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x35F0C322AC 0x2D CALLDATACOPY LOG1 REVERT SWAP9 CALLER 0xCD PUSH2 0x22A3 0xB3 DUP7 0xD3 0xE3 0xE6 CHAINID 0x27 0xF9 PUSH22 0xDDF49AFA2AA46B64736F6C634300081A003300000000 ",
							"sourceMap": "398:310:19:-:0;;;476:229;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;619:12;1574:52:6;;;;;;;;;;;;;-1:-1:-1;;;1574:52:6;;;1613:4;3328:431:15;;;;;;;;;;;;;-1:-1:-1;;;3328:431:15;;;1896:113:3;;;;;;;;;;;;;-1:-1:-1;;;1896:113:3;;;;;;;;;;;;;;;;-1:-1:-1;;;1896:113:3;;;1970:5;1962;:13;;;;;;:::i;:::-;-1:-1:-1;1985:7:3;:17;1995:7;1985;:17;:::i;:::-;-1:-1:-1;3401:45:15;;-1:-1:-1;3401:4:15;;-1:-1:-1;3432:13:15;3401:30;:45::i;:::-;3393:53;;3467:51;:7;3501:16;3467:33;:51::i;:::-;3456:62;;3542:22;;;;;;;;;;3528:36;;3591:25;;;;;;3574:42;;3644:13;3627:30;;3692:23;4226:11;;4239:14;;4204:80;;;2079:95;4204:80;;;5154:25:20;5195:18;;;5188:34;;;;5238:18;;;5231:34;4255:13:15;5281:18:20;;;5274:34;4278:4:15;5324:19:20;;;5317:61;4168:7:15;;5126:19:20;;4204:80:15;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;3692:23;3667:48;;-1:-1:-1;;3747:4:15;3725:27;;-1:-1:-1;;;;;;1273:26:0;;1269:95;;1322:31;;-1:-1:-1;;;1322:31:0;;1350:1;1322:31;;;3096:51:20;3069:18;;1322:31:0;;;;;;;;1269:95;1373:32;1392:12;1373:18;:32::i;:::-;-1:-1:-1;649:48:19::3;655:10;680:16;3075:2:3::0;680::19::3;:16;:::i;:::-;667:29;::::0;:10:::3;:29;:::i;:::-;649:5;:48::i;:::-;476:229:::0;398:310;;2914:340:11;3010:11;3059:2;3043:5;3037:19;:24;3033:215;;;3084:20;3098:5;3084:13;:20::i;:::-;3077:27;;;;3033:215;3161:5;3135:46;3176:5;3161;3135:46;:::i;:::-;-1:-1:-1;1390:66:11;;-1:-1:-1;3033:215:11;2914:340;;;;:::o;2912:187:0:-;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;7721:208:3:-;-1:-1:-1;;;;;7791:21:3;;7787:91;;7835:32;;-1:-1:-1;;;7835:32:3;;7864:1;7835:32;;;3096:51:20;3069:18;;7835:32:3;2950:203:20;7787:91:3;7887:35;7903:1;7907:7;7916:5;7887:7;:35::i;:::-;7721:208;;:::o;1708:286:11:-;1773:11;1796:17;1822:3;1796:30;;1854:2;1840:4;:11;:16;1836:72;;;1893:3;1879:18;;-1:-1:-1;;;1879:18:11;;;;;;;;:::i;1836:72::-;1974:11;;1957:13;1974:4;1957:13;:::i;:::-;1949:36;;1708:286;-1:-1:-1;;;1708:286:11:o;6271:1107:3:-;-1:-1:-1;;;;;6360:18:3;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:3;;-1:-1:-1;6356:540:3;;-1:-1:-1;;;;;6570:15:3;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:3;;-1:-1:-1;;;;;6464:32:20;;6649:50:3;;;6446:51:20;6513:18;;;6506:34;;;6556:18;;;6549:34;;;6419:18;;6649:50:3;6244:345:20;6599:115:3;-1:-1:-1;;;;;6834:15:3;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:3;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:3;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:3;7355:4;-1:-1:-1;;;;;7346:25:3;;7365:5;7346:25;;;;6740::20;;6728:2;6713:18;;6594:177;7346:25:3;;;;;;;;6271:1107;;;:::o;14:290:20:-;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;179:16;;-1:-1:-1;;;;;224:31:20;;214:42;;204:70;;270:1;267;260:12;204:70;293:5;14:290;-1:-1:-1;;;14:290:20:o;309:127::-;370:10;365:3;361:20;358:1;351:31;401:4;398:1;391:15;425:4;422:1;415:15;441:380;520:1;516:12;;;;563;;;584:61;;638:4;630:6;626:17;616:27;;584:61;691:2;683:6;680:14;660:18;657:38;654:161;;737:10;732:3;728:20;725:1;718:31;772:4;769:1;762:15;800:4;797:1;790:15;654:161;;441:380;;;:::o;952:518::-;1054:2;1049:3;1046:11;1043:421;;;1090:5;1087:1;1080:16;1134:4;1131:1;1121:18;1204:2;1192:10;1188:19;1185:1;1181:27;1175:4;1171:38;1240:4;1228:10;1225:20;1222:47;;;-1:-1:-1;1263:4:20;1222:47;1318:2;1313:3;1309:12;1306:1;1302:20;1296:4;1292:31;1282:41;;1373:81;1391:2;1384:5;1381:13;1373:81;;;1450:1;1436:16;;1417:1;1406:13;1373:81;;;1377:3;;1043:421;952:518;;;:::o;1646:1299::-;1766:10;;-1:-1:-1;;;;;1788:30:20;;1785:56;;;1821:18;;:::i;:::-;1850:97;1940:6;1900:38;1932:4;1926:11;1900:38;:::i;:::-;1894:4;1850:97;:::i;:::-;1996:4;2027:2;2016:14;;2044:1;2039:649;;;;2732:1;2749:6;2746:89;;;-1:-1:-1;2801:19:20;;;2795:26;2746:89;-1:-1:-1;;1603:1:20;1599:11;;;1595:24;1591:29;1581:40;1627:1;1623:11;;;1578:57;2848:81;;2009:930;;2039:649;899:1;892:14;;;936:4;923:18;;-1:-1:-1;;2075:20:20;;;2193:222;2207:7;2204:1;2201:14;2193:222;;;2289:19;;;2283:26;2268:42;;2396:4;2381:20;;;;2349:1;2337:14;;;;2223:12;2193:222;;;2197:3;2443:6;2434:7;2431:19;2428:201;;;2504:19;;;2498:26;-1:-1:-1;;2587:1:20;2583:14;;;2599:3;2579:24;2575:37;2571:42;2556:58;2541:74;;2428:201;-1:-1:-1;;;;2675:1:20;2659:14;;;2655:22;2642:36;;-1:-1:-1;1646:1299:20:o;3158:127::-;3219:10;3214:3;3210:20;3207:1;3200:31;3250:4;3247:1;3240:15;3274:4;3271:1;3264:15;3290:375;3378:1;3396:5;3410:249;3431:1;3421:8;3418:15;3410:249;;;3481:4;3476:3;3472:14;3466:4;3463:24;3460:50;;;3490:18;;:::i;:::-;3540:1;3530:8;3526:16;3523:49;;;3554:16;;;;3523:49;3637:1;3633:16;;;;;3593:15;;3410:249;;;3290:375;;;;;;:::o;3670:902::-;3719:5;3749:8;3739:80;;-1:-1:-1;3790:1:20;3804:5;;3739:80;3838:4;3828:76;;-1:-1:-1;3875:1:20;3889:5;;3828:76;3920:4;3938:1;3933:59;;;;4006:1;4001:174;;;;3913:262;;3933:59;3963:1;3954:10;;3977:5;;;4001:174;4038:3;4028:8;4025:17;4022:43;;;4045:18;;:::i;:::-;-1:-1:-1;;4101:1:20;4087:16;;4160:5;;3913:262;;4259:2;4249:8;4246:16;4240:3;4234:4;4231:13;4227:36;4221:2;4211:8;4208:16;4203:2;4197:4;4194:12;4190:35;4187:77;4184:203;;;-1:-1:-1;4296:19:20;;;4372:5;;4184:203;4419:42;-1:-1:-1;;4444:8:20;4438:4;4419:42;:::i;:::-;4497:6;4493:1;4489:6;4485:19;4476:7;4473:32;4470:58;;;4508:18;;:::i;:::-;4546:20;;3670:902;-1:-1:-1;;;3670:902:20:o;4577:140::-;4635:5;4664:47;4705:4;4695:8;4691:19;4685:4;4664:47;:::i;4722:168::-;4795:9;;;4826;;4843:15;;;4837:22;;4823:37;4813:71;;4864:18;;:::i;5389:418::-;5538:2;5527:9;5520:21;5501:4;5570:6;5564:13;5613:6;5608:2;5597:9;5593:18;5586:34;5672:6;5667:2;5659:6;5655:15;5650:2;5639:9;5635:18;5629:50;5728:1;5723:2;5714:6;5703:9;5699:22;5695:31;5688:42;5798:2;5791;5787:7;5782:2;5774:6;5770:15;5766:29;5755:9;5751:45;5747:54;5739:62;;;5389:418;;;;:::o;5812:297::-;5930:12;;5977:4;5966:16;;;5960:23;;5930:12;5995:16;;5992:111;;;-1:-1:-1;;6069:4:20;6065:17;;;;6062:1;6058:25;6054:38;6043:50;;5812:297;-1:-1:-1;5812:297:20:o;6114:125::-;6179:9;;;6200:10;;;6197:36;;;6213:18;;:::i;6594:177::-;398:310:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@DOMAIN_SEPARATOR_1101": {
									"entryPoint": 888,
									"id": 1101,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Name_2406": {
									"entryPoint": 2164,
									"id": 2406,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_EIP712Version_2418": {
									"entryPoint": 2209,
									"id": 2418,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_approve_715": {
									"entryPoint": 1455,
									"id": 715,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_775": {
									"entryPoint": 2342,
									"id": 775,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_buildDomainSeparator_2336": {
									"entryPoint": null,
									"id": 2336,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_burn_697": {
									"entryPoint": 1986,
									"id": 697,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_checkOwner_84": {
									"entryPoint": 2038,
									"id": 84,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_domainSeparatorV4_2315": {
									"entryPoint": 1689,
									"id": 2315,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_hashTypedDataV4_2352": {
									"entryPoint": 2254,
									"id": 2352,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_msgSender_1176": {
									"entryPoint": null,
									"id": 1176,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_823": {
									"entryPoint": 1473,
									"id": 823,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_throwError_2191": {
									"entryPoint": 3215,
									"id": 2191,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_146": {
									"entryPoint": 2083,
									"id": 146,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_transfer_554": {
									"entryPoint": 1596,
									"id": 554,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_update_631": {
									"entryPoint": 2552,
									"id": 631,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_useNonce_1236": {
									"entryPoint": null,
									"id": 1236,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@allowance_451": {
									"entryPoint": null,
									"id": 451,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_475": {
									"entryPoint": 828,
									"id": 475,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_410": {
									"entryPoint": null,
									"id": 410,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@burnFrom_947": {
									"entryPoint": 934,
									"id": 947,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@burn_926": {
									"entryPoint": 902,
									"id": 926,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@byteLength_1380": {
									"entryPoint": 3460,
									"id": 1380,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_388": {
									"entryPoint": null,
									"id": 388,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@eip712Domain_2394": {
									"entryPoint": 988,
									"id": 2394,
									"parameterSlots": 0,
									"returnSlots": 7
								},
								"@name_370": {
									"entryPoint": 684,
									"id": 370,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@nonces_1091": {
									"entryPoint": 959,
									"id": 1091,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@nonces_1221": {
									"entryPoint": null,
									"id": 1221,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_67": {
									"entryPoint": null,
									"id": 67,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@permit_1074": {
									"entryPoint": 1082,
									"id": 1074,
									"parameterSlots": 7,
									"returnSlots": 0
								},
								"@recover_2142": {
									"entryPoint": 2298,
									"id": 2142,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"@renounceOwnership_98": {
									"entryPoint": 915,
									"id": 98,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@symbol_379": {
									"entryPoint": 1054,
									"id": 379,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toStringWithFallback_1447": {
									"entryPoint": 2846,
									"id": 1447,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@toString_1348": {
									"entryPoint": 3399,
									"id": 1348,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@toTypedDataHash_2492": {
									"entryPoint": null,
									"id": 2492,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@totalSupply_397": {
									"entryPoint": null,
									"id": 397,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_507": {
									"entryPoint": 853,
									"id": 507,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transferOwnership_126": {
									"entryPoint": 1397,
									"id": 126,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@transfer_434": {
									"entryPoint": 1069,
									"id": 434,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@tryRecover_2106": {
									"entryPoint": 3015,
									"id": 2106,
									"parameterSlots": 4,
									"returnSlots": 3
								},
								"abi_decode_address": {
									"entryPoint": 3570,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3718,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 4002,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 3637,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32": {
									"entryPoint": 3893,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 7
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3597,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3695,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 3499,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 3743,
									"id": null,
									"parameterSlots": 8,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 7,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 6,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3545,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 4107,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 4051,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x21": {
									"entryPoint": 4138,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nativeSrc": "0:8203:20",
										"nodeType": "YulBlock",
										"src": "0:8203:20",
										"statements": [
											{
												"nativeSrc": "6:3:20",
												"nodeType": "YulBlock",
												"src": "6:3:20",
												"statements": []
											},
											{
												"body": {
													"nativeSrc": "64:239:20",
													"nodeType": "YulBlock",
													"src": "64:239:20",
													"statements": [
														{
															"nativeSrc": "74:26:20",
															"nodeType": "YulVariableDeclaration",
															"src": "74:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nativeSrc": "94:5:20",
																		"nodeType": "YulIdentifier",
																		"src": "94:5:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "88:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "88:5:20"
																},
																"nativeSrc": "88:12:20",
																"nodeType": "YulFunctionCall",
																"src": "88:12:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "78:6:20",
																	"nodeType": "YulTypedName",
																	"src": "78:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nativeSrc": "116:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "116:3:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "121:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "121:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "109:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "109:6:20"
																},
																"nativeSrc": "109:19:20",
																"nodeType": "YulFunctionCall",
																"src": "109:19:20"
															},
															"nativeSrc": "109:19:20",
															"nodeType": "YulExpressionStatement",
															"src": "109:19:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nativeSrc": "147:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "147:3:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "152:4:20",
																				"nodeType": "YulLiteral",
																				"src": "152:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "143:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "143:3:20"
																		},
																		"nativeSrc": "143:14:20",
																		"nodeType": "YulFunctionCall",
																		"src": "143:14:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "163:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "163:5:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "170:4:20",
																				"nodeType": "YulLiteral",
																				"src": "170:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "159:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "159:3:20"
																		},
																		"nativeSrc": "159:16:20",
																		"nodeType": "YulFunctionCall",
																		"src": "159:16:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "177:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "177:6:20"
																	}
																],
																"functionName": {
																	"name": "mcopy",
																	"nativeSrc": "137:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "137:5:20"
																},
																"nativeSrc": "137:47:20",
																"nodeType": "YulFunctionCall",
																"src": "137:47:20"
															},
															"nativeSrc": "137:47:20",
															"nodeType": "YulExpressionStatement",
															"src": "137:47:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "pos",
																						"nativeSrc": "208:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "208:3:20"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "213:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "213:6:20"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "204:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "204:3:20"
																				},
																				"nativeSrc": "204:16:20",
																				"nodeType": "YulFunctionCall",
																				"src": "204:16:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "222:4:20",
																				"nodeType": "YulLiteral",
																				"src": "222:4:20",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "200:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "200:3:20"
																		},
																		"nativeSrc": "200:27:20",
																		"nodeType": "YulFunctionCall",
																		"src": "200:27:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "229:1:20",
																		"nodeType": "YulLiteral",
																		"src": "229:1:20",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "193:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "193:6:20"
																},
																"nativeSrc": "193:38:20",
																"nodeType": "YulFunctionCall",
																"src": "193:38:20"
															},
															"nativeSrc": "193:38:20",
															"nodeType": "YulExpressionStatement",
															"src": "193:38:20"
														},
														{
															"nativeSrc": "240:57:20",
															"nodeType": "YulAssignment",
															"src": "240:57:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nativeSrc": "255:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "255:3:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nativeSrc": "268:6:20",
																								"nodeType": "YulIdentifier",
																								"src": "268:6:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "276:2:20",
																								"nodeType": "YulLiteral",
																								"src": "276:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nativeSrc": "264:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "264:3:20"
																						},
																						"nativeSrc": "264:15:20",
																						"nodeType": "YulFunctionCall",
																						"src": "264:15:20"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "285:2:20",
																								"nodeType": "YulLiteral",
																								"src": "285:2:20",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nativeSrc": "281:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "281:3:20"
																						},
																						"nativeSrc": "281:7:20",
																						"nodeType": "YulFunctionCall",
																						"src": "281:7:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "260:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "260:3:20"
																				},
																				"nativeSrc": "260:29:20",
																				"nodeType": "YulFunctionCall",
																				"src": "260:29:20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "251:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "251:3:20"
																		},
																		"nativeSrc": "251:39:20",
																		"nodeType": "YulFunctionCall",
																		"src": "251:39:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "292:4:20",
																		"nodeType": "YulLiteral",
																		"src": "292:4:20",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "247:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "247:3:20"
																},
																"nativeSrc": "247:50:20",
																"nodeType": "YulFunctionCall",
																"src": "247:50:20"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nativeSrc": "240:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "240:3:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nativeSrc": "14:289:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nativeSrc": "41:5:20",
														"nodeType": "YulTypedName",
														"src": "41:5:20",
														"type": ""
													},
													{
														"name": "pos",
														"nativeSrc": "48:3:20",
														"nodeType": "YulTypedName",
														"src": "48:3:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nativeSrc": "56:3:20",
														"nodeType": "YulTypedName",
														"src": "56:3:20",
														"type": ""
													}
												],
												"src": "14:289:20"
											},
											{
												"body": {
													"nativeSrc": "429:99:20",
													"nodeType": "YulBlock",
													"src": "429:99:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "446:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "446:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "457:2:20",
																		"nodeType": "YulLiteral",
																		"src": "457:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "439:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "439:6:20"
																},
																"nativeSrc": "439:21:20",
																"nodeType": "YulFunctionCall",
																"src": "439:21:20"
															},
															"nativeSrc": "439:21:20",
															"nodeType": "YulExpressionStatement",
															"src": "439:21:20"
														},
														{
															"nativeSrc": "469:53:20",
															"nodeType": "YulAssignment",
															"src": "469:53:20",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nativeSrc": "495:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "495:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "507:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "507:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "518:2:20",
																				"nodeType": "YulLiteral",
																				"src": "518:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "503:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "503:3:20"
																		},
																		"nativeSrc": "503:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "503:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "477:17:20",
																	"nodeType": "YulIdentifier",
																	"src": "477:17:20"
																},
																"nativeSrc": "477:45:20",
																"nodeType": "YulFunctionCall",
																"src": "477:45:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "469:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "469:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nativeSrc": "308:220:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "398:9:20",
														"nodeType": "YulTypedName",
														"src": "398:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "409:6:20",
														"nodeType": "YulTypedName",
														"src": "409:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "420:4:20",
														"nodeType": "YulTypedName",
														"src": "420:4:20",
														"type": ""
													}
												],
												"src": "308:220:20"
											},
											{
												"body": {
													"nativeSrc": "582:124:20",
													"nodeType": "YulBlock",
													"src": "582:124:20",
													"statements": [
														{
															"nativeSrc": "592:29:20",
															"nodeType": "YulAssignment",
															"src": "592:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nativeSrc": "614:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "614:6:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "601:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "601:12:20"
																},
																"nativeSrc": "601:20:20",
																"nodeType": "YulFunctionCall",
																"src": "601:20:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "592:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "592:5:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "684:16:20",
																"nodeType": "YulBlock",
																"src": "684:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "693:1:20",
																					"nodeType": "YulLiteral",
																					"src": "693:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "696:1:20",
																					"nodeType": "YulLiteral",
																					"src": "696:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "686:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "686:6:20"
																			},
																			"nativeSrc": "686:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "686:12:20"
																		},
																		"nativeSrc": "686:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "686:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nativeSrc": "643:5:20",
																				"nodeType": "YulIdentifier",
																				"src": "643:5:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nativeSrc": "654:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "654:5:20"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nativeSrc": "669:3:20",
																										"nodeType": "YulLiteral",
																										"src": "669:3:20",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nativeSrc": "674:1:20",
																										"nodeType": "YulLiteral",
																										"src": "674:1:20",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nativeSrc": "665:3:20",
																									"nodeType": "YulIdentifier",
																									"src": "665:3:20"
																								},
																								"nativeSrc": "665:11:20",
																								"nodeType": "YulFunctionCall",
																								"src": "665:11:20"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "678:1:20",
																								"nodeType": "YulLiteral",
																								"src": "678:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "661:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "661:3:20"
																						},
																						"nativeSrc": "661:19:20",
																						"nodeType": "YulFunctionCall",
																						"src": "661:19:20"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "650:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "650:3:20"
																				},
																				"nativeSrc": "650:31:20",
																				"nodeType": "YulFunctionCall",
																				"src": "650:31:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "640:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "640:2:20"
																		},
																		"nativeSrc": "640:42:20",
																		"nodeType": "YulFunctionCall",
																		"src": "640:42:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "633:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "633:6:20"
																},
																"nativeSrc": "633:50:20",
																"nodeType": "YulFunctionCall",
																"src": "633:50:20"
															},
															"nativeSrc": "630:70:20",
															"nodeType": "YulIf",
															"src": "630:70:20"
														}
													]
												},
												"name": "abi_decode_address",
												"nativeSrc": "533:173:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nativeSrc": "561:6:20",
														"nodeType": "YulTypedName",
														"src": "561:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nativeSrc": "572:5:20",
														"nodeType": "YulTypedName",
														"src": "572:5:20",
														"type": ""
													}
												],
												"src": "533:173:20"
											},
											{
												"body": {
													"nativeSrc": "798:213:20",
													"nodeType": "YulBlock",
													"src": "798:213:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "844:16:20",
																"nodeType": "YulBlock",
																"src": "844:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "853:1:20",
																					"nodeType": "YulLiteral",
																					"src": "853:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "856:1:20",
																					"nodeType": "YulLiteral",
																					"src": "856:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "846:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "846:6:20"
																			},
																			"nativeSrc": "846:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "846:12:20"
																		},
																		"nativeSrc": "846:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "846:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "819:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "819:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "828:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "828:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "815:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "815:3:20"
																		},
																		"nativeSrc": "815:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "815:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "840:2:20",
																		"nodeType": "YulLiteral",
																		"src": "840:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "811:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "811:3:20"
																},
																"nativeSrc": "811:32:20",
																"nodeType": "YulFunctionCall",
																"src": "811:32:20"
															},
															"nativeSrc": "808:52:20",
															"nodeType": "YulIf",
															"src": "808:52:20"
														},
														{
															"nativeSrc": "869:39:20",
															"nodeType": "YulAssignment",
															"src": "869:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "898:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "898:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "879:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "879:18:20"
																},
																"nativeSrc": "879:29:20",
																"nodeType": "YulFunctionCall",
																"src": "879:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "869:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "869:6:20"
																}
															]
														},
														{
															"nativeSrc": "917:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "917:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "930:1:20",
																"nodeType": "YulLiteral",
																"src": "930:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "921:5:20",
																	"nodeType": "YulTypedName",
																	"src": "921:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "940:41:20",
															"nodeType": "YulAssignment",
															"src": "940:41:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "966:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "966:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "977:2:20",
																				"nodeType": "YulLiteral",
																				"src": "977:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "962:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "962:3:20"
																		},
																		"nativeSrc": "962:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "962:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "949:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "949:12:20"
																},
																"nativeSrc": "949:32:20",
																"nodeType": "YulFunctionCall",
																"src": "949:32:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "940:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "940:5:20"
																}
															]
														},
														{
															"nativeSrc": "990:15:20",
															"nodeType": "YulAssignment",
															"src": "990:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "1000:5:20",
																"nodeType": "YulIdentifier",
																"src": "1000:5:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "990:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "990:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nativeSrc": "711:300:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "756:9:20",
														"nodeType": "YulTypedName",
														"src": "756:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "767:7:20",
														"nodeType": "YulTypedName",
														"src": "767:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "779:6:20",
														"nodeType": "YulTypedName",
														"src": "779:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "787:6:20",
														"nodeType": "YulTypedName",
														"src": "787:6:20",
														"type": ""
													}
												],
												"src": "711:300:20"
											},
											{
												"body": {
													"nativeSrc": "1111:92:20",
													"nodeType": "YulBlock",
													"src": "1111:92:20",
													"statements": [
														{
															"nativeSrc": "1121:26:20",
															"nodeType": "YulAssignment",
															"src": "1121:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1133:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1133:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1144:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1144:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1129:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1129:3:20"
																},
																"nativeSrc": "1129:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1129:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1121:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1121:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1163:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1163:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nativeSrc": "1188:6:20",
																						"nodeType": "YulIdentifier",
																						"src": "1188:6:20"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nativeSrc": "1181:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "1181:6:20"
																				},
																				"nativeSrc": "1181:14:20",
																				"nodeType": "YulFunctionCall",
																				"src": "1181:14:20"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nativeSrc": "1174:6:20",
																			"nodeType": "YulIdentifier",
																			"src": "1174:6:20"
																		},
																		"nativeSrc": "1174:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1174:22:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1156:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1156:6:20"
																},
																"nativeSrc": "1156:41:20",
																"nodeType": "YulFunctionCall",
																"src": "1156:41:20"
															},
															"nativeSrc": "1156:41:20",
															"nodeType": "YulExpressionStatement",
															"src": "1156:41:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nativeSrc": "1016:187:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1080:9:20",
														"nodeType": "YulTypedName",
														"src": "1080:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1091:6:20",
														"nodeType": "YulTypedName",
														"src": "1091:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1102:4:20",
														"nodeType": "YulTypedName",
														"src": "1102:4:20",
														"type": ""
													}
												],
												"src": "1016:187:20"
											},
											{
												"body": {
													"nativeSrc": "1309:76:20",
													"nodeType": "YulBlock",
													"src": "1309:76:20",
													"statements": [
														{
															"nativeSrc": "1319:26:20",
															"nodeType": "YulAssignment",
															"src": "1319:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1331:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1331:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1342:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1342:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1327:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1327:3:20"
																},
																"nativeSrc": "1327:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1327:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1319:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1319:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1361:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1361:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "1372:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "1372:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1354:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1354:6:20"
																},
																"nativeSrc": "1354:25:20",
																"nodeType": "YulFunctionCall",
																"src": "1354:25:20"
															},
															"nativeSrc": "1354:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "1354:25:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nativeSrc": "1208:177:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1278:9:20",
														"nodeType": "YulTypedName",
														"src": "1278:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1289:6:20",
														"nodeType": "YulTypedName",
														"src": "1289:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1300:4:20",
														"nodeType": "YulTypedName",
														"src": "1300:4:20",
														"type": ""
													}
												],
												"src": "1208:177:20"
											},
											{
												"body": {
													"nativeSrc": "1494:270:20",
													"nodeType": "YulBlock",
													"src": "1494:270:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "1540:16:20",
																"nodeType": "YulBlock",
																"src": "1540:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "1549:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1549:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "1552:1:20",
																					"nodeType": "YulLiteral",
																					"src": "1552:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "1542:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1542:6:20"
																			},
																			"nativeSrc": "1542:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "1542:12:20"
																		},
																		"nativeSrc": "1542:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "1542:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "1515:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "1515:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "1524:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1524:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "1511:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1511:3:20"
																		},
																		"nativeSrc": "1511:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1511:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1536:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1536:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "1507:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1507:3:20"
																},
																"nativeSrc": "1507:32:20",
																"nodeType": "YulFunctionCall",
																"src": "1507:32:20"
															},
															"nativeSrc": "1504:52:20",
															"nodeType": "YulIf",
															"src": "1504:52:20"
														},
														{
															"nativeSrc": "1565:39:20",
															"nodeType": "YulAssignment",
															"src": "1565:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1594:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1594:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1575:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "1575:18:20"
																},
																"nativeSrc": "1575:29:20",
																"nodeType": "YulFunctionCall",
																"src": "1575:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "1565:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1565:6:20"
																}
															]
														},
														{
															"nativeSrc": "1613:48:20",
															"nodeType": "YulAssignment",
															"src": "1613:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1646:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1646:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1657:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1657:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1642:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1642:3:20"
																		},
																		"nativeSrc": "1642:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1642:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "1623:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "1623:18:20"
																},
																"nativeSrc": "1623:38:20",
																"nodeType": "YulFunctionCall",
																"src": "1623:38:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "1613:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1613:6:20"
																}
															]
														},
														{
															"nativeSrc": "1670:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "1670:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "1683:1:20",
																"nodeType": "YulLiteral",
																"src": "1683:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "1674:5:20",
																	"nodeType": "YulTypedName",
																	"src": "1674:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "1693:41:20",
															"nodeType": "YulAssignment",
															"src": "1693:41:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "1719:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "1719:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1730:2:20",
																				"nodeType": "YulLiteral",
																				"src": "1730:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "1715:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1715:3:20"
																		},
																		"nativeSrc": "1715:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1715:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "1702:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "1702:12:20"
																},
																"nativeSrc": "1702:32:20",
																"nodeType": "YulFunctionCall",
																"src": "1702:32:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "1693:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "1693:5:20"
																}
															]
														},
														{
															"nativeSrc": "1743:15:20",
															"nodeType": "YulAssignment",
															"src": "1743:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "1753:5:20",
																"nodeType": "YulIdentifier",
																"src": "1753:5:20"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "1743:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1743:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nativeSrc": "1390:374:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1444:9:20",
														"nodeType": "YulTypedName",
														"src": "1444:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "1455:7:20",
														"nodeType": "YulTypedName",
														"src": "1455:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "1467:6:20",
														"nodeType": "YulTypedName",
														"src": "1467:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "1475:6:20",
														"nodeType": "YulTypedName",
														"src": "1475:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "1483:6:20",
														"nodeType": "YulTypedName",
														"src": "1483:6:20",
														"type": ""
													}
												],
												"src": "1390:374:20"
											},
											{
												"body": {
													"nativeSrc": "1866:87:20",
													"nodeType": "YulBlock",
													"src": "1866:87:20",
													"statements": [
														{
															"nativeSrc": "1876:26:20",
															"nodeType": "YulAssignment",
															"src": "1876:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1888:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1888:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1899:2:20",
																		"nodeType": "YulLiteral",
																		"src": "1899:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "1884:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "1884:3:20"
																},
																"nativeSrc": "1884:18:20",
																"nodeType": "YulFunctionCall",
																"src": "1884:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "1876:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "1876:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "1918:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "1918:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "1933:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "1933:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "1941:4:20",
																				"nodeType": "YulLiteral",
																				"src": "1941:4:20",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "1929:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "1929:3:20"
																		},
																		"nativeSrc": "1929:17:20",
																		"nodeType": "YulFunctionCall",
																		"src": "1929:17:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1911:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "1911:6:20"
																},
																"nativeSrc": "1911:36:20",
																"nodeType": "YulFunctionCall",
																"src": "1911:36:20"
															},
															"nativeSrc": "1911:36:20",
															"nodeType": "YulExpressionStatement",
															"src": "1911:36:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nativeSrc": "1769:184:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "1835:9:20",
														"nodeType": "YulTypedName",
														"src": "1835:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "1846:6:20",
														"nodeType": "YulTypedName",
														"src": "1846:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "1857:4:20",
														"nodeType": "YulTypedName",
														"src": "1857:4:20",
														"type": ""
													}
												],
												"src": "1769:184:20"
											},
											{
												"body": {
													"nativeSrc": "2059:76:20",
													"nodeType": "YulBlock",
													"src": "2059:76:20",
													"statements": [
														{
															"nativeSrc": "2069:26:20",
															"nodeType": "YulAssignment",
															"src": "2069:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2081:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2081:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2092:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2092:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "2077:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2077:3:20"
																},
																"nativeSrc": "2077:18:20",
																"nodeType": "YulFunctionCall",
																"src": "2077:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "2069:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "2069:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2111:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2111:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "2122:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "2122:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2104:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2104:6:20"
																},
																"nativeSrc": "2104:25:20",
																"nodeType": "YulFunctionCall",
																"src": "2104:25:20"
															},
															"nativeSrc": "2104:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "2104:25:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
												"nativeSrc": "1958:177:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2028:9:20",
														"nodeType": "YulTypedName",
														"src": "2028:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2039:6:20",
														"nodeType": "YulTypedName",
														"src": "2039:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2050:4:20",
														"nodeType": "YulTypedName",
														"src": "2050:4:20",
														"type": ""
													}
												],
												"src": "1958:177:20"
											},
											{
												"body": {
													"nativeSrc": "2210:156:20",
													"nodeType": "YulBlock",
													"src": "2210:156:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "2256:16:20",
																"nodeType": "YulBlock",
																"src": "2256:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2265:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2265:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2268:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2268:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2258:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2258:6:20"
																			},
																			"nativeSrc": "2258:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2258:12:20"
																		},
																		"nativeSrc": "2258:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "2258:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2231:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "2231:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2240:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2240:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2227:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2227:3:20"
																		},
																		"nativeSrc": "2227:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2227:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2252:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2252:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2223:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2223:3:20"
																},
																"nativeSrc": "2223:32:20",
																"nodeType": "YulFunctionCall",
																"src": "2223:32:20"
															},
															"nativeSrc": "2220:52:20",
															"nodeType": "YulIf",
															"src": "2220:52:20"
														},
														{
															"nativeSrc": "2281:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "2281:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "2294:1:20",
																"nodeType": "YulLiteral",
																"src": "2294:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "2285:5:20",
																	"nodeType": "YulTypedName",
																	"src": "2285:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "2304:32:20",
															"nodeType": "YulAssignment",
															"src": "2304:32:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2326:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2326:9:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "2313:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "2313:12:20"
																},
																"nativeSrc": "2313:23:20",
																"nodeType": "YulFunctionCall",
																"src": "2313:23:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "2304:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "2304:5:20"
																}
															]
														},
														{
															"nativeSrc": "2345:15:20",
															"nodeType": "YulAssignment",
															"src": "2345:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "2355:5:20",
																"nodeType": "YulIdentifier",
																"src": "2355:5:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2345:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2345:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nativeSrc": "2140:226:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2176:9:20",
														"nodeType": "YulTypedName",
														"src": "2176:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2187:7:20",
														"nodeType": "YulTypedName",
														"src": "2187:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2199:6:20",
														"nodeType": "YulTypedName",
														"src": "2199:6:20",
														"type": ""
													}
												],
												"src": "2140:226:20"
											},
											{
												"body": {
													"nativeSrc": "2441:116:20",
													"nodeType": "YulBlock",
													"src": "2441:116:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "2487:16:20",
																"nodeType": "YulBlock",
																"src": "2487:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2496:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2496:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "2499:1:20",
																					"nodeType": "YulLiteral",
																					"src": "2499:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "2489:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2489:6:20"
																			},
																			"nativeSrc": "2489:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "2489:12:20"
																		},
																		"nativeSrc": "2489:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "2489:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "2462:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "2462:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "2471:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2471:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "2458:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2458:3:20"
																		},
																		"nativeSrc": "2458:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2458:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "2483:2:20",
																		"nodeType": "YulLiteral",
																		"src": "2483:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "2454:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "2454:3:20"
																},
																"nativeSrc": "2454:32:20",
																"nodeType": "YulFunctionCall",
																"src": "2454:32:20"
															},
															"nativeSrc": "2451:52:20",
															"nodeType": "YulIf",
															"src": "2451:52:20"
														},
														{
															"nativeSrc": "2512:39:20",
															"nodeType": "YulAssignment",
															"src": "2512:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2541:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2541:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "2522:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "2522:18:20"
																},
																"nativeSrc": "2522:29:20",
																"nodeType": "YulFunctionCall",
																"src": "2522:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "2512:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2512:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nativeSrc": "2371:186:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2407:9:20",
														"nodeType": "YulTypedName",
														"src": "2407:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "2418:7:20",
														"nodeType": "YulTypedName",
														"src": "2418:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "2430:6:20",
														"nodeType": "YulTypedName",
														"src": "2430:6:20",
														"type": ""
													}
												],
												"src": "2371:186:20"
											},
											{
												"body": {
													"nativeSrc": "2919:881:20",
													"nodeType": "YulBlock",
													"src": "2919:881:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "2936:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "2936:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "2951:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "2951:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "2963:3:20",
																						"nodeType": "YulLiteral",
																						"src": "2963:3:20",
																						"type": "",
																						"value": "248"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "2968:3:20",
																						"nodeType": "YulLiteral",
																						"src": "2968:3:20",
																						"type": "",
																						"value": "255"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nativeSrc": "2959:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "2959:3:20"
																				},
																				"nativeSrc": "2959:13:20",
																				"nodeType": "YulFunctionCall",
																				"src": "2959:13:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "2947:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2947:3:20"
																		},
																		"nativeSrc": "2947:26:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2947:26:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2929:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2929:6:20"
																},
																"nativeSrc": "2929:45:20",
																"nodeType": "YulFunctionCall",
																"src": "2929:45:20"
															},
															"nativeSrc": "2929:45:20",
															"nodeType": "YulExpressionStatement",
															"src": "2929:45:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "2994:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "2994:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3005:2:20",
																				"nodeType": "YulLiteral",
																				"src": "3005:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2990:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "2990:3:20"
																		},
																		"nativeSrc": "2990:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "2990:18:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3010:3:20",
																		"nodeType": "YulLiteral",
																		"src": "3010:3:20",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2983:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "2983:6:20"
																},
																"nativeSrc": "2983:31:20",
																"nodeType": "YulFunctionCall",
																"src": "2983:31:20"
															},
															"nativeSrc": "2983:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "2983:31:20"
														},
														{
															"nativeSrc": "3023:60:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3023:60:20",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nativeSrc": "3055:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3055:6:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3067:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3067:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3078:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3078:3:20",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3063:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3063:3:20"
																		},
																		"nativeSrc": "3063:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3063:19:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "3037:17:20",
																	"nodeType": "YulIdentifier",
																	"src": "3037:17:20"
																},
																"nativeSrc": "3037:46:20",
																"nodeType": "YulFunctionCall",
																"src": "3037:46:20"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nativeSrc": "3027:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3027:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3103:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3103:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3114:2:20",
																				"nodeType": "YulLiteral",
																				"src": "3114:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3099:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3099:3:20"
																		},
																		"nativeSrc": "3099:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3099:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_1",
																				"nativeSrc": "3123:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3123:6:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3131:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3131:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3119:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3119:3:20"
																		},
																		"nativeSrc": "3119:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3119:22:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3092:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3092:6:20"
																},
																"nativeSrc": "3092:50:20",
																"nodeType": "YulFunctionCall",
																"src": "3092:50:20"
															},
															"nativeSrc": "3092:50:20",
															"nodeType": "YulExpressionStatement",
															"src": "3092:50:20"
														},
														{
															"nativeSrc": "3151:47:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3151:47:20",
															"value": {
																"arguments": [
																	{
																		"name": "value2",
																		"nativeSrc": "3183:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3183:6:20"
																	},
																	{
																		"name": "tail_1",
																		"nativeSrc": "3191:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3191:6:20"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nativeSrc": "3165:17:20",
																	"nodeType": "YulIdentifier",
																	"src": "3165:17:20"
																},
																"nativeSrc": "3165:33:20",
																"nodeType": "YulFunctionCall",
																"src": "3165:33:20"
															},
															"variables": [
																{
																	"name": "tail_2",
																	"nativeSrc": "3155:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3155:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3218:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3218:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3229:2:20",
																				"nodeType": "YulLiteral",
																				"src": "3229:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3214:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3214:3:20"
																		},
																		"nativeSrc": "3214:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3214:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "3234:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3234:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3207:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3207:6:20"
																},
																"nativeSrc": "3207:34:20",
																"nodeType": "YulFunctionCall",
																"src": "3207:34:20"
															},
															"nativeSrc": "3207:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "3207:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3261:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3261:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3272:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3272:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3257:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3257:3:20"
																		},
																		"nativeSrc": "3257:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3257:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "3282:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3282:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3298:3:20",
																								"nodeType": "YulLiteral",
																								"src": "3298:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3303:1:20",
																								"nodeType": "YulLiteral",
																								"src": "3303:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3294:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "3294:3:20"
																						},
																						"nativeSrc": "3294:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "3294:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3307:1:20",
																						"nodeType": "YulLiteral",
																						"src": "3307:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3290:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3290:3:20"
																				},
																				"nativeSrc": "3290:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "3290:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3278:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3278:3:20"
																		},
																		"nativeSrc": "3278:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3278:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3250:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3250:6:20"
																},
																"nativeSrc": "3250:61:20",
																"nodeType": "YulFunctionCall",
																"src": "3250:61:20"
															},
															"nativeSrc": "3250:61:20",
															"nodeType": "YulExpressionStatement",
															"src": "3250:61:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3331:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3331:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3342:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3342:3:20",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3327:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3327:3:20"
																		},
																		"nativeSrc": "3327:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3327:19:20"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "3348:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3348:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3320:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3320:6:20"
																},
																"nativeSrc": "3320:35:20",
																"nodeType": "YulFunctionCall",
																"src": "3320:35:20"
															},
															"nativeSrc": "3320:35:20",
															"nodeType": "YulExpressionStatement",
															"src": "3320:35:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "3375:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3375:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3386:3:20",
																				"nodeType": "YulLiteral",
																				"src": "3386:3:20",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3371:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3371:3:20"
																		},
																		"nativeSrc": "3371:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3371:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "tail_2",
																				"nativeSrc": "3396:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3396:6:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "3404:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "3404:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "3392:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3392:3:20"
																		},
																		"nativeSrc": "3392:22:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3392:22:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3364:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3364:6:20"
																},
																"nativeSrc": "3364:51:20",
																"nodeType": "YulFunctionCall",
																"src": "3364:51:20"
															},
															"nativeSrc": "3364:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "3364:51:20"
														},
														{
															"nativeSrc": "3424:17:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3424:17:20",
															"value": {
																"name": "tail_2",
																"nativeSrc": "3435:6:20",
																"nodeType": "YulIdentifier",
																"src": "3435:6:20"
															},
															"variables": [
																{
																	"name": "pos",
																	"nativeSrc": "3428:3:20",
																	"nodeType": "YulTypedName",
																	"src": "3428:3:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3450:27:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3450:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "3470:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3470:6:20"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3464:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "3464:5:20"
																},
																"nativeSrc": "3464:13:20",
																"nodeType": "YulFunctionCall",
																"src": "3464:13:20"
															},
															"variables": [
																{
																	"name": "length",
																	"nativeSrc": "3454:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3454:6:20",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_2",
																		"nativeSrc": "3493:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3493:6:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3501:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3501:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3486:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3486:6:20"
																},
																"nativeSrc": "3486:22:20",
																"nodeType": "YulFunctionCall",
																"src": "3486:22:20"
															},
															"nativeSrc": "3486:22:20",
															"nodeType": "YulExpressionStatement",
															"src": "3486:22:20"
														},
														{
															"nativeSrc": "3517:22:20",
															"nodeType": "YulAssignment",
															"src": "3517:22:20",
															"value": {
																"arguments": [
																	{
																		"name": "tail_2",
																		"nativeSrc": "3528:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3528:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3536:2:20",
																		"nodeType": "YulLiteral",
																		"src": "3536:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3524:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3524:3:20"
																},
																"nativeSrc": "3524:15:20",
																"nodeType": "YulFunctionCall",
																"src": "3524:15:20"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nativeSrc": "3517:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3517:3:20"
																}
															]
														},
														{
															"nativeSrc": "3548:29:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3548:29:20",
															"value": {
																"arguments": [
																	{
																		"name": "value6",
																		"nativeSrc": "3566:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3566:6:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3574:2:20",
																		"nodeType": "YulLiteral",
																		"src": "3574:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3562:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3562:3:20"
																},
																"nativeSrc": "3562:15:20",
																"nodeType": "YulFunctionCall",
																"src": "3562:15:20"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nativeSrc": "3552:6:20",
																	"nodeType": "YulTypedName",
																	"src": "3552:6:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "3586:10:20",
															"nodeType": "YulVariableDeclaration",
															"src": "3586:10:20",
															"value": {
																"kind": "number",
																"nativeSrc": "3595:1:20",
																"nodeType": "YulLiteral",
																"src": "3595:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nativeSrc": "3590:1:20",
																	"nodeType": "YulTypedName",
																	"src": "3590:1:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "3654:120:20",
																"nodeType": "YulBlock",
																"src": "3654:120:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nativeSrc": "3675:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3675:3:20"
																				},
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nativeSrc": "3686:6:20",
																							"nodeType": "YulIdentifier",
																							"src": "3686:6:20"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "3680:5:20",
																						"nodeType": "YulIdentifier",
																						"src": "3680:5:20"
																					},
																					"nativeSrc": "3680:13:20",
																					"nodeType": "YulFunctionCall",
																					"src": "3680:13:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "3668:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3668:6:20"
																			},
																			"nativeSrc": "3668:26:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3668:26:20"
																		},
																		"nativeSrc": "3668:26:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "3668:26:20"
																	},
																	{
																		"nativeSrc": "3707:19:20",
																		"nodeType": "YulAssignment",
																		"src": "3707:19:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nativeSrc": "3718:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3718:3:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3723:2:20",
																					"nodeType": "YulLiteral",
																					"src": "3723:2:20",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3714:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3714:3:20"
																			},
																			"nativeSrc": "3714:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3714:12:20"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nativeSrc": "3707:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3707:3:20"
																			}
																		]
																	},
																	{
																		"nativeSrc": "3739:25:20",
																		"nodeType": "YulAssignment",
																		"src": "3739:25:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nativeSrc": "3753:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "3753:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3761:2:20",
																					"nodeType": "YulLiteral",
																					"src": "3761:2:20",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3749:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3749:3:20"
																			},
																			"nativeSrc": "3749:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3749:15:20"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nativeSrc": "3739:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3739:6:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nativeSrc": "3616:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "3616:1:20"
																	},
																	{
																		"name": "length",
																		"nativeSrc": "3619:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "3619:6:20"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nativeSrc": "3613:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "3613:2:20"
																},
																"nativeSrc": "3613:13:20",
																"nodeType": "YulFunctionCall",
																"src": "3613:13:20"
															},
															"nativeSrc": "3605:169:20",
															"nodeType": "YulForLoop",
															"post": {
																"nativeSrc": "3627:18:20",
																"nodeType": "YulBlock",
																"src": "3627:18:20",
																"statements": [
																	{
																		"nativeSrc": "3629:14:20",
																		"nodeType": "YulAssignment",
																		"src": "3629:14:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nativeSrc": "3638:1:20",
																					"nodeType": "YulIdentifier",
																					"src": "3638:1:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "3641:1:20",
																					"nodeType": "YulLiteral",
																					"src": "3641:1:20",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nativeSrc": "3634:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "3634:3:20"
																			},
																			"nativeSrc": "3634:9:20",
																			"nodeType": "YulFunctionCall",
																			"src": "3634:9:20"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nativeSrc": "3629:1:20",
																				"nodeType": "YulIdentifier",
																				"src": "3629:1:20"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nativeSrc": "3609:3:20",
																"nodeType": "YulBlock",
																"src": "3609:3:20",
																"statements": []
															},
															"src": "3605:169:20"
														},
														{
															"nativeSrc": "3783:11:20",
															"nodeType": "YulAssignment",
															"src": "3783:11:20",
															"value": {
																"name": "pos",
																"nativeSrc": "3791:3:20",
																"nodeType": "YulIdentifier",
																"src": "3791:3:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3783:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "3783:4:20"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nativeSrc": "2562:1238:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "2840:9:20",
														"nodeType": "YulTypedName",
														"src": "2840:9:20",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "2851:6:20",
														"nodeType": "YulTypedName",
														"src": "2851:6:20",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "2859:6:20",
														"nodeType": "YulTypedName",
														"src": "2859:6:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "2867:6:20",
														"nodeType": "YulTypedName",
														"src": "2867:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "2875:6:20",
														"nodeType": "YulTypedName",
														"src": "2875:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "2883:6:20",
														"nodeType": "YulTypedName",
														"src": "2883:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "2891:6:20",
														"nodeType": "YulTypedName",
														"src": "2891:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "2899:6:20",
														"nodeType": "YulTypedName",
														"src": "2899:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "2910:4:20",
														"nodeType": "YulTypedName",
														"src": "2910:4:20",
														"type": ""
													}
												],
												"src": "2562:1238:20"
											},
											{
												"body": {
													"nativeSrc": "3906:102:20",
													"nodeType": "YulBlock",
													"src": "3906:102:20",
													"statements": [
														{
															"nativeSrc": "3916:26:20",
															"nodeType": "YulAssignment",
															"src": "3916:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3928:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "3928:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3939:2:20",
																		"nodeType": "YulLiteral",
																		"src": "3939:2:20",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "3924:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "3924:3:20"
																},
																"nativeSrc": "3924:18:20",
																"nodeType": "YulFunctionCall",
																"src": "3924:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "3916:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "3916:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "3958:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "3958:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "3973:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "3973:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "3989:3:20",
																								"nodeType": "YulLiteral",
																								"src": "3989:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "3994:1:20",
																								"nodeType": "YulLiteral",
																								"src": "3994:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "3985:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "3985:3:20"
																						},
																						"nativeSrc": "3985:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "3985:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "3998:1:20",
																						"nodeType": "YulLiteral",
																						"src": "3998:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "3981:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "3981:3:20"
																				},
																				"nativeSrc": "3981:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "3981:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "3969:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "3969:3:20"
																		},
																		"nativeSrc": "3969:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "3969:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3951:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "3951:6:20"
																},
																"nativeSrc": "3951:51:20",
																"nodeType": "YulFunctionCall",
																"src": "3951:51:20"
															},
															"nativeSrc": "3951:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "3951:51:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nativeSrc": "3805:203:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "3875:9:20",
														"nodeType": "YulTypedName",
														"src": "3875:9:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "3886:6:20",
														"nodeType": "YulTypedName",
														"src": "3886:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "3897:4:20",
														"nodeType": "YulTypedName",
														"src": "3897:4:20",
														"type": ""
													}
												],
												"src": "3805:203:20"
											},
											{
												"body": {
													"nativeSrc": "4183:733:20",
													"nodeType": "YulBlock",
													"src": "4183:733:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "4230:16:20",
																"nodeType": "YulBlock",
																"src": "4230:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4239:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4239:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4242:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4242:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4232:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "4232:6:20"
																			},
																			"nativeSrc": "4232:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4232:12:20"
																		},
																		"nativeSrc": "4232:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4232:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "4204:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "4204:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "4213:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4213:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4200:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4200:3:20"
																		},
																		"nativeSrc": "4200:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4200:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "4225:3:20",
																		"nodeType": "YulLiteral",
																		"src": "4225:3:20",
																		"type": "",
																		"value": "224"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "4196:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "4196:3:20"
																},
																"nativeSrc": "4196:33:20",
																"nodeType": "YulFunctionCall",
																"src": "4196:33:20"
															},
															"nativeSrc": "4193:53:20",
															"nodeType": "YulIf",
															"src": "4193:53:20"
														},
														{
															"nativeSrc": "4255:39:20",
															"nodeType": "YulAssignment",
															"src": "4255:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "4284:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "4284:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "4265:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "4265:18:20"
																},
																"nativeSrc": "4265:29:20",
																"nodeType": "YulFunctionCall",
																"src": "4265:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "4255:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4255:6:20"
																}
															]
														},
														{
															"nativeSrc": "4303:48:20",
															"nodeType": "YulAssignment",
															"src": "4303:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4336:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4336:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4347:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4347:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4332:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4332:3:20"
																		},
																		"nativeSrc": "4332:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4332:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "4313:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "4313:18:20"
																},
																"nativeSrc": "4313:38:20",
																"nodeType": "YulFunctionCall",
																"src": "4313:38:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "4303:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4303:6:20"
																}
															]
														},
														{
															"nativeSrc": "4360:14:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4360:14:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4373:1:20",
																"nodeType": "YulLiteral",
																"src": "4373:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value",
																	"nativeSrc": "4364:5:20",
																	"nodeType": "YulTypedName",
																	"src": "4364:5:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4383:41:20",
															"nodeType": "YulAssignment",
															"src": "4383:41:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4409:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4409:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4420:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4420:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4405:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4405:3:20"
																		},
																		"nativeSrc": "4405:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4405:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4392:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4392:12:20"
																},
																"nativeSrc": "4392:32:20",
																"nodeType": "YulFunctionCall",
																"src": "4392:32:20"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nativeSrc": "4383:5:20",
																	"nodeType": "YulIdentifier",
																	"src": "4383:5:20"
																}
															]
														},
														{
															"nativeSrc": "4433:15:20",
															"nodeType": "YulAssignment",
															"src": "4433:15:20",
															"value": {
																"name": "value",
																"nativeSrc": "4443:5:20",
																"nodeType": "YulIdentifier",
																"src": "4443:5:20"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nativeSrc": "4433:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4433:6:20"
																}
															]
														},
														{
															"nativeSrc": "4457:16:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4457:16:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4472:1:20",
																"nodeType": "YulLiteral",
																"src": "4472:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_1",
																	"nativeSrc": "4461:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4461:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4482:43:20",
															"nodeType": "YulAssignment",
															"src": "4482:43:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4510:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4510:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4521:2:20",
																				"nodeType": "YulLiteral",
																				"src": "4521:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4506:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4506:3:20"
																		},
																		"nativeSrc": "4506:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4506:18:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4493:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4493:12:20"
																},
																"nativeSrc": "4493:32:20",
																"nodeType": "YulFunctionCall",
																"src": "4493:32:20"
															},
															"variableNames": [
																{
																	"name": "value_1",
																	"nativeSrc": "4482:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4482:7:20"
																}
															]
														},
														{
															"nativeSrc": "4534:17:20",
															"nodeType": "YulAssignment",
															"src": "4534:17:20",
															"value": {
																"name": "value_1",
																"nativeSrc": "4544:7:20",
																"nodeType": "YulIdentifier",
																"src": "4544:7:20"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nativeSrc": "4534:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4534:6:20"
																}
															]
														},
														{
															"nativeSrc": "4560:48:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4560:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4592:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4592:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4603:3:20",
																				"nodeType": "YulLiteral",
																				"src": "4603:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4588:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4588:3:20"
																		},
																		"nativeSrc": "4588:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4588:19:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4575:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4575:12:20"
																},
																"nativeSrc": "4575:33:20",
																"nodeType": "YulFunctionCall",
																"src": "4575:33:20"
															},
															"variables": [
																{
																	"name": "value_2",
																	"nativeSrc": "4564:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4564:7:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "4660:16:20",
																"nodeType": "YulBlock",
																"src": "4660:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "4669:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4669:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "4672:1:20",
																					"nodeType": "YulLiteral",
																					"src": "4672:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "4662:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "4662:6:20"
																			},
																			"nativeSrc": "4662:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "4662:12:20"
																		},
																		"nativeSrc": "4662:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "4662:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value_2",
																				"nativeSrc": "4630:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "4630:7:20"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value_2",
																						"nativeSrc": "4643:7:20",
																						"nodeType": "YulIdentifier",
																						"src": "4643:7:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "4652:4:20",
																						"nodeType": "YulLiteral",
																						"src": "4652:4:20",
																						"type": "",
																						"value": "0xff"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nativeSrc": "4639:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "4639:3:20"
																				},
																				"nativeSrc": "4639:18:20",
																				"nodeType": "YulFunctionCall",
																				"src": "4639:18:20"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nativeSrc": "4627:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "4627:2:20"
																		},
																		"nativeSrc": "4627:31:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4627:31:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "4620:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4620:6:20"
																},
																"nativeSrc": "4620:39:20",
																"nodeType": "YulFunctionCall",
																"src": "4620:39:20"
															},
															"nativeSrc": "4617:59:20",
															"nodeType": "YulIf",
															"src": "4617:59:20"
														},
														{
															"nativeSrc": "4685:17:20",
															"nodeType": "YulAssignment",
															"src": "4685:17:20",
															"value": {
																"name": "value_2",
																"nativeSrc": "4695:7:20",
																"nodeType": "YulIdentifier",
																"src": "4695:7:20"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nativeSrc": "4685:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4685:6:20"
																}
															]
														},
														{
															"nativeSrc": "4711:16:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4711:16:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4726:1:20",
																"nodeType": "YulLiteral",
																"src": "4726:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_3",
																	"nativeSrc": "4715:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4715:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4736:44:20",
															"nodeType": "YulAssignment",
															"src": "4736:44:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4764:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4764:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4775:3:20",
																				"nodeType": "YulLiteral",
																				"src": "4775:3:20",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4760:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4760:3:20"
																		},
																		"nativeSrc": "4760:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4760:19:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4747:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4747:12:20"
																},
																"nativeSrc": "4747:33:20",
																"nodeType": "YulFunctionCall",
																"src": "4747:33:20"
															},
															"variableNames": [
																{
																	"name": "value_3",
																	"nativeSrc": "4736:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4736:7:20"
																}
															]
														},
														{
															"nativeSrc": "4789:17:20",
															"nodeType": "YulAssignment",
															"src": "4789:17:20",
															"value": {
																"name": "value_3",
																"nativeSrc": "4799:7:20",
																"nodeType": "YulIdentifier",
																"src": "4799:7:20"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nativeSrc": "4789:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4789:6:20"
																}
															]
														},
														{
															"nativeSrc": "4815:16:20",
															"nodeType": "YulVariableDeclaration",
															"src": "4815:16:20",
															"value": {
																"kind": "number",
																"nativeSrc": "4830:1:20",
																"nodeType": "YulLiteral",
																"src": "4830:1:20",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "value_4",
																	"nativeSrc": "4819:7:20",
																	"nodeType": "YulTypedName",
																	"src": "4819:7:20",
																	"type": ""
																}
															]
														},
														{
															"nativeSrc": "4840:44:20",
															"nodeType": "YulAssignment",
															"src": "4840:44:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "4868:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "4868:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "4879:3:20",
																				"nodeType": "YulLiteral",
																				"src": "4879:3:20",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "4864:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "4864:3:20"
																		},
																		"nativeSrc": "4864:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "4864:19:20"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nativeSrc": "4851:12:20",
																	"nodeType": "YulIdentifier",
																	"src": "4851:12:20"
																},
																"nativeSrc": "4851:33:20",
																"nodeType": "YulFunctionCall",
																"src": "4851:33:20"
															},
															"variableNames": [
																{
																	"name": "value_4",
																	"nativeSrc": "4840:7:20",
																	"nodeType": "YulIdentifier",
																	"src": "4840:7:20"
																}
															]
														},
														{
															"nativeSrc": "4893:17:20",
															"nodeType": "YulAssignment",
															"src": "4893:17:20",
															"value": {
																"name": "value_4",
																"nativeSrc": "4903:7:20",
																"nodeType": "YulIdentifier",
																"src": "4903:7:20"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nativeSrc": "4893:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "4893:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32",
												"nativeSrc": "4013:903:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4101:9:20",
														"nodeType": "YulTypedName",
														"src": "4101:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4112:7:20",
														"nodeType": "YulTypedName",
														"src": "4112:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4124:6:20",
														"nodeType": "YulTypedName",
														"src": "4124:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4132:6:20",
														"nodeType": "YulTypedName",
														"src": "4132:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "4140:6:20",
														"nodeType": "YulTypedName",
														"src": "4140:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "4148:6:20",
														"nodeType": "YulTypedName",
														"src": "4148:6:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "4156:6:20",
														"nodeType": "YulTypedName",
														"src": "4156:6:20",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "4164:6:20",
														"nodeType": "YulTypedName",
														"src": "4164:6:20",
														"type": ""
													},
													{
														"name": "value6",
														"nativeSrc": "4172:6:20",
														"nodeType": "YulTypedName",
														"src": "4172:6:20",
														"type": ""
													}
												],
												"src": "4013:903:20"
											},
											{
												"body": {
													"nativeSrc": "5008:173:20",
													"nodeType": "YulBlock",
													"src": "5008:173:20",
													"statements": [
														{
															"body": {
																"nativeSrc": "5054:16:20",
																"nodeType": "YulBlock",
																"src": "5054:16:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5063:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5063:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5066:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5066:1:20",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "5056:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5056:6:20"
																			},
																			"nativeSrc": "5056:12:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5056:12:20"
																		},
																		"nativeSrc": "5056:12:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5056:12:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nativeSrc": "5029:7:20",
																				"nodeType": "YulIdentifier",
																				"src": "5029:7:20"
																			},
																			{
																				"name": "headStart",
																				"nativeSrc": "5038:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5038:9:20"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5025:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5025:3:20"
																		},
																		"nativeSrc": "5025:23:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5025:23:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5050:2:20",
																		"nodeType": "YulLiteral",
																		"src": "5050:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nativeSrc": "5021:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5021:3:20"
																},
																"nativeSrc": "5021:32:20",
																"nodeType": "YulFunctionCall",
																"src": "5021:32:20"
															},
															"nativeSrc": "5018:52:20",
															"nodeType": "YulIf",
															"src": "5018:52:20"
														},
														{
															"nativeSrc": "5079:39:20",
															"nodeType": "YulAssignment",
															"src": "5079:39:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5108:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "5108:9:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "5089:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "5089:18:20"
																},
																"nativeSrc": "5089:29:20",
																"nodeType": "YulFunctionCall",
																"src": "5089:29:20"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nativeSrc": "5079:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5079:6:20"
																}
															]
														},
														{
															"nativeSrc": "5127:48:20",
															"nodeType": "YulAssignment",
															"src": "5127:48:20",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "5160:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "5160:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5171:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5171:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "5156:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5156:3:20"
																		},
																		"nativeSrc": "5156:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5156:18:20"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nativeSrc": "5137:18:20",
																	"nodeType": "YulIdentifier",
																	"src": "5137:18:20"
																},
																"nativeSrc": "5137:38:20",
																"nodeType": "YulFunctionCall",
																"src": "5137:38:20"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nativeSrc": "5127:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5127:6:20"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nativeSrc": "4921:260:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "4966:9:20",
														"nodeType": "YulTypedName",
														"src": "4966:9:20",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nativeSrc": "4977:7:20",
														"nodeType": "YulTypedName",
														"src": "4977:7:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nativeSrc": "4989:6:20",
														"nodeType": "YulTypedName",
														"src": "4989:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "4997:6:20",
														"nodeType": "YulTypedName",
														"src": "4997:6:20",
														"type": ""
													}
												],
												"src": "4921:260:20"
											},
											{
												"body": {
													"nativeSrc": "5241:325:20",
													"nodeType": "YulBlock",
													"src": "5241:325:20",
													"statements": [
														{
															"nativeSrc": "5251:22:20",
															"nodeType": "YulAssignment",
															"src": "5251:22:20",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5265:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5265:1:20",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nativeSrc": "5268:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "5268:4:20"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nativeSrc": "5261:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5261:3:20"
																},
																"nativeSrc": "5261:12:20",
																"nodeType": "YulFunctionCall",
																"src": "5261:12:20"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nativeSrc": "5251:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5251:6:20"
																}
															]
														},
														{
															"nativeSrc": "5282:38:20",
															"nodeType": "YulVariableDeclaration",
															"src": "5282:38:20",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nativeSrc": "5312:4:20",
																		"nodeType": "YulIdentifier",
																		"src": "5312:4:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5318:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5318:1:20",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nativeSrc": "5308:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5308:3:20"
																},
																"nativeSrc": "5308:12:20",
																"nodeType": "YulFunctionCall",
																"src": "5308:12:20"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nativeSrc": "5286:18:20",
																	"nodeType": "YulTypedName",
																	"src": "5286:18:20",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nativeSrc": "5359:31:20",
																"nodeType": "YulBlock",
																"src": "5359:31:20",
																"statements": [
																	{
																		"nativeSrc": "5361:27:20",
																		"nodeType": "YulAssignment",
																		"src": "5361:27:20",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nativeSrc": "5375:6:20",
																					"nodeType": "YulIdentifier",
																					"src": "5375:6:20"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5383:4:20",
																					"nodeType": "YulLiteral",
																					"src": "5383:4:20",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nativeSrc": "5371:3:20",
																				"nodeType": "YulIdentifier",
																				"src": "5371:3:20"
																			},
																			"nativeSrc": "5371:17:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5371:17:20"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nativeSrc": "5361:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5361:6:20"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "5339:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "5339:18:20"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nativeSrc": "5332:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5332:6:20"
																},
																"nativeSrc": "5332:26:20",
																"nodeType": "YulFunctionCall",
																"src": "5332:26:20"
															},
															"nativeSrc": "5329:61:20",
															"nodeType": "YulIf",
															"src": "5329:61:20"
														},
														{
															"body": {
																"nativeSrc": "5449:111:20",
																"nodeType": "YulBlock",
																"src": "5449:111:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5470:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5470:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "5477:3:20",
																							"nodeType": "YulLiteral",
																							"src": "5477:3:20",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "5482:10:20",
																							"nodeType": "YulLiteral",
																							"src": "5482:10:20",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "5473:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "5473:3:20"
																					},
																					"nativeSrc": "5473:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "5473:20:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "5463:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5463:6:20"
																			},
																			"nativeSrc": "5463:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5463:31:20"
																		},
																		"nativeSrc": "5463:31:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5463:31:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5514:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5514:1:20",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5517:4:20",
																					"nodeType": "YulLiteral",
																					"src": "5517:4:20",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "5507:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5507:6:20"
																			},
																			"nativeSrc": "5507:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5507:15:20"
																		},
																		"nativeSrc": "5507:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5507:15:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "5542:1:20",
																					"nodeType": "YulLiteral",
																					"src": "5542:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "5545:4:20",
																					"nodeType": "YulLiteral",
																					"src": "5545:4:20",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "5535:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5535:6:20"
																			},
																			"nativeSrc": "5535:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "5535:15:20"
																		},
																		"nativeSrc": "5535:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "5535:15:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nativeSrc": "5405:18:20",
																		"nodeType": "YulIdentifier",
																		"src": "5405:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nativeSrc": "5428:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "5428:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5436:2:20",
																				"nodeType": "YulLiteral",
																				"src": "5436:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nativeSrc": "5425:2:20",
																			"nodeType": "YulIdentifier",
																			"src": "5425:2:20"
																		},
																		"nativeSrc": "5425:14:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5425:14:20"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nativeSrc": "5402:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "5402:2:20"
																},
																"nativeSrc": "5402:38:20",
																"nodeType": "YulFunctionCall",
																"src": "5402:38:20"
															},
															"nativeSrc": "5399:161:20",
															"nodeType": "YulIf",
															"src": "5399:161:20"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nativeSrc": "5186:380:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nativeSrc": "5221:4:20",
														"nodeType": "YulTypedName",
														"src": "5221:4:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nativeSrc": "5230:6:20",
														"nodeType": "YulTypedName",
														"src": "5230:6:20",
														"type": ""
													}
												],
												"src": "5186:380:20"
											},
											{
												"body": {
													"nativeSrc": "5603:95:20",
													"nodeType": "YulBlock",
													"src": "5603:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5620:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5620:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "5627:3:20",
																				"nodeType": "YulLiteral",
																				"src": "5627:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "5632:10:20",
																				"nodeType": "YulLiteral",
																				"src": "5632:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "5623:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "5623:3:20"
																		},
																		"nativeSrc": "5623:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "5623:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5613:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5613:6:20"
																},
																"nativeSrc": "5613:31:20",
																"nodeType": "YulFunctionCall",
																"src": "5613:31:20"
															},
															"nativeSrc": "5613:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "5613:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5660:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5660:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5663:4:20",
																		"nodeType": "YulLiteral",
																		"src": "5663:4:20",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5653:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5653:6:20"
																},
																"nativeSrc": "5653:15:20",
																"nodeType": "YulFunctionCall",
																"src": "5653:15:20"
															},
															"nativeSrc": "5653:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "5653:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "5684:1:20",
																		"nodeType": "YulLiteral",
																		"src": "5684:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5687:4:20",
																		"nodeType": "YulLiteral",
																		"src": "5687:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "5677:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5677:6:20"
																},
																"nativeSrc": "5677:15:20",
																"nodeType": "YulFunctionCall",
																"src": "5677:15:20"
															},
															"nativeSrc": "5677:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "5677:15:20"
														}
													]
												},
												"name": "panic_error_0x41",
												"nativeSrc": "5571:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "5571:127:20"
											},
											{
												"body": {
													"nativeSrc": "5944:346:20",
													"nodeType": "YulBlock",
													"src": "5944:346:20",
													"statements": [
														{
															"nativeSrc": "5954:27:20",
															"nodeType": "YulAssignment",
															"src": "5954:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5966:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "5966:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "5977:3:20",
																		"nodeType": "YulLiteral",
																		"src": "5977:3:20",
																		"type": "",
																		"value": "192"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "5962:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "5962:3:20"
																},
																"nativeSrc": "5962:19:20",
																"nodeType": "YulFunctionCall",
																"src": "5962:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "5954:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "5954:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "5997:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "5997:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "6008:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6008:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "5990:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "5990:6:20"
																},
																"nativeSrc": "5990:25:20",
																"nodeType": "YulFunctionCall",
																"src": "5990:25:20"
															},
															"nativeSrc": "5990:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "5990:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6035:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6035:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6046:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6046:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6031:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6031:3:20"
																		},
																		"nativeSrc": "6031:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6031:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "6055:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6055:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6071:3:20",
																								"nodeType": "YulLiteral",
																								"src": "6071:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6076:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6076:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6067:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6067:3:20"
																						},
																						"nativeSrc": "6067:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6067:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6080:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6080:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6063:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6063:3:20"
																				},
																				"nativeSrc": "6063:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6063:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6051:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6051:3:20"
																		},
																		"nativeSrc": "6051:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6051:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6024:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6024:6:20"
																},
																"nativeSrc": "6024:60:20",
																"nodeType": "YulFunctionCall",
																"src": "6024:60:20"
															},
															"nativeSrc": "6024:60:20",
															"nodeType": "YulExpressionStatement",
															"src": "6024:60:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6104:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6104:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6115:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6115:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6100:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6100:3:20"
																		},
																		"nativeSrc": "6100:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6100:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nativeSrc": "6124:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6124:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6140:3:20",
																								"nodeType": "YulLiteral",
																								"src": "6140:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6145:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6145:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6136:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6136:3:20"
																						},
																						"nativeSrc": "6136:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6136:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6149:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6149:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6132:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6132:3:20"
																				},
																				"nativeSrc": "6132:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6132:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6120:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6120:3:20"
																		},
																		"nativeSrc": "6120:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6120:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6093:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6093:6:20"
																},
																"nativeSrc": "6093:60:20",
																"nodeType": "YulFunctionCall",
																"src": "6093:60:20"
															},
															"nativeSrc": "6093:60:20",
															"nodeType": "YulExpressionStatement",
															"src": "6093:60:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6173:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6173:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6184:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6184:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6169:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6169:3:20"
																		},
																		"nativeSrc": "6169:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6169:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "6189:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6189:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6162:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6162:6:20"
																},
																"nativeSrc": "6162:34:20",
																"nodeType": "YulFunctionCall",
																"src": "6162:34:20"
															},
															"nativeSrc": "6162:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "6162:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6216:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6216:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6227:3:20",
																				"nodeType": "YulLiteral",
																				"src": "6227:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6212:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6212:3:20"
																		},
																		"nativeSrc": "6212:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6212:19:20"
																	},
																	{
																		"name": "value4",
																		"nativeSrc": "6233:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6233:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6205:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6205:6:20"
																},
																"nativeSrc": "6205:35:20",
																"nodeType": "YulFunctionCall",
																"src": "6205:35:20"
															},
															"nativeSrc": "6205:35:20",
															"nodeType": "YulExpressionStatement",
															"src": "6205:35:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6260:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6260:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6271:3:20",
																				"nodeType": "YulLiteral",
																				"src": "6271:3:20",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6256:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6256:3:20"
																		},
																		"nativeSrc": "6256:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6256:19:20"
																	},
																	{
																		"name": "value5",
																		"nativeSrc": "6277:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6277:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6249:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6249:6:20"
																},
																"nativeSrc": "6249:35:20",
																"nodeType": "YulFunctionCall",
																"src": "6249:35:20"
															},
															"nativeSrc": "6249:35:20",
															"nodeType": "YulExpressionStatement",
															"src": "6249:35:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "5703:587:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "5873:9:20",
														"nodeType": "YulTypedName",
														"src": "5873:9:20",
														"type": ""
													},
													{
														"name": "value5",
														"nativeSrc": "5884:6:20",
														"nodeType": "YulTypedName",
														"src": "5884:6:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "5892:6:20",
														"nodeType": "YulTypedName",
														"src": "5892:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "5900:6:20",
														"nodeType": "YulTypedName",
														"src": "5900:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "5908:6:20",
														"nodeType": "YulTypedName",
														"src": "5908:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "5916:6:20",
														"nodeType": "YulTypedName",
														"src": "5916:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "5924:6:20",
														"nodeType": "YulTypedName",
														"src": "5924:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "5935:4:20",
														"nodeType": "YulTypedName",
														"src": "5935:4:20",
														"type": ""
													}
												],
												"src": "5703:587:20"
											},
											{
												"body": {
													"nativeSrc": "6424:171:20",
													"nodeType": "YulBlock",
													"src": "6424:171:20",
													"statements": [
														{
															"nativeSrc": "6434:26:20",
															"nodeType": "YulAssignment",
															"src": "6434:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6446:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6446:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6457:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6457:2:20",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6442:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6442:3:20"
																},
																"nativeSrc": "6442:18:20",
																"nodeType": "YulFunctionCall",
																"src": "6442:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6434:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "6434:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6476:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6476:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6491:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6491:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6507:3:20",
																								"nodeType": "YulLiteral",
																								"src": "6507:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6512:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6512:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6503:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6503:3:20"
																						},
																						"nativeSrc": "6503:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6503:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6516:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6516:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6499:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6499:3:20"
																				},
																				"nativeSrc": "6499:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6499:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6487:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6487:3:20"
																		},
																		"nativeSrc": "6487:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6487:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6469:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6469:6:20"
																},
																"nativeSrc": "6469:51:20",
																"nodeType": "YulFunctionCall",
																"src": "6469:51:20"
															},
															"nativeSrc": "6469:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "6469:51:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6540:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6540:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6551:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6551:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6536:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6536:3:20"
																		},
																		"nativeSrc": "6536:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6536:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "6560:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6560:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6576:3:20",
																								"nodeType": "YulLiteral",
																								"src": "6576:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6581:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6581:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6572:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6572:3:20"
																						},
																						"nativeSrc": "6572:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6572:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6585:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6585:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6568:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6568:3:20"
																				},
																				"nativeSrc": "6568:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6568:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6556:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6556:3:20"
																		},
																		"nativeSrc": "6556:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6556:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6529:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6529:6:20"
																},
																"nativeSrc": "6529:60:20",
																"nodeType": "YulFunctionCall",
																"src": "6529:60:20"
															},
															"nativeSrc": "6529:60:20",
															"nodeType": "YulExpressionStatement",
															"src": "6529:60:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed",
												"nativeSrc": "6295:300:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6385:9:20",
														"nodeType": "YulTypedName",
														"src": "6385:9:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6396:6:20",
														"nodeType": "YulTypedName",
														"src": "6396:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6404:6:20",
														"nodeType": "YulTypedName",
														"src": "6404:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6415:4:20",
														"nodeType": "YulTypedName",
														"src": "6415:4:20",
														"type": ""
													}
												],
												"src": "6295:300:20"
											},
											{
												"body": {
													"nativeSrc": "6757:188:20",
													"nodeType": "YulBlock",
													"src": "6757:188:20",
													"statements": [
														{
															"nativeSrc": "6767:26:20",
															"nodeType": "YulAssignment",
															"src": "6767:26:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6779:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6779:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "6790:2:20",
																		"nodeType": "YulLiteral",
																		"src": "6790:2:20",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "6775:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "6775:3:20"
																},
																"nativeSrc": "6775:18:20",
																"nodeType": "YulFunctionCall",
																"src": "6775:18:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "6767:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "6767:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "6809:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "6809:9:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nativeSrc": "6824:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "6824:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6840:3:20",
																								"nodeType": "YulLiteral",
																								"src": "6840:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "6845:1:20",
																								"nodeType": "YulLiteral",
																								"src": "6845:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "6836:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "6836:3:20"
																						},
																						"nativeSrc": "6836:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "6836:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "6849:1:20",
																						"nodeType": "YulLiteral",
																						"src": "6849:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "6832:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "6832:3:20"
																				},
																				"nativeSrc": "6832:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "6832:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "6820:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6820:3:20"
																		},
																		"nativeSrc": "6820:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6820:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6802:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6802:6:20"
																},
																"nativeSrc": "6802:51:20",
																"nodeType": "YulFunctionCall",
																"src": "6802:51:20"
															},
															"nativeSrc": "6802:51:20",
															"nodeType": "YulExpressionStatement",
															"src": "6802:51:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6873:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6873:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6884:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6884:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6869:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6869:3:20"
																		},
																		"nativeSrc": "6869:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6869:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "6889:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6889:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6862:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6862:6:20"
																},
																"nativeSrc": "6862:34:20",
																"nodeType": "YulFunctionCall",
																"src": "6862:34:20"
															},
															"nativeSrc": "6862:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "6862:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "6916:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "6916:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6927:2:20",
																				"nodeType": "YulLiteral",
																				"src": "6927:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6912:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "6912:3:20"
																		},
																		"nativeSrc": "6912:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "6912:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "6932:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "6932:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "6905:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "6905:6:20"
																},
																"nativeSrc": "6905:34:20",
																"nodeType": "YulFunctionCall",
																"src": "6905:34:20"
															},
															"nativeSrc": "6905:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "6905:34:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed",
												"nativeSrc": "6600:345:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "6710:9:20",
														"nodeType": "YulTypedName",
														"src": "6710:9:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "6721:6:20",
														"nodeType": "YulTypedName",
														"src": "6721:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "6729:6:20",
														"nodeType": "YulTypedName",
														"src": "6729:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "6737:6:20",
														"nodeType": "YulTypedName",
														"src": "6737:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "6748:4:20",
														"nodeType": "YulTypedName",
														"src": "6748:4:20",
														"type": ""
													}
												],
												"src": "6600:345:20"
											},
											{
												"body": {
													"nativeSrc": "6998:174:20",
													"nodeType": "YulBlock",
													"src": "6998:174:20",
													"statements": [
														{
															"nativeSrc": "7008:16:20",
															"nodeType": "YulAssignment",
															"src": "7008:16:20",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "7019:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "7019:1:20"
																	},
																	{
																		"name": "y",
																		"nativeSrc": "7022:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "7022:1:20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7015:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7015:3:20"
																},
																"nativeSrc": "7015:9:20",
																"nodeType": "YulFunctionCall",
																"src": "7015:9:20"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nativeSrc": "7008:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7008:3:20"
																}
															]
														},
														{
															"body": {
																"nativeSrc": "7055:111:20",
																"nodeType": "YulBlock",
																"src": "7055:111:20",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7076:1:20",
																					"nodeType": "YulLiteral",
																					"src": "7076:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nativeSrc": "7083:3:20",
																							"nodeType": "YulLiteral",
																							"src": "7083:3:20",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "7088:10:20",
																							"nodeType": "YulLiteral",
																							"src": "7088:10:20",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nativeSrc": "7079:3:20",
																						"nodeType": "YulIdentifier",
																						"src": "7079:3:20"
																					},
																					"nativeSrc": "7079:20:20",
																					"nodeType": "YulFunctionCall",
																					"src": "7079:20:20"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "7069:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7069:6:20"
																			},
																			"nativeSrc": "7069:31:20",
																			"nodeType": "YulFunctionCall",
																			"src": "7069:31:20"
																		},
																		"nativeSrc": "7069:31:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "7069:31:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7120:1:20",
																					"nodeType": "YulLiteral",
																					"src": "7120:1:20",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7123:4:20",
																					"nodeType": "YulLiteral",
																					"src": "7123:4:20",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nativeSrc": "7113:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7113:6:20"
																			},
																			"nativeSrc": "7113:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "7113:15:20"
																		},
																		"nativeSrc": "7113:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "7113:15:20"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "7148:1:20",
																					"nodeType": "YulLiteral",
																					"src": "7148:1:20",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nativeSrc": "7151:4:20",
																					"nodeType": "YulLiteral",
																					"src": "7151:4:20",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nativeSrc": "7141:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7141:6:20"
																			},
																			"nativeSrc": "7141:15:20",
																			"nodeType": "YulFunctionCall",
																			"src": "7141:15:20"
																		},
																		"nativeSrc": "7141:15:20",
																		"nodeType": "YulExpressionStatement",
																		"src": "7141:15:20"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nativeSrc": "7039:1:20",
																		"nodeType": "YulIdentifier",
																		"src": "7039:1:20"
																	},
																	{
																		"name": "sum",
																		"nativeSrc": "7042:3:20",
																		"nodeType": "YulIdentifier",
																		"src": "7042:3:20"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nativeSrc": "7036:2:20",
																	"nodeType": "YulIdentifier",
																	"src": "7036:2:20"
																},
																"nativeSrc": "7036:10:20",
																"nodeType": "YulFunctionCall",
																"src": "7036:10:20"
															},
															"nativeSrc": "7033:133:20",
															"nodeType": "YulIf",
															"src": "7033:133:20"
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nativeSrc": "6950:222:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nativeSrc": "6981:1:20",
														"nodeType": "YulTypedName",
														"src": "6981:1:20",
														"type": ""
													},
													{
														"name": "y",
														"nativeSrc": "6984:1:20",
														"nodeType": "YulTypedName",
														"src": "6984:1:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nativeSrc": "6990:3:20",
														"nodeType": "YulTypedName",
														"src": "6990:3:20",
														"type": ""
													}
												],
												"src": "6950:222:20"
											},
											{
												"body": {
													"nativeSrc": "7390:276:20",
													"nodeType": "YulBlock",
													"src": "7390:276:20",
													"statements": [
														{
															"nativeSrc": "7400:27:20",
															"nodeType": "YulAssignment",
															"src": "7400:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7412:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7412:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7423:3:20",
																		"nodeType": "YulLiteral",
																		"src": "7423:3:20",
																		"type": "",
																		"value": "160"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7408:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7408:3:20"
																},
																"nativeSrc": "7408:19:20",
																"nodeType": "YulFunctionCall",
																"src": "7408:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7400:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "7400:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7443:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7443:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "7454:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7454:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7436:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7436:6:20"
																},
																"nativeSrc": "7436:25:20",
																"nodeType": "YulFunctionCall",
																"src": "7436:25:20"
															},
															"nativeSrc": "7436:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "7436:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7481:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7481:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7492:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7492:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7477:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7477:3:20"
																		},
																		"nativeSrc": "7477:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7477:18:20"
																	},
																	{
																		"name": "value1",
																		"nativeSrc": "7497:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7497:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7470:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7470:6:20"
																},
																"nativeSrc": "7470:34:20",
																"nodeType": "YulFunctionCall",
																"src": "7470:34:20"
															},
															"nativeSrc": "7470:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "7470:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7524:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7524:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7535:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7535:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7520:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7520:3:20"
																		},
																		"nativeSrc": "7520:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7520:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "7540:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7540:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7513:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7513:6:20"
																},
																"nativeSrc": "7513:34:20",
																"nodeType": "YulFunctionCall",
																"src": "7513:34:20"
															},
															"nativeSrc": "7513:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "7513:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7567:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7567:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7578:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7578:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7563:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7563:3:20"
																		},
																		"nativeSrc": "7563:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7563:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "7583:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7583:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7556:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7556:6:20"
																},
																"nativeSrc": "7556:34:20",
																"nodeType": "YulFunctionCall",
																"src": "7556:34:20"
															},
															"nativeSrc": "7556:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "7556:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7610:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7610:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7621:3:20",
																				"nodeType": "YulLiteral",
																				"src": "7621:3:20",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7606:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7606:3:20"
																		},
																		"nativeSrc": "7606:19:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7606:19:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value4",
																				"nativeSrc": "7631:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7631:6:20"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "7647:3:20",
																								"nodeType": "YulLiteral",
																								"src": "7647:3:20",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nativeSrc": "7652:1:20",
																								"nodeType": "YulLiteral",
																								"src": "7652:1:20",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nativeSrc": "7643:3:20",
																							"nodeType": "YulIdentifier",
																							"src": "7643:3:20"
																						},
																						"nativeSrc": "7643:11:20",
																						"nodeType": "YulFunctionCall",
																						"src": "7643:11:20"
																					},
																					{
																						"kind": "number",
																						"nativeSrc": "7656:1:20",
																						"nodeType": "YulLiteral",
																						"src": "7656:1:20",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "7639:3:20",
																					"nodeType": "YulIdentifier",
																					"src": "7639:3:20"
																				},
																				"nativeSrc": "7639:19:20",
																				"nodeType": "YulFunctionCall",
																				"src": "7639:19:20"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7627:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7627:3:20"
																		},
																		"nativeSrc": "7627:32:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7627:32:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7599:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7599:6:20"
																},
																"nativeSrc": "7599:61:20",
																"nodeType": "YulFunctionCall",
																"src": "7599:61:20"
															},
															"nativeSrc": "7599:61:20",
															"nodeType": "YulExpressionStatement",
															"src": "7599:61:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed",
												"nativeSrc": "7177:489:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7327:9:20",
														"nodeType": "YulTypedName",
														"src": "7327:9:20",
														"type": ""
													},
													{
														"name": "value4",
														"nativeSrc": "7338:6:20",
														"nodeType": "YulTypedName",
														"src": "7338:6:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "7346:6:20",
														"nodeType": "YulTypedName",
														"src": "7346:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "7354:6:20",
														"nodeType": "YulTypedName",
														"src": "7354:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7362:6:20",
														"nodeType": "YulTypedName",
														"src": "7362:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7370:6:20",
														"nodeType": "YulTypedName",
														"src": "7370:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7381:4:20",
														"nodeType": "YulTypedName",
														"src": "7381:4:20",
														"type": ""
													}
												],
												"src": "7177:489:20"
											},
											{
												"body": {
													"nativeSrc": "7852:217:20",
													"nodeType": "YulBlock",
													"src": "7852:217:20",
													"statements": [
														{
															"nativeSrc": "7862:27:20",
															"nodeType": "YulAssignment",
															"src": "7862:27:20",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7874:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7874:9:20"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "7885:3:20",
																		"nodeType": "YulLiteral",
																		"src": "7885:3:20",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nativeSrc": "7870:3:20",
																	"nodeType": "YulIdentifier",
																	"src": "7870:3:20"
																},
																"nativeSrc": "7870:19:20",
																"nodeType": "YulFunctionCall",
																"src": "7870:19:20"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nativeSrc": "7862:4:20",
																	"nodeType": "YulIdentifier",
																	"src": "7862:4:20"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nativeSrc": "7905:9:20",
																		"nodeType": "YulIdentifier",
																		"src": "7905:9:20"
																	},
																	{
																		"name": "value0",
																		"nativeSrc": "7916:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "7916:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7898:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7898:6:20"
																},
																"nativeSrc": "7898:25:20",
																"nodeType": "YulFunctionCall",
																"src": "7898:25:20"
															},
															"nativeSrc": "7898:25:20",
															"nodeType": "YulExpressionStatement",
															"src": "7898:25:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7943:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7943:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7954:2:20",
																				"nodeType": "YulLiteral",
																				"src": "7954:2:20",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7939:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7939:3:20"
																		},
																		"nativeSrc": "7939:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7939:18:20"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nativeSrc": "7963:6:20",
																				"nodeType": "YulIdentifier",
																				"src": "7963:6:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "7971:4:20",
																				"nodeType": "YulLiteral",
																				"src": "7971:4:20",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nativeSrc": "7959:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7959:3:20"
																		},
																		"nativeSrc": "7959:17:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7959:17:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7932:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7932:6:20"
																},
																"nativeSrc": "7932:45:20",
																"nodeType": "YulFunctionCall",
																"src": "7932:45:20"
															},
															"nativeSrc": "7932:45:20",
															"nodeType": "YulExpressionStatement",
															"src": "7932:45:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "7997:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "7997:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8008:2:20",
																				"nodeType": "YulLiteral",
																				"src": "8008:2:20",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "7993:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "7993:3:20"
																		},
																		"nativeSrc": "7993:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "7993:18:20"
																	},
																	{
																		"name": "value2",
																		"nativeSrc": "8013:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "8013:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "7986:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "7986:6:20"
																},
																"nativeSrc": "7986:34:20",
																"nodeType": "YulFunctionCall",
																"src": "7986:34:20"
															},
															"nativeSrc": "7986:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "7986:34:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nativeSrc": "8040:9:20",
																				"nodeType": "YulIdentifier",
																				"src": "8040:9:20"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8051:2:20",
																				"nodeType": "YulLiteral",
																				"src": "8051:2:20",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "8036:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "8036:3:20"
																		},
																		"nativeSrc": "8036:18:20",
																		"nodeType": "YulFunctionCall",
																		"src": "8036:18:20"
																	},
																	{
																		"name": "value3",
																		"nativeSrc": "8056:6:20",
																		"nodeType": "YulIdentifier",
																		"src": "8056:6:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8029:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8029:6:20"
																},
																"nativeSrc": "8029:34:20",
																"nodeType": "YulFunctionCall",
																"src": "8029:34:20"
															},
															"nativeSrc": "8029:34:20",
															"nodeType": "YulExpressionStatement",
															"src": "8029:34:20"
														}
													]
												},
												"name": "abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed",
												"nativeSrc": "7671:398:20",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nativeSrc": "7797:9:20",
														"nodeType": "YulTypedName",
														"src": "7797:9:20",
														"type": ""
													},
													{
														"name": "value3",
														"nativeSrc": "7808:6:20",
														"nodeType": "YulTypedName",
														"src": "7808:6:20",
														"type": ""
													},
													{
														"name": "value2",
														"nativeSrc": "7816:6:20",
														"nodeType": "YulTypedName",
														"src": "7816:6:20",
														"type": ""
													},
													{
														"name": "value1",
														"nativeSrc": "7824:6:20",
														"nodeType": "YulTypedName",
														"src": "7824:6:20",
														"type": ""
													},
													{
														"name": "value0",
														"nativeSrc": "7832:6:20",
														"nodeType": "YulTypedName",
														"src": "7832:6:20",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nativeSrc": "7843:4:20",
														"nodeType": "YulTypedName",
														"src": "7843:4:20",
														"type": ""
													}
												],
												"src": "7671:398:20"
											},
											{
												"body": {
													"nativeSrc": "8106:95:20",
													"nodeType": "YulBlock",
													"src": "8106:95:20",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8123:1:20",
																		"nodeType": "YulLiteral",
																		"src": "8123:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nativeSrc": "8130:3:20",
																				"nodeType": "YulLiteral",
																				"src": "8130:3:20",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "8135:10:20",
																				"nodeType": "YulLiteral",
																				"src": "8135:10:20",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nativeSrc": "8126:3:20",
																			"nodeType": "YulIdentifier",
																			"src": "8126:3:20"
																		},
																		"nativeSrc": "8126:20:20",
																		"nodeType": "YulFunctionCall",
																		"src": "8126:20:20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8116:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8116:6:20"
																},
																"nativeSrc": "8116:31:20",
																"nodeType": "YulFunctionCall",
																"src": "8116:31:20"
															},
															"nativeSrc": "8116:31:20",
															"nodeType": "YulExpressionStatement",
															"src": "8116:31:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8163:1:20",
																		"nodeType": "YulLiteral",
																		"src": "8163:1:20",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8166:4:20",
																		"nodeType": "YulLiteral",
																		"src": "8166:4:20",
																		"type": "",
																		"value": "0x21"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "8156:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8156:6:20"
																},
																"nativeSrc": "8156:15:20",
																"nodeType": "YulFunctionCall",
																"src": "8156:15:20"
															},
															"nativeSrc": "8156:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "8156:15:20"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "8187:1:20",
																		"nodeType": "YulLiteral",
																		"src": "8187:1:20",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "8190:4:20",
																		"nodeType": "YulLiteral",
																		"src": "8190:4:20",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nativeSrc": "8180:6:20",
																	"nodeType": "YulIdentifier",
																	"src": "8180:6:20"
																},
																"nativeSrc": "8180:15:20",
																"nodeType": "YulFunctionCall",
																"src": "8180:15:20"
															},
															"nativeSrc": "8180:15:20",
															"nodeType": "YulExpressionStatement",
															"src": "8180:15:20"
														}
													]
												},
												"name": "panic_error_0x21",
												"nativeSrc": "8074:127:20",
												"nodeType": "YulFunctionDefinition",
												"src": "8074:127:20"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        mcopy(add(pos, 0x20), add(value, 0x20), length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := 0\n        value := calldataload(add(headStart, 32))\n        value1 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := 0\n        value := calldataload(headStart)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__to_t_bytes1_t_string_memory_ptr_t_string_memory_ptr_t_uint256_t_address_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, shl(248, 255)))\n        mstore(add(headStart, 32), 224)\n        let tail_1 := abi_encode_string(value1, add(headStart, 224))\n        mstore(add(headStart, 64), sub(tail_1, headStart))\n        let tail_2 := abi_encode_string(value2, tail_1)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 160), value5)\n        mstore(add(headStart, 192), sub(tail_2, headStart))\n        let pos := tail_2\n        let length := mload(value6)\n        mstore(tail_2, length)\n        pos := add(tail_2, 32)\n        let srcPtr := add(value6, 32)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, 32)\n            srcPtr := add(srcPtr, 32)\n        }\n        tail := pos\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256t_uint8t_bytes32t_bytes32(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6\n    {\n        if slt(sub(dataEnd, headStart), 224) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        let value := 0\n        value := calldataload(add(headStart, 64))\n        value2 := value\n        let value_1 := 0\n        value_1 := calldataload(add(headStart, 96))\n        value3 := value_1\n        let value_2 := calldataload(add(headStart, 128))\n        if iszero(eq(value_2, and(value_2, 0xff))) { revert(0, 0) }\n        value4 := value_2\n        let value_3 := 0\n        value_3 := calldataload(add(headStart, 160))\n        value5 := value_3\n        let value_4 := 0\n        value_4 := calldataload(add(headStart, 192))\n        value6 := value_4\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_bytes32_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 192)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 64), and(value2, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n        mstore(add(headStart, 160), value5)\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), and(value1, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_uint256__to_t_address_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), and(value4, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n}",
									"id": 20,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {
								"2213": [
									{
										"length": 32,
										"start": 1785
									}
								],
								"2215": [
									{
										"length": 32,
										"start": 1743
									}
								],
								"2217": [
									{
										"length": 32,
										"start": 1701
									}
								],
								"2219": [
									{
										"length": 32,
										"start": 1866
									}
								],
								"2221": [
									{
										"length": 32,
										"start": 1906
									}
								],
								"2224": [
									{
										"length": 32,
										"start": 2171
									}
								],
								"2227": [
									{
										"length": 32,
										"start": 2216
									}
								]
							},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x111 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x79CC6790 GT PUSH2 0x9E JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x6E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x233 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0xD505ACCF EQ PUSH2 0x24E JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x261 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x299 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x79CC6790 EQ PUSH2 0x1D7 JUMPI DUP1 PUSH4 0x7ECEBE00 EQ PUSH2 0x1EA JUMPI DUP1 PUSH4 0x84B0196E EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x218 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x313CE567 GT PUSH2 0xE4 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x17B JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0x18A JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x192 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1A7 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1CF JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x168 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x11D PUSH2 0x2AC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12A SWAP2 SWAP1 PUSH2 0xDD9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x146 PUSH2 0x141 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0D JUMP JUMPDEST PUSH2 0x33C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12A JUMP JUMPDEST PUSH1 0x2 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12A JUMP JUMPDEST PUSH2 0x146 PUSH2 0x176 CALLDATASIZE PUSH1 0x4 PUSH2 0xE35 JUMP JUMPDEST PUSH2 0x355 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12A JUMP JUMPDEST PUSH2 0x15A PUSH2 0x378 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x1A0 CALLDATASIZE PUSH1 0x4 PUSH2 0xE6F JUMP JUMPDEST PUSH2 0x386 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x15A PUSH2 0x1B5 CALLDATASIZE PUSH1 0x4 PUSH2 0xE86 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x393 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x1E5 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0D JUMP JUMPDEST PUSH2 0x3A6 JUMP JUMPDEST PUSH2 0x15A PUSH2 0x1F8 CALLDATASIZE PUSH1 0x4 PUSH2 0xE86 JUMP JUMPDEST PUSH2 0x3BF JUMP JUMPDEST PUSH2 0x205 PUSH2 0x3DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x12A SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xE9F JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x12A JUMP JUMPDEST PUSH2 0x11D PUSH2 0x41E JUMP JUMPDEST PUSH2 0x146 PUSH2 0x249 CALLDATASIZE PUSH1 0x4 PUSH2 0xE0D JUMP JUMPDEST PUSH2 0x42D JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x25C CALLDATASIZE PUSH1 0x4 PUSH2 0xF35 JUMP JUMPDEST PUSH2 0x43A JUMP JUMPDEST PUSH2 0x15A PUSH2 0x26F CALLDATASIZE PUSH1 0x4 PUSH2 0xFA2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x1A5 PUSH2 0x2A7 CALLDATASIZE PUSH1 0x4 PUSH2 0xE86 JUMP JUMPDEST PUSH2 0x575 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x3 DUP1 SLOAD PUSH2 0x2BB SWAP1 PUSH2 0xFD3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x2E7 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x332 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x309 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x332 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x315 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x349 DUP2 DUP6 DUP6 PUSH2 0x5AF JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 CALLER PUSH2 0x362 DUP6 DUP3 DUP6 PUSH2 0x5C1 JUMP JUMPDEST PUSH2 0x36D DUP6 DUP6 DUP6 PUSH2 0x63C JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0x381 PUSH2 0x699 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x390 CALLER DUP3 PUSH2 0x7C2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x39B PUSH2 0x7F6 JUMP JUMPDEST PUSH2 0x3A4 PUSH0 PUSH2 0x823 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x3B1 DUP3 CALLER DUP4 PUSH2 0x5C1 JUMP JUMPDEST PUSH2 0x3BB DUP3 DUP3 PUSH2 0x7C2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x34F JUMP JUMPDEST PUSH0 PUSH1 0x60 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x60 PUSH2 0x3ED PUSH2 0x874 JUMP JUMPDEST PUSH2 0x3F5 PUSH2 0x8A1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0xF PUSH1 0xF8 SHL SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP CHAINID SWAP8 POP ADDRESS SWAP7 POP SWAP5 POP SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x4 DUP1 SLOAD PUSH2 0x2BB SWAP1 PUSH2 0xFD3 JUMP JUMPDEST PUSH0 CALLER PUSH2 0x349 DUP2 DUP6 DUP6 PUSH2 0x63C JUMP JUMPDEST DUP4 TIMESTAMP GT ISZERO PUSH2 0x463 JUMPI PUSH1 0x40 MLOAD PUSH4 0x313C8981 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH32 0x6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9 DUP9 DUP9 DUP9 PUSH2 0x4AE DUP13 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP2 ADD SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND SWAP1 DUP7 ADD MSTORE SWAP3 SWAP1 SWAP2 AND PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x80 DUP4 ADD MSTORE PUSH1 0xA0 DUP3 ADD MSTORE PUSH1 0xC0 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0xE0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP PUSH0 PUSH2 0x508 DUP3 PUSH2 0x8CE JUMP JUMPDEST SWAP1 POP PUSH0 PUSH2 0x517 DUP3 DUP8 DUP8 DUP8 PUSH2 0x8FA JUMP JUMPDEST SWAP1 POP DUP10 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH4 0x25C00723 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP12 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x45A JUMP JUMPDEST PUSH2 0x569 DUP11 DUP11 DUP11 PUSH2 0x5AF JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x57D PUSH2 0x7F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x5A6 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH2 0x390 DUP2 PUSH2 0x823 JUMP JUMPDEST PUSH2 0x5BC DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x926 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD PUSH0 NOT DUP2 EQ PUSH2 0x636 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x628 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7DC7A0D9 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x45A JUMP JUMPDEST PUSH2 0x636 DUP5 DUP5 DUP5 DUP5 SUB PUSH0 PUSH2 0x926 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x665 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x68E JUMPI PUSH1 0x40 MLOAD PUSH4 0xEC442F05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH2 0x5BC DUP4 DUP4 DUP4 PUSH2 0x9F8 JUMP JUMPDEST PUSH0 ADDRESS PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB PUSH32 0x0 AND EQ DUP1 ISZERO PUSH2 0x6F1 JUMPI POP PUSH32 0x0 CHAINID EQ JUMPDEST ISZERO PUSH2 0x71B JUMPI POP PUSH32 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x381 PUSH1 0x40 DUP1 MLOAD PUSH32 0x8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x0 SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x0 PUSH1 0x60 DUP3 ADD MSTORE CHAINID PUSH1 0x80 DUP3 ADD MSTORE ADDRESS PUSH1 0xA0 DUP3 ADD MSTORE PUSH0 SWAP1 PUSH1 0xC0 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x7EB JUMPI PUSH1 0x40 MLOAD PUSH4 0x4B637E8F PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH2 0x3BB DUP3 PUSH0 DUP4 PUSH2 0x9F8 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x3A4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x381 PUSH32 0x0 PUSH1 0x5 PUSH2 0xB1E JUMP JUMPDEST PUSH1 0x60 PUSH2 0x381 PUSH32 0x0 PUSH1 0x6 PUSH2 0xB1E JUMP JUMPDEST PUSH0 PUSH2 0x34F PUSH2 0x8DA PUSH2 0x699 JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH2 0x1901 PUSH1 0xF0 SHL DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 SWAP1 KECCAK256 SWAP1 JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH2 0x90A DUP9 DUP9 DUP9 DUP9 PUSH2 0xBC7 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH2 0x91A DUP3 DUP3 PUSH2 0xC8F JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH2 0x94F JUMPI PUSH1 0x40 MLOAD PUSH4 0xE602DF05 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x978 JUMPI PUSH1 0x40 MLOAD PUSH4 0x4A1406B1 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 DUP3 SWAP1 SSTORE DUP1 ISZERO PUSH2 0x636 JUMPI DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 DUP5 PUSH1 0x40 MLOAD PUSH2 0x9EA SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xA22 JUMPI DUP1 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xA17 SWAP2 SWAP1 PUSH2 0x100B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xA92 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0xA74 JUMPI PUSH1 0x40 MLOAD PUSH4 0x391434E3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP1 DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0xAAE JUMPI PUSH1 0x2 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 0xACC JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD PUSH2 0xB11 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0xFF DUP4 EQ PUSH2 0xB38 JUMPI PUSH2 0xB31 DUP4 PUSH2 0xD47 JUMP JUMPDEST SWAP1 POP PUSH2 0x34F JUMP JUMPDEST DUP2 DUP1 SLOAD PUSH2 0xB44 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0xB70 SWAP1 PUSH2 0xFD3 JUMP JUMPDEST DUP1 ISZERO PUSH2 0xBBB JUMPI DUP1 PUSH1 0x1F LT PUSH2 0xB92 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0xBBB JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0xB9E JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH2 0x34F JUMP JUMPDEST PUSH0 DUP1 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP5 GT ISZERO PUSH2 0xC00 JUMPI POP PUSH0 SWAP2 POP PUSH1 0x3 SWAP1 POP DUP3 PUSH2 0xC85 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP11 SWAP1 MSTORE PUSH1 0xFF DUP10 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xC51 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD SWAP2 POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0xC7C JUMPI POP PUSH0 SWAP3 POP PUSH1 0x1 SWAP2 POP DUP3 SWAP1 POP PUSH2 0xC85 JUMP JUMPDEST SWAP3 POP PUSH0 SWAP2 POP DUP2 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCA2 JUMPI PUSH2 0xCA2 PUSH2 0x102A JUMP JUMPDEST SUB PUSH2 0xCAB JUMPI POP POP JUMP JUMPDEST PUSH1 0x1 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCBF JUMPI PUSH2 0xCBF PUSH2 0x102A JUMP JUMPDEST SUB PUSH2 0xCDD JUMPI PUSH1 0x40 MLOAD PUSH4 0xF645EEDF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xCF1 JUMPI PUSH2 0xCF1 PUSH2 0x102A JUMP JUMPDEST SUB PUSH2 0xD12 JUMPI PUSH1 0x40 MLOAD PUSH4 0xFCE698F7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x3 DUP3 PUSH1 0x3 DUP2 GT ISZERO PUSH2 0xD26 JUMPI PUSH2 0xD26 PUSH2 0x102A JUMP JUMPDEST SUB PUSH2 0x3BB JUMPI PUSH1 0x40 MLOAD PUSH4 0x35E2F383 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x45A JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xD53 DUP4 PUSH2 0xD84 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP4 ADD SWAP1 SWAP3 MSTORE SWAP2 SWAP3 POP PUSH0 SWAP2 SWAP1 PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY POP POP POP SWAP2 DUP3 MSTORE POP PUSH1 0x20 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0xFF DUP3 AND PUSH1 0x1F DUP2 GT ISZERO PUSH2 0x34F JUMPI PUSH1 0x40 MLOAD PUSH4 0x2CD44AC3 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE DUP1 PUSH1 0x20 DUP5 ADD PUSH1 0x20 DUP7 ADD MCOPY PUSH0 PUSH1 0x20 DUP3 DUP7 ADD ADD MSTORE PUSH1 0x20 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND DUP6 ADD ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0xDEB PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xDAB JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xE08 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xE1E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE27 DUP4 PUSH2 0xDF2 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xE47 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xE50 DUP5 PUSH2 0xDF2 JUMP JUMPDEST SWAP3 POP PUSH2 0xE5E PUSH1 0x20 DUP6 ADD PUSH2 0xDF2 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE7F JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE96 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xDEB DUP3 PUSH2 0xDF2 JUMP JUMPDEST PUSH1 0xFF PUSH1 0xF8 SHL DUP9 AND DUP2 MSTORE PUSH1 0xE0 PUSH1 0x20 DUP3 ADD MSTORE PUSH0 PUSH2 0xEBD PUSH1 0xE0 DUP4 ADD DUP10 PUSH2 0xDAB JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0xECF DUP2 DUP10 PUSH2 0xDAB JUMP JUMPDEST PUSH1 0x60 DUP5 ADD DUP9 SWAP1 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP8 AND PUSH1 0x80 DUP6 ADD MSTORE PUSH1 0xA0 DUP5 ADD DUP7 SWAP1 MSTORE DUP4 DUP2 SUB PUSH1 0xC0 DUP6 ADD MSTORE DUP5 MLOAD DUP1 DUP3 MSTORE PUSH1 0x20 DUP1 DUP8 ADD SWAP4 POP SWAP1 SWAP2 ADD SWAP1 PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xF24 JUMPI DUP4 MLOAD DUP4 MSTORE PUSH1 0x20 SWAP4 DUP5 ADD SWAP4 SWAP1 SWAP3 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0xF06 JUMP JUMPDEST POP SWAP1 SWAP12 SWAP11 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0xE0 DUP9 DUP11 SUB SLT ISZERO PUSH2 0xF4B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF54 DUP9 PUSH2 0xDF2 JUMP JUMPDEST SWAP7 POP PUSH2 0xF62 PUSH1 0x20 DUP10 ADD PUSH2 0xDF2 JUMP JUMPDEST SWAP6 POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP9 ADD CALLDATALOAD SWAP4 POP PUSH1 0x80 DUP9 ADD CALLDATALOAD PUSH1 0xFF DUP2 AND DUP2 EQ PUSH2 0xF85 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 PUSH1 0xA0 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 0xC0 SWAP1 SWAP4 ADD CALLDATALOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xFB3 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xFBC DUP4 PUSH2 0xDF2 JUMP JUMPDEST SWAP2 POP PUSH2 0xFCA PUSH1 0x20 DUP5 ADD PUSH2 0xDF2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xFE7 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1005 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x34F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH5 0x35F0C322AC 0x2D CALLDATACOPY LOG1 REVERT SWAP9 CALLER 0xCD PUSH2 0x22A3 0xB3 DUP7 0xD3 0xE3 0xE6 CHAINID 0x27 0xF9 PUSH22 0xDDF49AFA2AA46B64736F6C634300081A003300000000 ",
							"sourceMap": "398:310:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4293:186;;;;;;:::i;:::-;;:::i;:::-;;;1181:14:20;;1174:22;1156:41;;1144:2;1129:18;4293:186:3;1016:187:20;3144:97:3;3222:12;;3144:97;;;1354:25:20;;;1342:2;1327:18;3144:97:3;1208:177:20;5039:244:3;;;;;;:::i;:::-;;:::i;3002:82::-;;;3075:2;1911:36:20;;1899:2;1884:18;3002:82:3;1769:184:20;2656:112:6;;;:::i;618:87:5:-;;;;;;:::i;:::-;;:::i;:::-;;3299:116:3;;;;;;:::i;:::-;-1:-1:-1;;;;;3390:18:3;3364:7;3390:18;;;;;;;;;;;;3299:116;2293:101:0;;;:::i;1021:158:5:-;;;;;;:::i;:::-;;:::i;2406:143:6:-;;;;;;:::i;:::-;;:::i;5144:557:15:-;;;:::i;:::-;;;;;;;;;;;;;:::i;1638:85:0:-;1710:6;;1638:85;;-1:-1:-1;;;;;1710:6:0;;;3951:51:20;;3939:2;3924:18;1638:85:0;3805:203:20;2276:93:3;;;:::i;3610:178::-;;;;;;:::i;:::-;;:::i;1680:672:6:-;;;;;;:::i;:::-;;:::i;3846:140:3:-;;;;;;:::i;:::-;-1:-1:-1;;;;;3952:18:3;;;3926:7;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3846:140;2543:215:0;;;;;;:::i;:::-;;:::i;2074:89:3:-;2119:13;2151:5;2144:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2074:89;:::o;4293:186::-;4366:4;735:10:9;4420:31:3;735:10:9;4436:7:3;4445:5;4420:8;:31::i;:::-;4468:4;4461:11;;;4293:186;;;;;:::o;5039:244::-;5126:4;735:10:9;5182:37:3;5198:4;735:10:9;5213:5:3;5182:15;:37::i;:::-;5229:26;5239:4;5245:2;5249:5;5229:9;:26::i;:::-;-1:-1:-1;5272:4:3;;5039:244;-1:-1:-1;;;;5039:244:3:o;2656:112:6:-;2715:7;2741:20;:18;:20::i;:::-;2734:27;;2656:112;:::o;618:87:5:-;672:26;735:10:9;692:5:5;672;:26::i;:::-;618:87;:::o;2293:101:0:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1021:158:5:-;1096:45;1112:7;735:10:9;1135:5:5;1096:15;:45::i;:::-;1151:21;1157:7;1166:5;1151;:21::i;:::-;1021:158;;:::o;2406:143:6:-;-1:-1:-1;;;;;624:14:10;;2497:7:6;624:14:10;;;:7;:14;;;;;;2523:19:6;538:107:10;5144:557:15;5242:13;5269:18;5301:21;5336:15;5365:25;5404:12;5430:27;5533:13;:11;:13::i;:::-;5560:16;:14;:16::i;:::-;5668;;;5652:1;5668:16;;;;;;;;;-1:-1:-1;;;5482:212:15;;;-1:-1:-1;5482:212:15;;-1:-1:-1;5590:13:15;;-1:-1:-1;5625:4:15;;-1:-1:-1;5652:1:15;-1:-1:-1;5668:16:15;-1:-1:-1;5482:212:15;-1:-1:-1;5144:557:15:o;2276:93:3:-;2323:13;2355:7;2348:14;;;;;:::i;3610:178::-;3679:4;735:10:9;3733:27:3;735:10:9;3750:2:3;3754:5;3733:9;:27::i;1680:672:6:-;1901:8;1883:15;:26;1879:97;;;1932:33;;-1:-1:-1;;;1932:33:6;;;;;1354:25:20;;;1327:18;;1932:33:6;;;;;;;;1879:97;1986:18;1022:95;2045:5;2052:7;2061:5;2068:16;2078:5;-1:-1:-1;;;;;1121:14:10;819:7;1121:14;;;:7;:14;;;;;:16;;;;;;;;;759:395;2068:16:6;2017:78;;;;;;5990:25:20;;;;-1:-1:-1;;;;;6051:32:20;;;6031:18;;;6024:60;6120:32;;;;6100:18;;;6093:60;6169:18;;;6162:34;6212:19;;;6205:35;6256:19;;;6249:35;;;5962:19;;2017:78:6;;;;;;;;;;;;2007:89;;;;;;1986:110;;2107:12;2122:28;2139:10;2122:16;:28::i;:::-;2107:43;;2161:14;2178:28;2192:4;2198:1;2201;2204;2178:13;:28::i;:::-;2161:45;;2230:5;-1:-1:-1;;;;;2220:15:6;:6;-1:-1:-1;;;;;2220:15:6;;2216:88;;2258:35;;-1:-1:-1;;;2258:35:6;;-1:-1:-1;;;;;6487:32:20;;;2258:35:6;;;6469:51:20;6556:32;;6536:18;;;6529:60;6442:18;;2258:35:6;6295:300:20;2216:88:6;2314:31;2323:5;2330:7;2339:5;2314:8;:31::i;:::-;1869:483;;;1680:672;;;;;;;:::o;2543:215:0:-;1531:13;:11;:13::i;:::-;-1:-1:-1;;;;;2627:22:0;::::1;2623:91;;2672:31;::::0;-1:-1:-1;;;2672:31:0;;2700:1:::1;2672:31;::::0;::::1;3951:51:20::0;3924:18;;2672:31:0::1;3805:203:20::0;2623:91:0::1;2723:28;2742:8;2723:18;:28::i;8989:128:3:-:0;9073:37;9082:5;9089:7;9098:5;9105:4;9073:8;:37::i;:::-;8989:128;;;:::o;10663:477::-;-1:-1:-1;;;;;3952:18:3;;;10762:24;3952:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;-1:-1:-1;;10828:37:3;;10824:310;;10904:5;10885:16;:24;10881:130;;;10936:60;;-1:-1:-1;;;10936:60:3;;-1:-1:-1;;;;;6820:32:20;;10936:60:3;;;6802:51:20;6869:18;;;6862:34;;;6912:18;;;6905:34;;;6775:18;;10936:60:3;6600:345:20;10881:130:3;11052:57;11061:5;11068:7;11096:5;11077:16;:24;11103:5;11052:8;:57::i;:::-;10752:388;10663:477;;;:::o;5656:300::-;-1:-1:-1;;;;;5739:18:3;;5735:86;;5780:30;;-1:-1:-1;;;5780:30:3;;5807:1;5780:30;;;3951:51:20;3924:18;;5780:30:3;3805:203:20;5735:86:3;-1:-1:-1;;;;;5834:16:3;;5830:86;;5873:32;;-1:-1:-1;;;5873:32:3;;5902:1;5873:32;;;3951:51:20;3924:18;;5873:32:3;3805:203:20;5830:86:3;5925:24;5933:4;5939:2;5943:5;5925:7;:24::i;3845:262:15:-;3898:7;3929:4;-1:-1:-1;;;;;3938:11:15;3921:28;;:63;;;;;3970:14;3953:13;:31;3921:63;3917:184;;;-1:-1:-1;4007:22:15;;3845:262::o;3917:184::-;4067:23;4204:80;;;2079:95;4204:80;;;7436:25:20;4226:11:15;7477:18:20;;;7470:34;;;;4239:14:15;7520:18:20;;;7513:34;4255:13:15;7563:18:20;;;7556:34;4278:4:15;7606:19:20;;;7599:61;4168:7:15;;7408:19:20;;4204:80:15;;;;;;;;;;;;4194:91;;;;;;4187:98;;4113:179;;8247:206:3;-1:-1:-1;;;;;8317:21:3;;8313:89;;8361:30;;-1:-1:-1;;;8361:30:3;;8388:1;8361:30;;;3951:51:20;3924:18;;8361:30:3;3805:203:20;8313:89:3;8411:35;8419:7;8436:1;8440:5;8411:7;:35::i;1796:162:0:-;1710:6;;-1:-1:-1;;;;;1710:6:0;735:10:9;1855:23:0;1851:101;;1901:40;;-1:-1:-1;;;1901:40:0;;735:10:9;1901:40:0;;;3951:51:20;3924:18;;1901:40:0;3805:203:20;2912:187:0;3004:6;;;-1:-1:-1;;;;;3020:17:0;;;-1:-1:-1;;;;;;3020:17:0;;;;;;;3052:40;;3004:6;;;3020:17;3004:6;;3052:40;;2985:16;;3052:40;2975:124;2912:187;:::o;6021:126:15:-;6067:13;6099:41;:5;6126:13;6099:26;:41::i;6473:135::-;6522:13;6554:47;:8;6584:16;6554:29;:47::i;4917:176::-;4994:7;5020:66;5053:20;:18;:20::i;:::-;5075:10;3555:4:16;3549:11;-1:-1:-1;;;3573:23:16;;3625:4;3616:14;;3609:39;;;;3677:4;3668:14;;3661:34;3733:4;3718:20;;;3353:401;6803:260:14;6888:7;6908:17;6927:18;6947:16;6967:25;6978:4;6984:1;6987;6990;6967:10;:25::i;:::-;6907:85;;;;;;7002:28;7014:5;7021:8;7002:11;:28::i;:::-;-1:-1:-1;7047:9:14;;6803:260;-1:-1:-1;;;;;;6803:260:14:o;9949:432:3:-;-1:-1:-1;;;;;10061:19:3;;10057:89;;10103:32;;-1:-1:-1;;;10103:32:3;;10132:1;10103:32;;;3951:51:20;3924:18;;10103:32:3;3805:203:20;10057:89:3;-1:-1:-1;;;;;10159:21:3;;10155:90;;10203:31;;-1:-1:-1;;;10203:31:3;;10231:1;10203:31;;;3951:51:20;3924:18;;10203:31:3;3805:203:20;10155:90:3;-1:-1:-1;;;;;10254:18:3;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;:35;;;10299:76;;;;10349:7;-1:-1:-1;;;;;10333:31:3;10342:5;-1:-1:-1;;;;;10333:31:3;;10358:5;10333:31;;;;1354:25:20;;1342:2;1327:18;;1208:177;10333:31:3;;;;;;;;9949:432;;;;:::o;6271:1107::-;-1:-1:-1;;;;;6360:18:3;;6356:540;;6512:5;6496:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;6356:540:3;;-1:-1:-1;6356:540:3;;-1:-1:-1;;;;;6570:15:3;;6548:19;6570:15;;;;;;;;;;;6603:19;;;6599:115;;;6649:50;;-1:-1:-1;;;6649:50:3;;-1:-1:-1;;;;;6820:32:20;;6649:50:3;;;6802:51:20;6869:18;;;6862:34;;;6912:18;;;6905:34;;;6775:18;;6649:50:3;6600:345:20;6599:115:3;-1:-1:-1;;;;;6834:15:3;;:9;:15;;;;;;;;;;6852:19;;;;6834:37;;6356:540;-1:-1:-1;;;;;6910:16:3;;6906:425;;7073:12;:21;;;;;;;6906:425;;;-1:-1:-1;;;;;7284:13:3;;:9;:13;;;;;;;;;;:22;;;;;;6906:425;7361:2;-1:-1:-1;;;;;7346:25:3;7355:4;-1:-1:-1;;;;;7346:25:3;;7365:5;7346:25;;;;1354::20;;1342:2;1327:18;;1208:177;7346:25:3;;;;;;;;6271:1107;;;:::o;3385:267:11:-;3479:13;1390:66;3508:46;;3504:142;;3577:15;3586:5;3577:8;:15::i;:::-;3570:22;;;;3504:142;3630:5;3623:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5140:1530:14;5266:7;;;6199:66;6186:79;;6182:164;;;-1:-1:-1;6297:1:14;;-1:-1:-1;6301:30:14;;-1:-1:-1;6333:1:14;6281:54;;6182:164;6457:24;;;6440:14;6457:24;;;;;;;;;7898:25:20;;;7971:4;7959:17;;7939:18;;;7932:45;;;;7993:18;;;7986:34;;;8036:18;;;8029:34;;;6457:24:14;;7870:19:20;;6457:24:14;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6457:24:14;;-1:-1:-1;;6457:24:14;;;-1:-1:-1;;;;;;;6495:20:14;;6491:113;;-1:-1:-1;6547:1:14;;-1:-1:-1;6551:29:14;;-1:-1:-1;6547:1:14;;-1:-1:-1;6531:62:14;;6491:113;6622:6;-1:-1:-1;6630:20:14;;-1:-1:-1;6630:20:14;;-1:-1:-1;5140:1530:14;;;;;;;;;:::o;7196:532::-;7291:20;7282:5;:29;;;;;;;;:::i;:::-;;7278:444;;7196:532;;:::o;7278:444::-;7387:29;7378:5;:38;;;;;;;;:::i;:::-;;7374:348;;7439:23;;-1:-1:-1;;;7439:23:14;;;;;;;;;;;7374:348;7492:35;7483:5;:44;;;;;;;;:::i;:::-;;7479:243;;7550:46;;-1:-1:-1;;;7550:46:14;;;;;1354:25:20;;;1327:18;;7550:46:14;1208:177:20;7479:243:14;7626:30;7617:5;:39;;;;;;;;:::i;:::-;;7613:109;;7679:32;;-1:-1:-1;;;7679:32:14;;;;;1354:25:20;;;1327:18;;7679:32:14;1208:177:20;2078:405:11;2137:13;2162:11;2176:16;2187:4;2176:10;:16::i;:::-;2300:14;;;2311:2;2300:14;;;;;;;;;2162:30;;-1:-1:-1;2280:17:11;;2300:14;;;;;;;;;-1:-1:-1;;;2390:16:11;;;-1:-1:-1;2435:4:11;2426:14;;2419:28;;;;-1:-1:-1;2390:16:11;2078:405::o;2555:245::-;2616:7;2688:4;2652:40;;2715:2;2706:11;;2702:69;;;2740:20;;-1:-1:-1;;;2740:20:11;;;;;;;;;;;14:289:20;56:3;94:5;88:12;121:6;116:3;109:19;177:6;170:4;163:5;159:16;152:4;147:3;143:14;137:47;229:1;222:4;213:6;208:3;204:16;200:27;193:38;292:4;285:2;281:7;276:2;268:6;264:15;260:29;255:3;251:39;247:50;240:57;;;14:289;;;;:::o;308:220::-;457:2;446:9;439:21;420:4;477:45;518:2;507:9;503:18;495:6;477:45;:::i;:::-;469:53;308:220;-1:-1:-1;;;308:220:20:o;533:173::-;601:20;;-1:-1:-1;;;;;650:31:20;;640:42;;630:70;;696:1;693;686:12;630:70;533:173;;;:::o;711:300::-;779:6;787;840:2;828:9;819:7;815:23;811:32;808:52;;;856:1;853;846:12;808:52;879:29;898:9;879:29;:::i;:::-;869:39;977:2;962:18;;;;949:32;;-1:-1:-1;;;711:300:20:o;1390:374::-;1467:6;1475;1483;1536:2;1524:9;1515:7;1511:23;1507:32;1504:52;;;1552:1;1549;1542:12;1504:52;1575:29;1594:9;1575:29;:::i;:::-;1565:39;;1623:38;1657:2;1646:9;1642:18;1623:38;:::i;:::-;1390:374;;1613:48;;-1:-1:-1;;;1730:2:20;1715:18;;;;1702:32;;1390:374::o;2140:226::-;2199:6;2252:2;2240:9;2231:7;2227:23;2223:32;2220:52;;;2268:1;2265;2258:12;2220:52;-1:-1:-1;2313:23:20;;2140:226;-1:-1:-1;2140:226:20:o;2371:186::-;2430:6;2483:2;2471:9;2462:7;2458:23;2454:32;2451:52;;;2499:1;2496;2489:12;2451:52;2522:29;2541:9;2522:29;:::i;2562:1238::-;2968:3;2963;2959:13;2951:6;2947:26;2936:9;2929:45;3010:3;3005:2;2994:9;2990:18;2983:31;2910:4;3037:46;3078:3;3067:9;3063:19;3055:6;3037:46;:::i;:::-;3131:9;3123:6;3119:22;3114:2;3103:9;3099:18;3092:50;3165:33;3191:6;3183;3165:33;:::i;:::-;3229:2;3214:18;;3207:34;;;-1:-1:-1;;;;;3278:32:20;;3272:3;3257:19;;3250:61;3298:3;3327:19;;3320:35;;;3392:22;;;3386:3;3371:19;;3364:51;3464:13;;3486:22;;;3536:2;3562:15;;;;-1:-1:-1;3524:15:20;;;;-1:-1:-1;3605:169:20;3619:6;3616:1;3613:13;3605:169;;;3680:13;;3668:26;;3723:2;3749:15;;;;3714:12;;;;3641:1;3634:9;3605:169;;;-1:-1:-1;3791:3:20;;2562:1238;-1:-1:-1;;;;;;;;;;;2562:1238:20:o;4013:903::-;4124:6;4132;4140;4148;4156;4164;4172;4225:3;4213:9;4204:7;4200:23;4196:33;4193:53;;;4242:1;4239;4232:12;4193:53;4265:29;4284:9;4265:29;:::i;:::-;4255:39;;4313:38;4347:2;4336:9;4332:18;4313:38;:::i;:::-;4303:48;-1:-1:-1;4420:2:20;4405:18;;4392:32;;-1:-1:-1;4521:2:20;4506:18;;4493:32;;-1:-1:-1;4603:3:20;4588:19;;4575:33;4652:4;4639:18;;4627:31;;4617:59;;4672:1;4669;4662:12;4617:59;4013:903;;;;-1:-1:-1;4013:903:20;;;;4695:7;4775:3;4760:19;;4747:33;;-1:-1:-1;4879:3:20;4864:19;;;4851:33;;4013:903;-1:-1:-1;;4013:903:20:o;4921:260::-;4989:6;4997;5050:2;5038:9;5029:7;5025:23;5021:32;5018:52;;;5066:1;5063;5056:12;5018:52;5089:29;5108:9;5089:29;:::i;:::-;5079:39;;5137:38;5171:2;5160:9;5156:18;5137:38;:::i;:::-;5127:48;;4921:260;;;;;:::o;5186:380::-;5265:1;5261:12;;;;5308;;;5329:61;;5383:4;5375:6;5371:17;5361:27;;5329:61;5436:2;5428:6;5425:14;5405:18;5402:38;5399:161;;5482:10;5477:3;5473:20;5470:1;5463:31;5517:4;5514:1;5507:15;5545:4;5542:1;5535:15;5399:161;;5186:380;;;:::o;6950:222::-;7015:9;;;7036:10;;;7033:133;;;7088:10;7083:3;7079:20;7076:1;7069:31;7123:4;7120:1;7113:15;7151:4;7148:1;7141:15;8074:127;8135:10;8130:3;8126:20;8123:1;8116:31;8166:4;8163:1;8156:15;8190:4;8187:1;8180:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "842400",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"DOMAIN_SEPARATOR()": "infinite",
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24758",
								"balanceOf(address)": "2626",
								"burn(uint256)": "50983",
								"burnFrom(address,uint256)": "infinite",
								"decimals()": "199",
								"eip712Domain()": "infinite",
								"name()": "infinite",
								"nonces(address)": "2613",
								"owner()": "2389",
								"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "infinite",
								"renounceOwnership()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2348",
								"transfer(address,uint256)": "51260",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28443"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "160"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "CALLVALUE",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "ISZERO",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 476,
									"end": 705,
									"name": "JUMPI",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 476,
									"end": 705,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "REVERT",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "tag",
									"source": 19,
									"value": "1"
								},
								{
									"begin": 476,
									"end": 705,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 476,
									"end": 705,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "PUSHSIZE",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "CODESIZE",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "SUB",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "PUSHSIZE",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "DUP4",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "ADD",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "PUSH",
									"source": 19,
									"value": "40"
								},
								{
									"begin": 476,
									"end": 705,
									"name": "DUP2",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "MSTORE",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "2"
								},
								{
									"begin": 476,
									"end": 705,
									"name": "SWAP2",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "3"
								},
								{
									"begin": 476,
									"end": 705,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "tag",
									"source": 19,
									"value": "2"
								},
								{
									"begin": 476,
									"end": 705,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 619,
									"end": 631,
									"name": "DUP1",
									"source": 19
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 6,
									"value": "40"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 6,
									"value": "11"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "PUSH",
									"source": 6,
									"value": "20"
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "ADD",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1110511116481510551148119492515391"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "7A"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 1574,
									"end": 1626,
									"name": "POP",
									"source": 6
								},
								{
									"begin": 1613,
									"end": 1617,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 15,
									"value": "1"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "PUSH",
									"source": 15,
									"value": "20"
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "31"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F8"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3328,
									"end": 3759,
									"name": "POP",
									"source": 15
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1110511116481510551148119492515391"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "7A"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "A"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "44414444592054415445"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "B0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1896,
									"end": 2009,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1970,
									"end": 1975,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1967,
									"name": "PUSH",
									"source": 3,
									"value": "3"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1962,
									"end": 1975,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "tag",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1962,
									"end": 1975,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 1995,
									"end": 2002,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 1992,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "11"
								},
								{
									"begin": 1985,
									"end": 2002,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "tag",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 1985,
									"end": 2002,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "14"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "SWAP2",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3401,
									"end": 3405,
									"name": "DUP4",
									"source": 15
								},
								{
									"begin": 3401,
									"end": 3405,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3432,
									"end": 3445,
									"name": "PUSH",
									"source": 15,
									"value": "5"
								},
								{
									"begin": 3401,
									"end": 3431,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "15"
								},
								{
									"begin": 3401,
									"end": 3446,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 15
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "tag",
									"source": 15,
									"value": "14"
								},
								{
									"begin": 3401,
									"end": 3446,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "PUSH",
									"source": 15,
									"value": "120"
								},
								{
									"begin": 3393,
									"end": 3446,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "16"
								},
								{
									"begin": 3467,
									"end": 3474,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 3501,
									"end": 3517,
									"name": "PUSH",
									"source": 15,
									"value": "6"
								},
								{
									"begin": 3467,
									"end": 3500,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "15"
								},
								{
									"begin": 3467,
									"end": 3518,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 15
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "tag",
									"source": 15,
									"value": "16"
								},
								{
									"begin": 3467,
									"end": 3518,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "PUSH",
									"source": 15,
									"value": "140"
								},
								{
									"begin": 3456,
									"end": 3518,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "PUSH",
									"source": 15,
									"value": "20"
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "DUP5",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP2",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "SWAP2",
									"source": 15
								},
								{
									"begin": 3542,
									"end": 3564,
									"name": "KECCAK256",
									"source": 15
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "PUSH",
									"source": 15,
									"value": "E0"
								},
								{
									"begin": 3528,
									"end": 3564,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": 3591,
									"end": 3616,
									"name": "KECCAK256",
									"source": 15
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "PUSH",
									"source": 15,
									"value": "100"
								},
								{
									"begin": 3574,
									"end": 3616,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3644,
									"end": 3657,
									"name": "CHAINID",
									"source": 15
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "PUSH",
									"source": 15,
									"value": "A0"
								},
								{
									"begin": 3627,
									"end": 3657,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "PUSH [tag]",
									"source": 15,
									"value": "17"
								},
								{
									"begin": 4226,
									"end": 4237,
									"name": "PUSH",
									"source": 15,
									"value": "E0"
								},
								{
									"begin": 4226,
									"end": 4237,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 4239,
									"end": 4253,
									"name": "PUSH",
									"source": 15,
									"value": "100"
								},
								{
									"begin": 4239,
									"end": 4253,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 2079,
									"end": 2174,
									"name": "PUSH",
									"source": 15,
									"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 15,
									"value": "20"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP3",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": 5154,
									"end": 5179,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 5195,
									"end": 5213,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 5195,
									"end": 5213,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 5195,
									"end": 5213,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5188,
									"end": 5222,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 5188,
									"end": 5222,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 5188,
									"end": 5222,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 5188,
									"end": 5222,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 5238,
									"end": 5256,
									"name": "PUSH",
									"source": 20,
									"value": "60"
								},
								{
									"begin": 5238,
									"end": 5256,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 5238,
									"end": 5256,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5231,
									"end": 5265,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4255,
									"end": 4268,
									"name": "CHAINID",
									"source": 15
								},
								{
									"begin": 5281,
									"end": 5299,
									"name": "PUSH",
									"source": 20,
									"value": "80"
								},
								{
									"begin": 5281,
									"end": 5299,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 5281,
									"end": 5299,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5274,
									"end": 5308,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4278,
									"end": 4282,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 5324,
									"end": 5343,
									"name": "PUSH",
									"source": 20,
									"value": "A0"
								},
								{
									"begin": 5324,
									"end": 5343,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 5324,
									"end": 5343,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5317,
									"end": 5378,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 4168,
									"end": 4175,
									"name": "PUSH",
									"source": 15,
									"value": "0"
								},
								{
									"begin": 4168,
									"end": 4175,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 5126,
									"end": 5145,
									"name": "PUSH",
									"source": 20,
									"value": "C0"
								},
								{
									"begin": 5126,
									"end": 5145,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 15,
									"value": "20"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP4",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SUB",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SUB",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "DUP2",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "PUSH",
									"source": 15,
									"value": "40"
								},
								{
									"begin": 4204,
									"end": 4284,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "DUP1",
									"source": 15
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "MLOAD",
									"source": 15
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "PUSH",
									"source": 15,
									"value": "20"
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "ADD",
									"source": 15
								},
								{
									"begin": 4194,
									"end": 4285,
									"name": "KECCAK256",
									"source": 15
								},
								{
									"begin": 4187,
									"end": 4285,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 4187,
									"end": 4285,
									"name": "POP",
									"source": 15
								},
								{
									"begin": 4113,
									"end": 4292,
									"name": "SWAP1",
									"source": 15
								},
								{
									"begin": 4113,
									"end": 4292,
									"name": "JUMP",
									"source": 15
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "tag",
									"source": 15,
									"value": "17"
								},
								{
									"begin": 3692,
									"end": 3715,
									"name": "JUMPDEST",
									"source": 15
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "PUSH",
									"source": 15,
									"value": "80"
								},
								{
									"begin": 3667,
									"end": 3715,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3747,
									"end": 3751,
									"name": "ADDRESS",
									"source": 15
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "PUSH",
									"source": 15,
									"value": "C0"
								},
								{
									"begin": 3725,
									"end": 3752,
									"name": "MSTORE",
									"source": 15
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1273,
									"end": 1299,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "21"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1E4FBDF7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 1350,
									"end": 1351,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 3096,
									"end": 3147,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 3069,
									"end": 3087,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 3069,
									"end": 3087,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "tag",
									"source": 0,
									"value": "22"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 1322,
									"end": 1353,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "tag",
									"source": 0,
									"value": "21"
								},
								{
									"begin": 1269,
									"end": 1364,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 1392,
									"end": 1404,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1391,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "25"
								},
								{
									"begin": 1373,
									"end": 1405,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "tag",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 1373,
									"end": 1405,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 649,
									"end": 697,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "27"
								},
								{
									"begin": 655,
									"end": 665,
									"modifierDepth": 3,
									"name": "CALLER",
									"source": 19
								},
								{
									"begin": 680,
									"end": 696,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "30"
								},
								{
									"begin": 3075,
									"end": 3077,
									"name": "PUSH",
									"source": 3,
									"value": "12"
								},
								{
									"begin": 680,
									"end": 682,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "A"
								},
								{
									"begin": 680,
									"end": 696,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "31"
								},
								{
									"begin": 680,
									"end": 696,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 680,
									"end": 696,
									"modifierDepth": 3,
									"name": "tag",
									"source": 19,
									"value": "30"
								},
								{
									"begin": 680,
									"end": 696,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 667,
									"end": 696,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "32"
								},
								{
									"begin": 667,
									"end": 696,
									"name": "SWAP1",
									"source": 19
								},
								{
									"begin": 667,
									"end": 677,
									"modifierDepth": 3,
									"name": "PUSH",
									"source": 19,
									"value": "3B9ACA00"
								},
								{
									"begin": 667,
									"end": 696,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "33"
								},
								{
									"begin": 667,
									"end": 696,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 667,
									"end": 696,
									"modifierDepth": 3,
									"name": "tag",
									"source": 19,
									"value": "32"
								},
								{
									"begin": 667,
									"end": 696,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 649,
									"end": 654,
									"modifierDepth": 3,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "34"
								},
								{
									"begin": 649,
									"end": 697,
									"jumpType": "[in]",
									"modifierDepth": 3,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 649,
									"end": 697,
									"modifierDepth": 3,
									"name": "tag",
									"source": 19,
									"value": "27"
								},
								{
									"begin": 649,
									"end": 697,
									"modifierDepth": 3,
									"name": "JUMPDEST",
									"source": 19
								},
								{
									"begin": 476,
									"end": 705,
									"name": "POP",
									"source": 19
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH [tag]",
									"source": 19,
									"value": "81"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "JUMP",
									"source": 19
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "tag",
									"source": 11,
									"value": "15"
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3010,
									"end": 3021,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 3059,
									"end": 3061,
									"name": "PUSH",
									"source": 11,
									"value": "20"
								},
								{
									"begin": 3043,
									"end": 3048,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 3037,
									"end": 3056,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 3037,
									"end": 3061,
									"name": "LT",
									"source": 11
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "37"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "38"
								},
								{
									"begin": 3098,
									"end": 3103,
									"name": "DUP4",
									"source": 11
								},
								{
									"begin": 3084,
									"end": 3097,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "39"
								},
								{
									"begin": 3084,
									"end": 3104,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "tag",
									"source": 11,
									"value": "38"
								},
								{
									"begin": 3084,
									"end": 3104,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 3077,
									"end": 3104,
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 11,
									"value": "37"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 3161,
									"end": 3166,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "43"
								},
								{
									"begin": 3176,
									"end": 3181,
									"name": "DUP5",
									"source": 11
								},
								{
									"begin": 3161,
									"end": 3166,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "11"
								},
								{
									"begin": 3135,
									"end": 3181,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "tag",
									"source": 11,
									"value": "43"
								},
								{
									"begin": 3135,
									"end": 3181,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "PUSH",
									"source": 11,
									"value": "FF"
								},
								{
									"begin": 1390,
									"end": 1456,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "tag",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 3033,
									"end": 3248,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2914,
									"end": 3254,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 2914,
									"end": 3254,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "tag",
									"source": 0,
									"value": "25"
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "PUSH",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP4",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 3020,
									"end": 3037,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 3004,
									"end": 3010,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "PUSH",
									"source": 0,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 2985,
									"end": 3001,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 3052,
									"end": 3092,
									"name": "LOG3",
									"source": 0
								},
								{
									"begin": 2975,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 2912,
									"end": 3099,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 7721,
									"end": 7929,
									"name": "tag",
									"source": 3,
									"value": "34"
								},
								{
									"begin": 7721,
									"end": 7929,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7791,
									"end": 7812,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 7791,
									"end": 7812,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 7787,
									"end": 7878,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "50"
								},
								{
									"begin": 7787,
									"end": 7878,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "EC442F05"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 7864,
									"end": 7865,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 3096,
									"end": 3147,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 3069,
									"end": 3087,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 3069,
									"end": 3087,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 7835,
									"end": 7867,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "22"
								},
								{
									"begin": 2950,
									"end": 3153,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 7787,
									"end": 7878,
									"name": "tag",
									"source": 3,
									"value": "50"
								},
								{
									"begin": 7787,
									"end": 7878,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 7887,
									"end": 7922,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "52"
								},
								{
									"begin": 7903,
									"end": 7904,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 7907,
									"end": 7914,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 7916,
									"end": 7921,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 7887,
									"end": 7894,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "53"
								},
								{
									"begin": 7887,
									"end": 7922,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 7887,
									"end": 7922,
									"name": "tag",
									"source": 3,
									"value": "52"
								},
								{
									"begin": 7887,
									"end": 7922,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 7721,
									"end": 7929,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 7721,
									"end": 7929,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 7721,
									"end": 7929,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "tag",
									"source": 11,
									"value": "39"
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1773,
									"end": 1784,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 1796,
									"end": 1813,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1822,
									"end": 1825,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1796,
									"end": 1826,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1796,
									"end": 1826,
									"name": "POP",
									"source": 11
								},
								{
									"begin": 1854,
									"end": 1856,
									"name": "PUSH",
									"source": 11,
									"value": "1F"
								},
								{
									"begin": 1840,
									"end": 1844,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1840,
									"end": 1851,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 1840,
									"end": 1856,
									"name": "GT",
									"source": 11
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "ISZERO",
									"source": 11
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "55"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": 1893,
									"end": 1896,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 11,
									"value": "40"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "305A27A9"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "ADD",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "22"
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP2",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "SWAP1",
									"source": 11
								},
								{
									"begin": 1879,
									"end": 1897,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "57"
								},
								{
									"begin": 1879,
									"end": 1897,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "tag",
									"source": 11,
									"value": "55"
								},
								{
									"begin": 1836,
									"end": 1908,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1974,
									"end": 1985,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 1974,
									"end": 1985,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "58"
								},
								{
									"begin": 1974,
									"end": 1978,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "59"
								},
								{
									"begin": 1957,
									"end": 1970,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "tag",
									"source": 11,
									"value": "58"
								},
								{
									"begin": 1957,
									"end": 1970,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "OR",
									"source": 11
								},
								{
									"begin": 1949,
									"end": 1985,
									"name": "SWAP4",
									"source": 11
								},
								{
									"begin": 1708,
									"end": 1994,
									"name": "SWAP3",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1708,
									"end": 1994,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 11
								},
								{
									"begin": 6271,
									"end": 7378,
									"name": "tag",
									"source": 3,
									"value": "53"
								},
								{
									"begin": 6271,
									"end": 7378,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6360,
									"end": 6378,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 6360,
									"end": 6378,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "62"
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 6512,
									"end": 6517,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 6496,
									"end": 6508,
									"name": "PUSH",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 6496,
									"end": 6508,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "63"
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "64"
								},
								{
									"begin": 6496,
									"end": 6517,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "tag",
									"source": 3,
									"value": "63"
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 6496,
									"end": 6517,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "65"
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "tag",
									"source": 3,
									"value": "62"
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 6548,
									"end": 6567,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "KECCAK256",
									"source": 3
								},
								{
									"begin": 6570,
									"end": 6585,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 6603,
									"end": 6622,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 6603,
									"end": 6622,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 6603,
									"end": 6622,
									"name": "LT",
									"source": 3
								},
								{
									"begin": 6599,
									"end": 6714,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 6599,
									"end": 6714,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "66"
								},
								{
									"begin": 6599,
									"end": 6714,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "391434E3"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6464,
									"end": 6496,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 6464,
									"end": 6496,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 6446,
									"end": 6497,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 6513,
									"end": 6531,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 6513,
									"end": 6531,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 6513,
									"end": 6531,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 6506,
									"end": 6540,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 6506,
									"end": 6540,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 6506,
									"end": 6540,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 6556,
									"end": 6574,
									"name": "PUSH",
									"source": 20,
									"value": "44"
								},
								{
									"begin": 6556,
									"end": 6574,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 6556,
									"end": 6574,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 6549,
									"end": 6583,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 6549,
									"end": 6583,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 6549,
									"end": 6583,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 6419,
									"end": 6437,
									"name": "PUSH",
									"source": 20,
									"value": "64"
								},
								{
									"begin": 6419,
									"end": 6437,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 6649,
									"end": 6699,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "22"
								},
								{
									"begin": 6244,
									"end": 6589,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 6599,
									"end": 6714,
									"name": "tag",
									"source": 3,
									"value": "66"
								},
								{
									"begin": 6599,
									"end": 6714,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "DUP5",
									"source": 3
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 6834,
									"end": 6843,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 6834,
									"end": 6849,
									"name": "KECCAK256",
									"source": 3
								},
								{
									"begin": 6852,
									"end": 6871,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 6852,
									"end": 6871,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 6852,
									"end": 6871,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 6852,
									"end": 6871,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 6834,
									"end": 6871,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 6834,
									"end": 6871,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "tag",
									"source": 3,
									"value": "65"
								},
								{
									"begin": 6356,
									"end": 6896,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 6910,
									"end": 6926,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 6910,
									"end": 6926,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "69"
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 7073,
									"end": 7085,
									"name": "PUSH",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 7073,
									"end": 7094,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "70"
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "tag",
									"source": 3,
									"value": "69"
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7293,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7297,
									"name": "KECCAK256",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "SLOAD",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 7284,
									"end": 7306,
									"name": "SSTORE",
									"source": 3
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "tag",
									"source": 3,
									"value": "70"
								},
								{
									"begin": 6906,
									"end": 7331,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 7361,
									"end": 7363,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 7355,
									"end": 7359,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "AND",
									"source": 3
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "PUSH",
									"source": 3,
									"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
								},
								{
									"begin": 7365,
									"end": 7370,
									"name": "DUP4",
									"source": 3
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "71"
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 6740,
									"end": 6765,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 6740,
									"end": 6765,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 6728,
									"end": 6730,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 6713,
									"end": 6731,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 6713,
									"end": 6731,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 6594,
									"end": 6771,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "tag",
									"source": 3,
									"value": "71"
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "SUB",
									"source": 3
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 7346,
									"end": 7371,
									"name": "LOG3",
									"source": 3
								},
								{
									"begin": 6271,
									"end": 7378,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 6271,
									"end": 7378,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 6271,
									"end": 7378,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 6271,
									"end": 7378,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 14,
									"end": 304,
									"name": "tag",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 14,
									"end": 304,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 84,
									"end": 90,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 137,
									"end": 139,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 125,
									"end": 134,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 116,
									"end": 123,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 112,
									"end": 135,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 108,
									"end": 140,
									"name": "SLT",
									"source": 20
								},
								{
									"begin": 105,
									"end": 157,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 105,
									"end": 157,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "83"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 153,
									"end": 154,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 150,
									"end": 151,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 143,
									"end": 155,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 105,
									"end": 157,
									"name": "tag",
									"source": 20,
									"value": "83"
								},
								{
									"begin": 105,
									"end": 157,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 179,
									"end": 195,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 179,
									"end": 195,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 224,
									"end": 255,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 224,
									"end": 255,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 214,
									"end": 256,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 214,
									"end": 256,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 204,
									"end": 274,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "84"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 270,
									"end": 271,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 267,
									"end": 268,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 260,
									"end": 272,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 204,
									"end": 274,
									"name": "tag",
									"source": 20,
									"value": "84"
								},
								{
									"begin": 204,
									"end": 274,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 293,
									"end": 298,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 14,
									"end": 304,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 14,
									"end": 304,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 309,
									"end": 436,
									"name": "tag",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 309,
									"end": 436,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 370,
									"end": 380,
									"name": "PUSH",
									"source": 20,
									"value": "4E487B71"
								},
								{
									"begin": 365,
									"end": 368,
									"name": "PUSH",
									"source": 20,
									"value": "E0"
								},
								{
									"begin": 361,
									"end": 381,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 358,
									"end": 359,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 351,
									"end": 382,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 401,
									"end": 405,
									"name": "PUSH",
									"source": 20,
									"value": "41"
								},
								{
									"begin": 398,
									"end": 399,
									"name": "PUSH",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 391,
									"end": 406,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 425,
									"end": 429,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 422,
									"end": 423,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 415,
									"end": 430,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 441,
									"end": 821,
									"name": "tag",
									"source": 20,
									"value": "74"
								},
								{
									"begin": 441,
									"end": 821,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 520,
									"end": 521,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 516,
									"end": 528,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 516,
									"end": 528,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 516,
									"end": 528,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 516,
									"end": 528,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 563,
									"end": 575,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 563,
									"end": 575,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 563,
									"end": 575,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 584,
									"end": 645,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "87"
								},
								{
									"begin": 584,
									"end": 645,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 638,
									"end": 642,
									"name": "PUSH",
									"source": 20,
									"value": "7F"
								},
								{
									"begin": 630,
									"end": 636,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 626,
									"end": 643,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 616,
									"end": 643,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 616,
									"end": 643,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 584,
									"end": 645,
									"name": "tag",
									"source": 20,
									"value": "87"
								},
								{
									"begin": 584,
									"end": 645,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 691,
									"end": 693,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 683,
									"end": 689,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 680,
									"end": 694,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 660,
									"end": 678,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 657,
									"end": 695,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 654,
									"end": 815,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "88"
								},
								{
									"begin": 654,
									"end": 815,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 737,
									"end": 747,
									"name": "PUSH",
									"source": 20,
									"value": "4E487B71"
								},
								{
									"begin": 732,
									"end": 735,
									"name": "PUSH",
									"source": 20,
									"value": "E0"
								},
								{
									"begin": 728,
									"end": 748,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 725,
									"end": 726,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 718,
									"end": 749,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 772,
									"end": 776,
									"name": "PUSH",
									"source": 20,
									"value": "22"
								},
								{
									"begin": 769,
									"end": 770,
									"name": "PUSH",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 762,
									"end": 777,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 800,
									"end": 804,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 797,
									"end": 798,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 790,
									"end": 805,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 654,
									"end": 815,
									"name": "tag",
									"source": 20,
									"value": "88"
								},
								{
									"begin": 654,
									"end": 815,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 654,
									"end": 815,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 441,
									"end": 821,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 441,
									"end": 821,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 441,
									"end": 821,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 441,
									"end": 821,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 952,
									"end": 1470,
									"name": "tag",
									"source": 20,
									"value": "76"
								},
								{
									"begin": 952,
									"end": 1470,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1054,
									"end": 1056,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 1049,
									"end": 1052,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1046,
									"end": 1057,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 1043,
									"end": 1464,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1043,
									"end": 1464,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "91"
								},
								{
									"begin": 1043,
									"end": 1464,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1090,
									"end": 1095,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 1087,
									"end": 1088,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1080,
									"end": 1096,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 1134,
									"end": 1138,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 1131,
									"end": 1132,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1121,
									"end": 1139,
									"name": "KECCAK256",
									"source": 20
								},
								{
									"begin": 1204,
									"end": 1206,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 1192,
									"end": 1202,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 1188,
									"end": 1207,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1185,
									"end": 1186,
									"name": "PUSH",
									"source": 20,
									"value": "5"
								},
								{
									"begin": 1181,
									"end": 1208,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 1175,
									"end": 1179,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1171,
									"end": 1209,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1240,
									"end": 1244,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 1228,
									"end": 1238,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1225,
									"end": 1245,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 1222,
									"end": 1269,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1222,
									"end": 1269,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "92"
								},
								{
									"begin": 1222,
									"end": 1269,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1263,
									"end": 1267,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 1222,
									"end": 1269,
									"name": "tag",
									"source": 20,
									"value": "92"
								},
								{
									"begin": 1222,
									"end": 1269,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1318,
									"end": 1320,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 1313,
									"end": 1316,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 1309,
									"end": 1321,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1306,
									"end": 1307,
									"name": "PUSH",
									"source": 20,
									"value": "5"
								},
								{
									"begin": 1302,
									"end": 1322,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 1296,
									"end": 1300,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 1292,
									"end": 1323,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1282,
									"end": 1323,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 1282,
									"end": 1323,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "tag",
									"source": 20,
									"value": "93"
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1391,
									"end": 1393,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1384,
									"end": 1389,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1381,
									"end": 1394,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "95"
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1450,
									"end": 1451,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 1436,
									"end": 1452,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1436,
									"end": 1452,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 1417,
									"end": 1418,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 1406,
									"end": 1419,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "93"
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "tag",
									"source": 20,
									"value": "95"
								},
								{
									"begin": 1373,
									"end": 1454,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1377,
									"end": 1380,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1377,
									"end": 1380,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 1043,
									"end": 1464,
									"name": "tag",
									"source": 20,
									"value": "91"
								},
								{
									"begin": 1043,
									"end": 1464,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 952,
									"end": 1470,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 952,
									"end": 1470,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 952,
									"end": 1470,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 952,
									"end": 1470,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1646,
									"end": 2945,
									"name": "tag",
									"source": 20,
									"value": "11"
								},
								{
									"begin": 1646,
									"end": 2945,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1766,
									"end": 1776,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1766,
									"end": 1776,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1788,
									"end": 1818,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1788,
									"end": 1818,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 1785,
									"end": 1841,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 1785,
									"end": 1841,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "99"
								},
								{
									"begin": 1785,
									"end": 1841,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 1821,
									"end": 1839,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "99"
								},
								{
									"begin": 1821,
									"end": 1839,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "73"
								},
								{
									"begin": 1821,
									"end": 1839,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1821,
									"end": 1839,
									"name": "tag",
									"source": 20,
									"value": "99"
								},
								{
									"begin": 1821,
									"end": 1839,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1850,
									"end": 1947,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "100"
								},
								{
									"begin": 1940,
									"end": 1946,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 1900,
									"end": 1938,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "101"
								},
								{
									"begin": 1932,
									"end": 1936,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 1926,
									"end": 1937,
									"name": "SLOAD",
									"source": 20
								},
								{
									"begin": 1900,
									"end": 1938,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "74"
								},
								{
									"begin": 1900,
									"end": 1938,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1900,
									"end": 1938,
									"name": "tag",
									"source": 20,
									"value": "101"
								},
								{
									"begin": 1900,
									"end": 1938,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1894,
									"end": 1898,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 1850,
									"end": 1947,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "76"
								},
								{
									"begin": 1850,
									"end": 1947,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 1850,
									"end": 1947,
									"name": "tag",
									"source": 20,
									"value": "100"
								},
								{
									"begin": 1850,
									"end": 1947,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 1996,
									"end": 2000,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 2027,
									"end": 2029,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 2016,
									"end": 2030,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 2016,
									"end": 2030,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 2044,
									"end": 2045,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "103"
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 2732,
									"end": 2733,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 2749,
									"end": 2755,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 2746,
									"end": 2835,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 2746,
									"end": 2835,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "104"
								},
								{
									"begin": 2746,
									"end": 2835,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2801,
									"end": 2820,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2801,
									"end": 2820,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 2801,
									"end": 2820,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2795,
									"end": 2821,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 2746,
									"end": 2835,
									"name": "tag",
									"source": 20,
									"value": "104"
								},
								{
									"begin": 2746,
									"end": 2835,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 1603,
									"end": 1604,
									"name": "PUSH",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 1599,
									"end": 1610,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 1599,
									"end": 1610,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 1599,
									"end": 1610,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 1595,
									"end": 1619,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 1591,
									"end": 1620,
									"name": "NOT",
									"source": 20
								},
								{
									"begin": 1581,
									"end": 1621,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 1627,
									"end": 1628,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 1623,
									"end": 1634,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 1623,
									"end": 1634,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 1623,
									"end": 1634,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 1578,
									"end": 1635,
									"name": "OR",
									"source": 20
								},
								{
									"begin": 2848,
									"end": 2929,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2848,
									"end": 2929,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 2009,
									"end": 2939,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "95"
								},
								{
									"begin": 2009,
									"end": 2939,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "tag",
									"source": 20,
									"value": "103"
								},
								{
									"begin": 2039,
									"end": 2688,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 899,
									"end": 900,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 892,
									"end": 906,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 892,
									"end": 906,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 892,
									"end": 906,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 936,
									"end": 940,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 923,
									"end": 941,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 923,
									"end": 941,
									"name": "KECCAK256",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2075,
									"end": 2095,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 2075,
									"end": 2095,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 2075,
									"end": 2095,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "tag",
									"source": 20,
									"value": "107"
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2207,
									"end": 2214,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 2204,
									"end": 2205,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2201,
									"end": 2215,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "109"
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "DUP8",
									"source": 20
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 2289,
									"end": 2308,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2283,
									"end": 2309,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 2268,
									"end": 2310,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 2268,
									"end": 2310,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 2396,
									"end": 2400,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 2381,
									"end": 2401,
									"name": "SWAP5",
									"source": 20
								},
								{
									"begin": 2381,
									"end": 2401,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 2381,
									"end": 2401,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2381,
									"end": 2401,
									"name": "SWAP5",
									"source": 20
								},
								{
									"begin": 2349,
									"end": 2350,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 2337,
									"end": 2351,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 2337,
									"end": 2351,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 2337,
									"end": 2351,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2337,
									"end": 2351,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 2223,
									"end": 2235,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "107"
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "tag",
									"source": 20,
									"value": "109"
								},
								{
									"begin": 2193,
									"end": 2415,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 2197,
									"end": 2200,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 2443,
									"end": 2449,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2434,
									"end": 2441,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 2431,
									"end": 2450,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 2428,
									"end": 2629,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 2428,
									"end": 2629,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "110"
								},
								{
									"begin": 2428,
									"end": 2629,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 2504,
									"end": 2523,
									"name": "DUP7",
									"source": 20
								},
								{
									"begin": 2504,
									"end": 2523,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 2504,
									"end": 2523,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2498,
									"end": 2524,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2587,
									"end": 2588,
									"name": "PUSH",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 2583,
									"end": 2597,
									"name": "DUP8",
									"source": 20
								},
								{
									"begin": 2583,
									"end": 2597,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 2583,
									"end": 2597,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 2599,
									"end": 2602,
									"name": "PUSH",
									"source": 20,
									"value": "F8"
								},
								{
									"begin": 2579,
									"end": 2603,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 2575,
									"end": 2612,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 2571,
									"end": 2613,
									"name": "NOT",
									"source": 20
								},
								{
									"begin": 2556,
									"end": 2614,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 2541,
									"end": 2615,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2541,
									"end": 2615,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": 2428,
									"end": 2629,
									"name": "tag",
									"source": 20,
									"value": "110"
								},
								{
									"begin": 2428,
									"end": 2629,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2675,
									"end": 2676,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 2659,
									"end": 2673,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 2659,
									"end": 2673,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 2659,
									"end": 2673,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 2655,
									"end": 2677,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 2642,
									"end": 2678,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 2642,
									"end": 2678,
									"name": "SSTORE",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1646,
									"end": 2945,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3158,
									"end": 3285,
									"name": "tag",
									"source": 20,
									"value": "78"
								},
								{
									"begin": 3158,
									"end": 3285,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3219,
									"end": 3229,
									"name": "PUSH",
									"source": 20,
									"value": "4E487B71"
								},
								{
									"begin": 3214,
									"end": 3217,
									"name": "PUSH",
									"source": 20,
									"value": "E0"
								},
								{
									"begin": 3210,
									"end": 3230,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 3207,
									"end": 3208,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 3200,
									"end": 3231,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 3250,
									"end": 3254,
									"name": "PUSH",
									"source": 20,
									"value": "11"
								},
								{
									"begin": 3247,
									"end": 3248,
									"name": "PUSH",
									"source": 20,
									"value": "4"
								},
								{
									"begin": 3240,
									"end": 3255,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 3274,
									"end": 3278,
									"name": "PUSH",
									"source": 20,
									"value": "24"
								},
								{
									"begin": 3271,
									"end": 3272,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 3264,
									"end": 3279,
									"name": "REVERT",
									"source": 20
								},
								{
									"begin": 3290,
									"end": 3665,
									"name": "tag",
									"source": 20,
									"value": "79"
								},
								{
									"begin": 3290,
									"end": 3665,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3378,
									"end": 3379,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3396,
									"end": 3401,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3410,
									"end": 3659,
									"name": "tag",
									"source": 20,
									"value": "114"
								},
								{
									"begin": 3410,
									"end": 3659,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3431,
									"end": 3432,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3421,
									"end": 3429,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 3418,
									"end": 3433,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 3410,
									"end": 3659,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 3410,
									"end": 3659,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "116"
								},
								{
									"begin": 3410,
									"end": 3659,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3481,
									"end": 3485,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 3476,
									"end": 3479,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 3472,
									"end": 3486,
									"name": "DIV",
									"source": 20
								},
								{
									"begin": 3466,
									"end": 3470,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3463,
									"end": 3487,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 3460,
									"end": 3510,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 3460,
									"end": 3510,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "118"
								},
								{
									"begin": 3460,
									"end": 3510,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3490,
									"end": 3508,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "118"
								},
								{
									"begin": 3490,
									"end": 3508,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "78"
								},
								{
									"begin": 3490,
									"end": 3508,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3490,
									"end": 3508,
									"name": "tag",
									"source": 20,
									"value": "118"
								},
								{
									"begin": 3490,
									"end": 3508,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3540,
									"end": 3541,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3530,
									"end": 3538,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 3526,
									"end": 3542,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 3523,
									"end": 3572,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 3523,
									"end": 3572,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "119"
								},
								{
									"begin": 3523,
									"end": 3572,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3554,
									"end": 3570,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 3554,
									"end": 3570,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3554,
									"end": 3570,
									"name": "MUL",
									"source": 20
								},
								{
									"begin": 3554,
									"end": 3570,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 3523,
									"end": 3572,
									"name": "tag",
									"source": 20,
									"value": "119"
								},
								{
									"begin": 3523,
									"end": 3572,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3637,
									"end": 3638,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3633,
									"end": 3649,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 3633,
									"end": 3649,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 3633,
									"end": 3649,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 3633,
									"end": 3649,
									"name": "SHR",
									"source": 20
								},
								{
									"begin": 3633,
									"end": 3649,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 3593,
									"end": 3608,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 3593,
									"end": 3608,
									"name": "MUL",
									"source": 20
								},
								{
									"begin": 3410,
									"end": 3659,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "114"
								},
								{
									"begin": 3410,
									"end": 3659,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3410,
									"end": 3659,
									"name": "tag",
									"source": 20,
									"value": "116"
								},
								{
									"begin": 3410,
									"end": 3659,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3290,
									"end": 3665,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 3290,
									"end": 3665,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 3290,
									"end": 3665,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 3290,
									"end": 3665,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 3290,
									"end": 3665,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 3290,
									"end": 3665,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 3290,
									"end": 3665,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3670,
									"end": 4572,
									"name": "tag",
									"source": 20,
									"value": "80"
								},
								{
									"begin": 3670,
									"end": 4572,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3719,
									"end": 3724,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 3749,
									"end": 3757,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 3739,
									"end": 3819,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "121"
								},
								{
									"begin": 3739,
									"end": 3819,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3790,
									"end": 3791,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3804,
									"end": 3809,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 3804,
									"end": 3809,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3739,
									"end": 3819,
									"name": "tag",
									"source": 20,
									"value": "121"
								},
								{
									"begin": 3739,
									"end": 3819,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3838,
									"end": 3842,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3828,
									"end": 3904,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "122"
								},
								{
									"begin": 3828,
									"end": 3904,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3875,
									"end": 3876,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 3889,
									"end": 3894,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 3889,
									"end": 3894,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3828,
									"end": 3904,
									"name": "tag",
									"source": 20,
									"value": "122"
								},
								{
									"begin": 3828,
									"end": 3904,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3920,
									"end": 3924,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3938,
									"end": 3939,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3933,
									"end": 3992,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 3933,
									"end": 3992,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 3933,
									"end": 3992,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "124"
								},
								{
									"begin": 3933,
									"end": 3992,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 4006,
									"end": 4007,
									"name": "PUSH",
									"source": 20,
									"value": "2"
								},
								{
									"begin": 4001,
									"end": 4175,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4001,
									"end": 4175,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 4001,
									"end": 4175,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "125"
								},
								{
									"begin": 4001,
									"end": 4175,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 3913,
									"end": 4175,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "123"
								},
								{
									"begin": 3913,
									"end": 4175,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3933,
									"end": 3992,
									"name": "tag",
									"source": 20,
									"value": "124"
								},
								{
									"begin": 3933,
									"end": 3992,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3963,
									"end": 3964,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 3954,
									"end": 3964,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 3954,
									"end": 3964,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 3977,
									"end": 3982,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 3977,
									"end": 3982,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 3977,
									"end": 3982,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4001,
									"end": 4175,
									"name": "tag",
									"source": 20,
									"value": "125"
								},
								{
									"begin": 4001,
									"end": 4175,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4038,
									"end": 4041,
									"name": "PUSH",
									"source": 20,
									"value": "FF"
								},
								{
									"begin": 4028,
									"end": 4036,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4025,
									"end": 4042,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 4022,
									"end": 4065,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 4022,
									"end": 4065,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "127"
								},
								{
									"begin": 4022,
									"end": 4065,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 4045,
									"end": 4063,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "127"
								},
								{
									"begin": 4045,
									"end": 4063,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "78"
								},
								{
									"begin": 4045,
									"end": 4063,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4045,
									"end": 4063,
									"name": "tag",
									"source": 20,
									"value": "127"
								},
								{
									"begin": 4045,
									"end": 4063,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4101,
									"end": 4102,
									"name": "PUSH",
									"source": 20,
									"value": "1"
								},
								{
									"begin": 4087,
									"end": 4103,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4087,
									"end": 4103,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 4160,
									"end": 4165,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 4160,
									"end": 4165,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 3913,
									"end": 4175,
									"name": "tag",
									"source": 20,
									"value": "123"
								},
								{
									"begin": 3913,
									"end": 4175,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 3913,
									"end": 4175,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 4259,
									"end": 4261,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 4249,
									"end": 4257,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 4246,
									"end": 4262,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 4240,
									"end": 4243,
									"name": "PUSH",
									"source": 20,
									"value": "133"
								},
								{
									"begin": 4234,
									"end": 4238,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 4231,
									"end": 4244,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 4227,
									"end": 4263,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 4221,
									"end": 4223,
									"name": "PUSH",
									"source": 20,
									"value": "4E"
								},
								{
									"begin": 4211,
									"end": 4219,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4208,
									"end": 4224,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 4203,
									"end": 4205,
									"name": "PUSH",
									"source": 20,
									"value": "B"
								},
								{
									"begin": 4197,
									"end": 4201,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4194,
									"end": 4206,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 4190,
									"end": 4225,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 4187,
									"end": 4264,
									"name": "OR",
									"source": 20
								},
								{
									"begin": 4184,
									"end": 4387,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 4184,
									"end": 4387,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "128"
								},
								{
									"begin": 4184,
									"end": 4387,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 4296,
									"end": 4315,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4296,
									"end": 4315,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4296,
									"end": 4315,
									"name": "EXP",
									"source": 20
								},
								{
									"begin": 4372,
									"end": 4377,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 4372,
									"end": 4377,
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4184,
									"end": 4387,
									"name": "tag",
									"source": 20,
									"value": "128"
								},
								{
									"begin": 4184,
									"end": 4387,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4419,
									"end": 4461,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "129"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 4444,
									"end": 4452,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4438,
									"end": 4442,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4419,
									"end": 4461,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "79"
								},
								{
									"begin": 4419,
									"end": 4461,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4419,
									"end": 4461,
									"name": "tag",
									"source": 20,
									"value": "129"
								},
								{
									"begin": 4419,
									"end": 4461,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4497,
									"end": 4503,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 4493,
									"end": 4494,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 4489,
									"end": 4495,
									"name": "NOT",
									"source": 20
								},
								{
									"begin": 4485,
									"end": 4504,
									"name": "DIV",
									"source": 20
								},
								{
									"begin": 4476,
									"end": 4483,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4473,
									"end": 4505,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 4470,
									"end": 4528,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 4470,
									"end": 4528,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "131"
								},
								{
									"begin": 4470,
									"end": 4528,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 4508,
									"end": 4526,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "131"
								},
								{
									"begin": 4508,
									"end": 4526,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "78"
								},
								{
									"begin": 4508,
									"end": 4526,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4508,
									"end": 4526,
									"name": "tag",
									"source": 20,
									"value": "131"
								},
								{
									"begin": 4508,
									"end": 4526,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4546,
									"end": 4566,
									"name": "MUL",
									"source": 20
								},
								{
									"begin": 4546,
									"end": 4566,
									"name": "SWAP4",
									"source": 20
								},
								{
									"begin": 3670,
									"end": 4572,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3670,
									"end": 4572,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4577,
									"end": 4717,
									"name": "tag",
									"source": 20,
									"value": "31"
								},
								{
									"begin": 4577,
									"end": 4717,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4635,
									"end": 4640,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 4664,
									"end": 4711,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "84"
								},
								{
									"begin": 4705,
									"end": 4709,
									"name": "PUSH",
									"source": 20,
									"value": "FF"
								},
								{
									"begin": 4695,
									"end": 4703,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4691,
									"end": 4710,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 4685,
									"end": 4689,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 4664,
									"end": 4711,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "80"
								},
								{
									"begin": 4664,
									"end": 4711,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 4722,
									"end": 4890,
									"name": "tag",
									"source": 20,
									"value": "33"
								},
								{
									"begin": 4722,
									"end": 4890,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 4795,
									"end": 4804,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 4795,
									"end": 4804,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4795,
									"end": 4804,
									"name": "MUL",
									"source": 20
								},
								{
									"begin": 4826,
									"end": 4835,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 4826,
									"end": 4835,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 4843,
									"end": 4858,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4843,
									"end": 4858,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 4843,
									"end": 4858,
									"name": "DIV",
									"source": 20
								},
								{
									"begin": 4837,
									"end": 4859,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 4837,
									"end": 4859,
									"name": "EQ",
									"source": 20
								},
								{
									"begin": 4823,
									"end": 4860,
									"name": "OR",
									"source": 20
								},
								{
									"begin": 4813,
									"end": 4884,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 4813,
									"end": 4884,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 4864,
									"end": 4882,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 4864,
									"end": 4882,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "78"
								},
								{
									"begin": 4864,
									"end": 4882,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 5389,
									"end": 5807,
									"name": "tag",
									"source": 20,
									"value": "57"
								},
								{
									"begin": 5389,
									"end": 5807,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 5538,
									"end": 5540,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 5527,
									"end": 5536,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 5520,
									"end": 5541,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 5501,
									"end": 5505,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 5570,
									"end": 5576,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 5564,
									"end": 5577,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 5613,
									"end": 5619,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 5608,
									"end": 5610,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 5597,
									"end": 5606,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 5593,
									"end": 5611,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5586,
									"end": 5620,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 5672,
									"end": 5678,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 5667,
									"end": 5669,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 5659,
									"end": 5665,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 5655,
									"end": 5670,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5650,
									"end": 5652,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 5639,
									"end": 5648,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 5635,
									"end": 5653,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5629,
									"end": 5679,
									"name": "MCOPY",
									"source": 20
								},
								{
									"begin": 5728,
									"end": 5729,
									"name": "PUSH",
									"source": 20,
									"value": "0"
								},
								{
									"begin": 5723,
									"end": 5725,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 5714,
									"end": 5720,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 5703,
									"end": 5712,
									"name": "DUP6",
									"source": 20
								},
								{
									"begin": 5699,
									"end": 5721,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5695,
									"end": 5726,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5688,
									"end": 5730,
									"name": "MSTORE",
									"source": 20
								},
								{
									"begin": 5798,
									"end": 5800,
									"name": "PUSH",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 5791,
									"end": 5793,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 5787,
									"end": 5794,
									"name": "NOT",
									"source": 20
								},
								{
									"begin": 5782,
									"end": 5784,
									"name": "PUSH",
									"source": 20,
									"value": "1F"
								},
								{
									"begin": 5774,
									"end": 5780,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 5770,
									"end": 5785,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5766,
									"end": 5795,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 5755,
									"end": 5764,
									"name": "DUP5",
									"source": 20
								},
								{
									"begin": 5751,
									"end": 5796,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5747,
									"end": 5801,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5739,
									"end": 5801,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5739,
									"end": 5801,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 5739,
									"end": 5801,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 5389,
									"end": 5807,
									"name": "SWAP3",
									"source": 20
								},
								{
									"begin": 5389,
									"end": 5807,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5389,
									"end": 5807,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 5389,
									"end": 5807,
									"name": "POP",
									"source": 20
								},
								{
									"begin": 5389,
									"end": 5807,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 5812,
									"end": 6109,
									"name": "tag",
									"source": 20,
									"value": "59"
								},
								{
									"begin": 5812,
									"end": 6109,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 5930,
									"end": 5942,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 5930,
									"end": 5942,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 5977,
									"end": 5981,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 5966,
									"end": 5982,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 5966,
									"end": 5982,
									"name": "DUP4",
									"source": 20
								},
								{
									"begin": 5966,
									"end": 5982,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 5960,
									"end": 5983,
									"name": "MLOAD",
									"source": 20
								},
								{
									"begin": 5960,
									"end": 5983,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5930,
									"end": 5942,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 5995,
									"end": 6011,
									"name": "DUP2",
									"source": 20
								},
								{
									"begin": 5995,
									"end": 6011,
									"name": "LT",
									"source": 20
								},
								{
									"begin": 5992,
									"end": 6103,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 5992,
									"end": 6103,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "88"
								},
								{
									"begin": 5992,
									"end": 6103,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 6069,
									"end": 6073,
									"name": "PUSH",
									"source": 20,
									"value": "20"
								},
								{
									"begin": 6065,
									"end": 6082,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 6065,
									"end": 6082,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": 6065,
									"end": 6082,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 6065,
									"end": 6082,
									"name": "SUB",
									"source": 20
								},
								{
									"begin": 6062,
									"end": 6063,
									"name": "PUSH",
									"source": 20,
									"value": "3"
								},
								{
									"begin": 6058,
									"end": 6083,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 6054,
									"end": 6092,
									"name": "SHL",
									"source": 20
								},
								{
									"begin": 6043,
									"end": 6093,
									"name": "AND",
									"source": 20
								},
								{
									"begin": 6043,
									"end": 6093,
									"name": "SWAP2",
									"source": 20
								},
								{
									"begin": 5812,
									"end": 6109,
									"name": "SWAP1",
									"source": 20
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 5812,
									"end": 6109,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 6114,
									"end": 6239,
									"name": "tag",
									"source": 20,
									"value": "64"
								},
								{
									"begin": 6114,
									"end": 6239,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 6179,
									"end": 6188,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 6179,
									"end": 6188,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 6179,
									"end": 6188,
									"name": "ADD",
									"source": 20
								},
								{
									"begin": 6200,
									"end": 6210,
									"name": "DUP1",
									"source": 20
								},
								{
									"begin": 6200,
									"end": 6210,
									"name": "DUP3",
									"source": 20
								},
								{
									"begin": 6200,
									"end": 6210,
									"name": "GT",
									"source": 20
								},
								{
									"begin": 6197,
									"end": 6233,
									"name": "ISZERO",
									"source": 20
								},
								{
									"begin": 6197,
									"end": 6233,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 6197,
									"end": 6233,
									"name": "JUMPI",
									"source": 20
								},
								{
									"begin": 6213,
									"end": 6231,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "40"
								},
								{
									"begin": 6213,
									"end": 6231,
									"name": "PUSH [tag]",
									"source": 20,
									"value": "78"
								},
								{
									"begin": 6213,
									"end": 6231,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 20
								},
								{
									"begin": 6594,
									"end": 6771,
									"name": "tag",
									"source": 20,
									"value": "81"
								},
								{
									"begin": 6594,
									"end": 6771,
									"name": "JUMPDEST",
									"source": 20
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "80"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "A0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "C0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "E0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "100"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "120"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "140"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "MLOAD",
									"source": 19
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH [$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "CODECOPY",
									"source": 19
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2227"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2224"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2221"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2219"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2217"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2215"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "ASSIGNIMMUTABLE",
									"source": 19,
									"value": "2213"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH #[$]",
									"source": 19,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "PUSH",
									"source": 19,
									"value": "0"
								},
								{
									"begin": 398,
									"end": 708,
									"name": "RETURN",
									"source": 19
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206435f0c322ac2d37a1fd9833cd6122a3b386d3e3e64627f975ddf49afa2aa46b64736f6c634300081a0033",
									".code": [
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "80"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "40"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "MSTORE",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "CALLVALUE",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "ISZERO",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "tag",
											"source": 19,
											"value": "1"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "POP",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "CALLDATASIZE",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "LT",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "2"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "CALLDATALOAD",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "E0"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "SHR",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "79CC6790"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "21"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "95D89B41"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "95D89B41"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "16"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "A9059CBB"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "17"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "D505ACCF"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "18"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "DD62ED3E"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "19"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "F2FDE38B"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "20"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "tag",
											"source": 19,
											"value": "22"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "79CC6790"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "12"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "7ECEBE00"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "13"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "84B0196E"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "14"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "8DA5CB5B"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "15"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "tag",
											"source": 19,
											"value": "21"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "313CE567"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "GT",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "313CE567"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "7"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "3644E515"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "8"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "42966C68"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "9"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "70A08231"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "10"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "715018A6"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "11"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "tag",
											"source": 19,
											"value": "23"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "6FDDE03"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "3"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "95EA7B3"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "4"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "18160DDD"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "5"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "23B872DD"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "EQ",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH [tag]",
											"source": 19,
											"value": "6"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPI",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "tag",
											"source": 19,
											"value": "2"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "JUMPDEST",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "PUSH",
											"source": 19,
											"value": "0"
										},
										{
											"begin": 398,
											"end": 708,
											"name": "DUP1",
											"source": 19
										},
										{
											"begin": 398,
											"end": 708,
											"name": "REVERT",
											"source": 19
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1181,
											"end": 1195,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1181,
											"end": 1195,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1174,
											"end": 1196,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1156,
											"end": 1197,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1156,
											"end": 1197,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1144,
											"end": 1146,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1129,
											"end": 1147,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1016,
											"end": 1203,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 3222,
											"end": 3234,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "tag",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1342,
											"end": 1344,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3144,
											"end": 3241,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3075,
											"end": 3077,
											"name": "PUSH",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1911,
											"end": 1947,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1911,
											"end": 1947,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1899,
											"end": 1901,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1884,
											"end": 1902,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3002,
											"end": 3084,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "26"
										},
										{
											"begin": 1769,
											"end": 1953,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "tag",
											"source": 6,
											"value": "8"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 2656,
											"end": 2768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 5,
											"value": "9"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "52"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "53"
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 5,
											"value": "52"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "STOP",
											"source": 5
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "57"
										},
										{
											"begin": 3299,
											"end": 3415,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "tag",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3364,
											"end": 3371,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3390,
											"end": 3408,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3299,
											"end": 3415,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 5,
											"value": "12"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "51"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "CALLDATASIZE",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH",
											"source": 5,
											"value": "4"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "30"
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 5,
											"value": "63"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "34"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "57"
										},
										{
											"begin": 2406,
											"end": 2549,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 6,
											"value": "66"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 2406,
											"end": 2549,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 15,
											"value": "14"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "69"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "70"
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 15,
											"value": "69"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "26"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP8",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP7",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP6",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP5",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP4",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "72"
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3939,
											"end": 3941,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1638,
											"end": 1723,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "16"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 2276,
											"end": 2369,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "17"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "28"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "81"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "82"
										},
										{
											"begin": 3610,
											"end": 3788,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 6,
											"value": "18"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "51"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "CALLDATASIZE",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "86"
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 6,
											"value": "85"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "34"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "90"
										},
										{
											"begin": 3846,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "89"
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3926,
											"end": 3933,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3846,
											"end": 3986,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "94"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 2543,
											"end": 2758,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2119,
											"end": 2132,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2151,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 2144,
											"end": 2156,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "101"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "tag",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2144,
											"end": 2156,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2074,
											"end": 2163,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4366,
											"end": 4370,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 4436,
											"end": 4443,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4445,
											"end": 4450,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4428,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 4420,
											"end": 4451,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "tag",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 4420,
											"end": 4451,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4468,
											"end": 4472,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4461,
											"end": 4472,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "tag",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4293,
											"end": 4479,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "tag",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5126,
											"end": 5130,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 5198,
											"end": 5202,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP3",
											"source": 9
										},
										{
											"begin": 5213,
											"end": 5218,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5197,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 5182,
											"end": 5219,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "tag",
											"source": 3,
											"value": "111"
										},
										{
											"begin": 5182,
											"end": 5219,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 5239,
											"end": 5243,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5245,
											"end": 5247,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5249,
											"end": 5254,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5238,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 5229,
											"end": 5255,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "tag",
											"source": 3,
											"value": "113"
										},
										{
											"begin": 5229,
											"end": 5255,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5272,
											"end": 5276,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 5039,
											"end": 5283,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5039,
											"end": 5283,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "tag",
											"source": 6,
											"value": "48"
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2715,
											"end": 2722,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 2741,
											"end": 2759,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "118"
										},
										{
											"begin": 2741,
											"end": 2761,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "tag",
											"source": 6,
											"value": "117"
										},
										{
											"begin": 2741,
											"end": 2761,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2734,
											"end": 2761,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2734,
											"end": 2761,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2656,
											"end": 2768,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2656,
											"end": 2768,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 618,
											"end": 705,
											"name": "tag",
											"source": 5,
											"value": "54"
										},
										{
											"begin": 618,
											"end": 705,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 672,
											"end": 698,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 692,
											"end": 697,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 672,
											"end": 677,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 672,
											"end": 698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 672,
											"end": 698,
											"name": "tag",
											"source": 5,
											"value": "120"
										},
										{
											"begin": 672,
											"end": 698,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 618,
											"end": 705,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2293,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "125"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2384,
											"end": 2385,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2357,
											"end": 2375,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 2357,
											"end": 2387,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 2357,
											"end": 2387,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2293,
											"end": 2394,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "tag",
											"source": 5,
											"value": "64"
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 1112,
											"end": 1119,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1135,
											"end": 1140,
											"name": "DUP4",
											"source": 5
										},
										{
											"begin": 1096,
											"end": 1111,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 1096,
											"end": 1141,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "tag",
											"source": 5,
											"value": "131"
										},
										{
											"begin": 1096,
											"end": 1141,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 1157,
											"end": 1164,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1166,
											"end": 1171,
											"name": "DUP3",
											"source": 5
										},
										{
											"begin": 1151,
											"end": 1156,
											"name": "PUSH [tag]",
											"source": 5,
											"value": "122"
										},
										{
											"begin": 1151,
											"end": 1172,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "tag",
											"source": 5,
											"value": "133"
										},
										{
											"begin": 1151,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 1021,
											"end": 1179,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "tag",
											"source": 6,
											"value": "67"
										},
										{
											"begin": 2406,
											"end": 2549,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 2497,
											"end": 2504,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 624,
											"end": 631,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 624,
											"end": 638,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 624,
											"end": 638,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 2523,
											"end": 2542,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "103"
										},
										{
											"begin": 538,
											"end": 645,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "tag",
											"source": 15,
											"value": "70"
										},
										{
											"begin": 5144,
											"end": 5701,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5242,
											"end": 5255,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5269,
											"end": 5287,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 5301,
											"end": 5322,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5336,
											"end": 5351,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5365,
											"end": 5390,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5404,
											"end": 5416,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5430,
											"end": 5457,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "138"
										},
										{
											"begin": 5533,
											"end": 5544,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "139"
										},
										{
											"begin": 5533,
											"end": 5546,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "tag",
											"source": 15,
											"value": "138"
										},
										{
											"begin": 5533,
											"end": 5546,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "140"
										},
										{
											"begin": 5560,
											"end": 5574,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "141"
										},
										{
											"begin": 5560,
											"end": 5576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "tag",
											"source": 15,
											"value": "140"
										},
										{
											"begin": 5560,
											"end": 5576,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 5652,
											"end": 5653,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP12",
											"source": 15
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP4",
											"source": 15
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP11",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP2",
											"source": 15
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP9",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "CHAINID",
											"source": 15
										},
										{
											"begin": 5590,
											"end": 5603,
											"name": "SWAP8",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5625,
											"end": 5629,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 5625,
											"end": 5629,
											"name": "SWAP7",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5652,
											"end": 5653,
											"name": "SWAP5",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5668,
											"end": 5684,
											"name": "SWAP3",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5482,
											"end": 5694,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5144,
											"end": 5701,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "tag",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 2276,
											"end": 2369,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2323,
											"end": 2336,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2355,
											"end": 2362,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2348,
											"end": 2362,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 2348,
											"end": 2362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "tag",
											"source": 3,
											"value": "82"
										},
										{
											"begin": 3610,
											"end": 3788,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3679,
											"end": 3683,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 3733,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 735,
											"end": 745,
											"name": "DUP2",
											"source": 9
										},
										{
											"begin": 3750,
											"end": 3752,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3754,
											"end": 3759,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 3733,
											"end": 3742,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 3733,
											"end": 3760,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "tag",
											"source": 6,
											"value": "87"
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1901,
											"end": 1909,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 1883,
											"end": 1898,
											"name": "TIMESTAMP",
											"source": 6
										},
										{
											"begin": 1883,
											"end": 1909,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "313C8981"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "tag",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1932,
											"end": 1965,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "tag",
											"source": 6,
											"value": "157"
										},
										{
											"begin": 1879,
											"end": 1976,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1986,
											"end": 2004,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1022,
											"end": 1117,
											"name": "PUSH",
											"source": 6,
											"value": "6E71EDAE12B1B97F4D1F60370FEF10105FA2FAAE0126114A169C64845D6126C9"
										},
										{
											"begin": 2045,
											"end": 2050,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 2052,
											"end": 2059,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 2061,
											"end": 2066,
											"name": "DUP9",
											"source": 6
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 2078,
											"end": 2083,
											"name": "DUP13",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "AND",
											"source": 10
										},
										{
											"begin": 819,
											"end": 826,
											"name": "PUSH",
											"source": 10,
											"value": "0"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1128,
											"name": "PUSH",
											"source": 10,
											"value": "7"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 10,
											"value": "20"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "MSTORE",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "PUSH",
											"source": 10,
											"value": "40"
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1135,
											"name": "KECCAK256",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "DUP1",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SLOAD",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "PUSH",
											"source": 10,
											"value": "1"
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "DUP2",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "ADD",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP2",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SSTORE",
											"source": 10
										},
										{
											"begin": 1121,
											"end": 1137,
											"name": "SWAP1",
											"source": 10
										},
										{
											"begin": 759,
											"end": 1154,
											"name": "JUMP",
											"source": 10
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "tag",
											"source": 6,
											"value": "159"
										},
										{
											"begin": 2068,
											"end": 2084,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5990,
											"end": 6015,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 5990,
											"end": 6015,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5990,
											"end": 6015,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 5990,
											"end": 6015,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6051,
											"end": 6083,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 6051,
											"end": 6083,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 6051,
											"end": 6083,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 6031,
											"end": 6049,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6031,
											"end": 6049,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 6031,
											"end": 6049,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6024,
											"end": 6084,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6120,
											"end": 6152,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 6120,
											"end": 6152,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6120,
											"end": 6152,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 6120,
											"end": 6152,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 6100,
											"end": 6118,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 6100,
											"end": 6118,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 6100,
											"end": 6118,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6093,
											"end": 6153,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6169,
											"end": 6187,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 6169,
											"end": 6187,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6169,
											"end": 6187,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6162,
											"end": 6196,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6212,
											"end": 6231,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 6212,
											"end": 6231,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6212,
											"end": 6231,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6205,
											"end": 6240,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6256,
											"end": 6275,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 6256,
											"end": 6275,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6256,
											"end": 6275,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6249,
											"end": 6284,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 6249,
											"end": 6284,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6249,
											"end": 6284,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5962,
											"end": 5981,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 5962,
											"end": 5981,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2017,
											"end": 2095,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2007,
											"end": 2096,
											"name": "KECCAK256",
											"source": 6
										},
										{
											"begin": 1986,
											"end": 2096,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1986,
											"end": 2096,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2107,
											"end": 2119,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 2139,
											"end": 2149,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2122,
											"end": 2138,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "164"
										},
										{
											"begin": 2122,
											"end": 2150,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "tag",
											"source": 6,
											"value": "163"
										},
										{
											"begin": 2122,
											"end": 2150,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2107,
											"end": 2150,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2107,
											"end": 2150,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2161,
											"end": 2175,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 2192,
											"end": 2196,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2198,
											"end": 2199,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 2201,
											"end": 2202,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 2204,
											"end": 2205,
											"name": "DUP8",
											"source": 6
										},
										{
											"begin": 2178,
											"end": 2191,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "166"
										},
										{
											"begin": 2178,
											"end": 2206,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "tag",
											"source": 6,
											"value": "165"
										},
										{
											"begin": 2178,
											"end": 2206,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2161,
											"end": 2206,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 2161,
											"end": 2206,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 2230,
											"end": 2235,
											"name": "DUP10",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2220,
											"end": 2226,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 2220,
											"end": 2235,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "25C00723"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6487,
											"end": 6519,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 6487,
											"end": 6519,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6487,
											"end": 6519,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 6469,
											"end": 6520,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6556,
											"end": 6588,
											"name": "DUP12",
											"source": 20
										},
										{
											"begin": 6556,
											"end": 6588,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 6536,
											"end": 6554,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6536,
											"end": 6554,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6536,
											"end": 6554,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6529,
											"end": 6589,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6442,
											"end": 6460,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 6442,
											"end": 6460,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2258,
											"end": 2293,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 6295,
											"end": 6595,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "tag",
											"source": 6,
											"value": "167"
										},
										{
											"begin": 2216,
											"end": 2304,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "170"
										},
										{
											"begin": 2323,
											"end": 2328,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 2330,
											"end": 2337,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 2339,
											"end": 2344,
											"name": "DUP11",
											"source": 6
										},
										{
											"begin": 2314,
											"end": 2322,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "107"
										},
										{
											"begin": 2314,
											"end": 2345,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "tag",
											"source": 6,
											"value": "170"
										},
										{
											"begin": 2314,
											"end": 2345,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1869,
											"end": 2352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1680,
											"end": 2352,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "tag",
											"source": 0,
											"value": "95"
										},
										{
											"begin": 2543,
											"end": 2758,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 1531,
											"end": 1542,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 1531,
											"end": 1544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "tag",
											"source": 0,
											"value": "173"
										},
										{
											"begin": 1531,
											"end": 1544,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2627,
											"end": 2649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2627,
											"end": 2649,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2700,
											"end": 2701,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2672,
											"end": 2703,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2672,
											"end": 2703,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "175"
										},
										{
											"begin": 2623,
											"end": 2714,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2751,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 2742,
											"end": 2750,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2741,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 2723,
											"end": 2751,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "tag",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 9082,
											"end": 9087,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9089,
											"end": 9096,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9098,
											"end": 9103,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9105,
											"end": 9109,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 9073,
											"end": 9081,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 9073,
											"end": 9110,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "tag",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 9073,
											"end": 9110,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 8989,
											"end": 9117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "tag",
											"source": 3,
											"value": "112"
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10762,
											"end": 10786,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3963,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3970,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 3952,
											"end": 3979,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10828,
											"end": 10865,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 10824,
											"end": 11134,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10904,
											"end": 10909,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10901,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10885,
											"end": 10909,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7DC7A0D9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6820,
											"end": 6852,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 6820,
											"end": 6852,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6802,
											"end": 6853,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6869,
											"end": 6887,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6869,
											"end": 6887,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6869,
											"end": 6887,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6862,
											"end": 6896,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6862,
											"end": 6896,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6862,
											"end": 6896,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6912,
											"end": 6930,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 6912,
											"end": 6930,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6912,
											"end": 6930,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6905,
											"end": 6939,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6905,
											"end": 6939,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6905,
											"end": 6939,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6775,
											"end": 6793,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 6775,
											"end": 6793,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10936,
											"end": 10996,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 6600,
											"end": 6945,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "tag",
											"source": 3,
											"value": "185"
										},
										{
											"begin": 10881,
											"end": 11011,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 11061,
											"end": 11066,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11068,
											"end": 11075,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11096,
											"end": 11101,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11077,
											"end": 11093,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 11077,
											"end": 11101,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 11103,
											"end": 11108,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 11052,
											"end": 11060,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 11052,
											"end": 11109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "tag",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 11052,
											"end": 11109,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10752,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 10663,
											"end": 11140,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "tag",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 5656,
											"end": 5956,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5739,
											"end": 5757,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "190"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5807,
											"end": 5808,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5780,
											"end": 5810,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "tag",
											"source": 3,
											"value": "190"
										},
										{
											"begin": 5735,
											"end": 5821,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5834,
											"end": 5850,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "EC442F05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5902,
											"end": 5903,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5873,
											"end": 5905,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "tag",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 5830,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5949,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "180"
										},
										{
											"begin": 5933,
											"end": 5937,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5939,
											"end": 5941,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5943,
											"end": 5948,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5925,
											"end": 5932,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 5925,
											"end": 5949,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "tag",
											"source": 15,
											"value": "118"
										},
										{
											"begin": 3845,
											"end": 4107,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3898,
											"end": 3905,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 3929,
											"end": 3933,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3938,
											"end": 3949,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2217"
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "AND",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3949,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "197"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 3970,
											"end": 3984,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2215"
										},
										{
											"begin": 3953,
											"end": 3966,
											"name": "CHAINID",
											"source": 15
										},
										{
											"begin": 3953,
											"end": 3984,
											"name": "EQ",
											"source": 15
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "tag",
											"source": 15,
											"value": "197"
										},
										{
											"begin": 3921,
											"end": 3984,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "ISZERO",
											"source": 15
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "198"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPI",
											"source": 15
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2213"
										},
										{
											"begin": 4007,
											"end": 4029,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 3845,
											"end": 4107,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "tag",
											"source": 15,
											"value": "198"
										},
										{
											"begin": 3917,
											"end": 4101,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4067,
											"end": 4090,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "117"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 2079,
											"end": 2174,
											"name": "PUSH",
											"source": 15,
											"value": "8B73C3C69BB8FE3D512ECC4CF759CC79239F7B179B0FFACAA9A75D522B39400F"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP3",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 7436,
											"end": 7461,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4226,
											"end": 4237,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2219"
										},
										{
											"begin": 7477,
											"end": 7495,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7477,
											"end": 7495,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7477,
											"end": 7495,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7470,
											"end": 7504,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7470,
											"end": 7504,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7470,
											"end": 7504,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 7470,
											"end": 7504,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4239,
											"end": 4253,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2221"
										},
										{
											"begin": 7520,
											"end": 7538,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 7520,
											"end": 7538,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7520,
											"end": 7538,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7513,
											"end": 7547,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4255,
											"end": 4268,
											"name": "CHAINID",
											"source": 15
										},
										{
											"begin": 7563,
											"end": 7581,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 7563,
											"end": 7581,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7563,
											"end": 7581,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7556,
											"end": 7590,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4278,
											"end": 4282,
											"name": "ADDRESS",
											"source": 15
										},
										{
											"begin": 7606,
											"end": 7625,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 7606,
											"end": 7625,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7606,
											"end": 7625,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7599,
											"end": 7660,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 4168,
											"end": 4175,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 4168,
											"end": 4175,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 7408,
											"end": 7427,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 7408,
											"end": 7427,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SUB",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "DUP2",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "PUSH",
											"source": 15,
											"value": "40"
										},
										{
											"begin": 4204,
											"end": 4284,
											"name": "MSTORE",
											"source": 15
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "DUP1",
											"source": 15
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "MLOAD",
											"source": 15
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "PUSH",
											"source": 15,
											"value": "20"
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "ADD",
											"source": 15
										},
										{
											"begin": 4194,
											"end": 4285,
											"name": "KECCAK256",
											"source": 15
										},
										{
											"begin": 4187,
											"end": 4285,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4187,
											"end": 4285,
											"name": "POP",
											"source": 15
										},
										{
											"begin": 4113,
											"end": 4292,
											"name": "SWAP1",
											"source": 15
										},
										{
											"begin": 4113,
											"end": 4292,
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "tag",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 8247,
											"end": 8453,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8317,
											"end": 8338,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "203"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4B637E8F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 8388,
											"end": 8389,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8361,
											"end": 8391,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "tag",
											"source": 3,
											"value": "203"
										},
										{
											"begin": 8313,
											"end": 8402,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8446,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "133"
										},
										{
											"begin": 8419,
											"end": 8426,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 8436,
											"end": 8437,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 8440,
											"end": 8445,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 8411,
											"end": 8418,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 8411,
											"end": 8446,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "tag",
											"source": 0,
											"value": "126"
										},
										{
											"begin": 1796,
											"end": 1958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1710,
											"end": 1716,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1855,
											"end": 1878,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 1851,
											"end": 1952,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 735,
											"end": 745,
											"name": "CALLER",
											"source": 9
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1901,
											"end": 1941,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "tag",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3020,
											"end": 3037,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3004,
											"end": 3010,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2985,
											"end": 3001,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3052,
											"end": 3092,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2975,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2912,
											"end": 3099,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 6021,
											"end": 6147,
											"name": "tag",
											"source": 15,
											"value": "139"
										},
										{
											"begin": 6021,
											"end": 6147,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 6067,
											"end": 6080,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 6099,
											"end": 6140,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "117"
										},
										{
											"begin": 6099,
											"end": 6104,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2224"
										},
										{
											"begin": 6126,
											"end": 6139,
											"name": "PUSH",
											"source": 15,
											"value": "5"
										},
										{
											"begin": 6099,
											"end": 6125,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "216"
										},
										{
											"begin": 6099,
											"end": 6140,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 6473,
											"end": 6608,
											"name": "tag",
											"source": 15,
											"value": "141"
										},
										{
											"begin": 6473,
											"end": 6608,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 6522,
											"end": 6535,
											"name": "PUSH",
											"source": 15,
											"value": "60"
										},
										{
											"begin": 6554,
											"end": 6601,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "117"
										},
										{
											"begin": 6554,
											"end": 6562,
											"name": "PUSHIMMUTABLE",
											"source": 15,
											"value": "2227"
										},
										{
											"begin": 6584,
											"end": 6600,
											"name": "PUSH",
											"source": 15,
											"value": "6"
										},
										{
											"begin": 6554,
											"end": 6583,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "216"
										},
										{
											"begin": 6554,
											"end": 6601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "tag",
											"source": 15,
											"value": "164"
										},
										{
											"begin": 4917,
											"end": 5093,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 4994,
											"end": 5001,
											"name": "PUSH",
											"source": 15,
											"value": "0"
										},
										{
											"begin": 5020,
											"end": 5086,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "103"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "222"
										},
										{
											"begin": 5053,
											"end": 5071,
											"name": "PUSH [tag]",
											"source": 15,
											"value": "118"
										},
										{
											"begin": 5053,
											"end": 5073,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 15
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "tag",
											"source": 15,
											"value": "222"
										},
										{
											"begin": 5053,
											"end": 5073,
											"name": "JUMPDEST",
											"source": 15
										},
										{
											"begin": 5075,
											"end": 5085,
											"name": "DUP4",
											"source": 15
										},
										{
											"begin": 3555,
											"end": 3559,
											"name": "PUSH",
											"source": 16,
											"value": "40"
										},
										{
											"begin": 3549,
											"end": 3560,
											"name": "MLOAD",
											"source": 16
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1901"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3573,
											"end": 3596,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3573,
											"end": 3596,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3625,
											"end": 3629,
											"name": "PUSH",
											"source": 16,
											"value": "2"
										},
										{
											"begin": 3616,
											"end": 3630,
											"name": "DUP2",
											"source": 16
										},
										{
											"begin": 3616,
											"end": 3630,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "SWAP3",
											"source": 16
										},
										{
											"begin": 3609,
											"end": 3648,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3677,
											"end": 3681,
											"name": "PUSH",
											"source": 16,
											"value": "22"
										},
										{
											"begin": 3668,
											"end": 3682,
											"name": "DUP3",
											"source": 16
										},
										{
											"begin": 3668,
											"end": 3682,
											"name": "ADD",
											"source": 16
										},
										{
											"begin": 3661,
											"end": 3695,
											"name": "MSTORE",
											"source": 16
										},
										{
											"begin": 3733,
											"end": 3737,
											"name": "PUSH",
											"source": 16,
											"value": "42"
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "KECCAK256",
											"source": 16
										},
										{
											"begin": 3718,
											"end": 3738,
											"name": "SWAP1",
											"source": 16
										},
										{
											"begin": 3353,
											"end": 3754,
											"name": "JUMP",
											"source": 16
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "tag",
											"source": 14,
											"value": "166"
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6888,
											"end": 6895,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6908,
											"end": 6925,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6927,
											"end": 6945,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6947,
											"end": 6963,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "225"
										},
										{
											"begin": 6978,
											"end": 6982,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 6984,
											"end": 6985,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 6987,
											"end": 6988,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 6990,
											"end": 6991,
											"name": "DUP9",
											"source": 14
										},
										{
											"begin": 6967,
											"end": 6977,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "226"
										},
										{
											"begin": 6967,
											"end": 6992,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "tag",
											"source": 14,
											"value": "225"
										},
										{
											"begin": 6967,
											"end": 6992,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": 6907,
											"end": 6992,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "227"
										},
										{
											"begin": 7014,
											"end": 7019,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7021,
											"end": 7029,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7002,
											"end": 7013,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "228"
										},
										{
											"begin": 7002,
											"end": 7030,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "tag",
											"source": 14,
											"value": "227"
										},
										{
											"begin": 7002,
											"end": 7030,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 7047,
											"end": 7056,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7047,
											"end": 7056,
											"name": "SWAP7",
											"source": 14
										},
										{
											"begin": 6803,
											"end": 7063,
											"name": "SWAP6",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6803,
											"end": 7063,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "tag",
											"source": 3,
											"value": "181"
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10061,
											"end": 10080,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "230"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E602DF05"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10132,
											"end": 10133,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10103,
											"end": 10135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "tag",
											"source": 3,
											"value": "230"
										},
										{
											"begin": 10057,
											"end": 10146,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10159,
											"end": 10180,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "232"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4A1406B1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10231,
											"end": 10232,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3951,
											"end": 4002,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 3924,
											"end": 3942,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 10203,
											"end": 10234,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 3805,
											"end": 4008,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "tag",
											"source": 3,
											"value": "232"
										},
										{
											"begin": 10155,
											"end": 10245,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10265,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10272,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10281,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10254,
											"end": 10289,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "188"
										},
										{
											"begin": 10299,
											"end": 10375,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 10349,
											"end": 10356,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10342,
											"end": 10347,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 10358,
											"end": 10363,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "235"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1342,
											"end": 1344,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "tag",
											"source": 3,
											"value": "235"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 10333,
											"end": 10364,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 9949,
											"end": 10381,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "tag",
											"source": 3,
											"value": "195"
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6360,
											"end": 6378,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "237"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6512,
											"end": 6517,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 6496,
											"end": 6508,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "238"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "239"
										},
										{
											"begin": 6496,
											"end": 6517,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "tag",
											"source": 3,
											"value": "238"
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6496,
											"end": 6517,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "240"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 3,
											"value": "237"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6548,
											"end": 6567,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6570,
											"end": 6585,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6603,
											"end": 6622,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "241"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "391434E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6820,
											"end": 6852,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 6820,
											"end": 6852,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 6802,
											"end": 6853,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6869,
											"end": 6887,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 6869,
											"end": 6887,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6869,
											"end": 6887,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6862,
											"end": 6896,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 6862,
											"end": 6896,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6862,
											"end": 6896,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6912,
											"end": 6930,
											"name": "PUSH",
											"source": 20,
											"value": "44"
										},
										{
											"begin": 6912,
											"end": 6930,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 6912,
											"end": 6930,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6905,
											"end": 6939,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 6905,
											"end": 6939,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 6905,
											"end": 6939,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6775,
											"end": 6793,
											"name": "PUSH",
											"source": 20,
											"value": "64"
										},
										{
											"begin": 6775,
											"end": 6793,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6649,
											"end": 6699,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "158"
										},
										{
											"begin": 6600,
											"end": 6945,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "tag",
											"source": 3,
											"value": "241"
										},
										{
											"begin": 6599,
											"end": 6714,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6843,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6849,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6852,
											"end": 6871,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6834,
											"end": 6871,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "tag",
											"source": 3,
											"value": "240"
										},
										{
											"begin": 6356,
											"end": 6896,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6910,
											"end": 6926,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "243"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7085,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7073,
											"end": 7094,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "244"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 3,
											"value": "243"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7293,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7297,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7284,
											"end": 7306,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "tag",
											"source": 3,
											"value": "244"
										},
										{
											"begin": 6906,
											"end": 7331,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7361,
											"end": 7363,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7355,
											"end": 7359,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 7365,
											"end": 7370,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "245"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1342,
											"end": 1344,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "tag",
											"source": 3,
											"value": "245"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 7346,
											"end": 7371,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6271,
											"end": 7378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "tag",
											"source": 11,
											"value": "216"
										},
										{
											"begin": 3385,
											"end": 3652,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3479,
											"end": 3492,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 1390,
											"end": 1456,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3508,
											"end": 3554,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 3586,
											"end": 3591,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3577,
											"end": 3585,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "252"
										},
										{
											"begin": 3577,
											"end": 3592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "tag",
											"source": 11,
											"value": "251"
										},
										{
											"begin": 3577,
											"end": 3592,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 3570,
											"end": 3592,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "tag",
											"source": 11,
											"value": "250"
										},
										{
											"begin": 3504,
											"end": 3646,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3630,
											"end": 3635,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 3623,
											"end": 3635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 11,
											"value": "254"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "255"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "98"
										},
										{
											"begin": 3623,
											"end": 3635,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 11,
											"value": "255"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "256"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "100"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MUL",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "256"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 11,
											"value": "257"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "KECCAK256",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SLOAD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "258"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "tag",
											"source": 11,
											"value": "256"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "POP",
											"source": 11
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 3623,
											"end": 3635,
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 14,
											"value": "226"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 5266,
											"end": 5273,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6199,
											"end": 6265,
											"name": "PUSH",
											"source": 14,
											"value": "7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6186,
											"end": 6265,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "261"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6297,
											"end": 6298,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6297,
											"end": 6298,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6301,
											"end": 6331,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 6301,
											"end": 6331,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6333,
											"end": 6334,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "260"
										},
										{
											"begin": 6281,
											"end": 6335,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "tag",
											"source": 14,
											"value": "261"
										},
										{
											"begin": 6182,
											"end": 6346,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6440,
											"end": 6454,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7898,
											"end": 7923,
											"name": "DUP11",
											"source": 20
										},
										{
											"begin": 7898,
											"end": 7923,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7898,
											"end": 7923,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7971,
											"end": 7975,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 7959,
											"end": 7976,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 7959,
											"end": 7976,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 7939,
											"end": 7957,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7939,
											"end": 7957,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7939,
											"end": 7957,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7932,
											"end": 7977,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7932,
											"end": 7977,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7932,
											"end": 7977,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 7932,
											"end": 7977,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7993,
											"end": 8011,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 7993,
											"end": 8011,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 7993,
											"end": 8011,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7986,
											"end": 8020,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 7986,
											"end": 8020,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 7986,
											"end": 8020,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8036,
											"end": 8054,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 8036,
											"end": 8054,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 8036,
											"end": 8054,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 8029,
											"end": 8063,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 8029,
											"end": 8063,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 8029,
											"end": 8063,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7870,
											"end": 7889,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 7870,
											"end": 7889,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 14,
											"value": "20"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP5",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP6",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "GAS",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "STATICCALL",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "265"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATACOPY",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "RETURNDATASIZE",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "tag",
											"source": 14,
											"value": "265"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 6457,
											"end": 6481,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6495,
											"end": 6515,
											"name": "AND",
											"source": 14
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "266"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6551,
											"end": 6580,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 6551,
											"end": 6580,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 6547,
											"end": 6548,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "260"
										},
										{
											"begin": 6531,
											"end": 6593,
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "tag",
											"source": 14,
											"value": "266"
										},
										{
											"begin": 6491,
											"end": 6604,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 6622,
											"end": 6628,
											"name": "SWAP3",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 6630,
											"end": 6650,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "tag",
											"source": 14,
											"value": "260"
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP5",
											"source": 14
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5140,
											"end": 6670,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 5140,
											"end": 6670,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "tag",
											"source": 14,
											"value": "228"
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7291,
											"end": 7311,
											"name": "PUSH",
											"source": 14,
											"value": "0"
										},
										{
											"begin": 7282,
											"end": 7287,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "272"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "272"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "270"
										},
										{
											"begin": 7282,
											"end": 7311,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "tag",
											"source": 14,
											"value": "272"
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7282,
											"end": 7311,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "273"
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7196,
											"end": 7728,
											"name": "POP",
											"source": 14
										},
										{
											"begin": 7196,
											"end": 7728,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "tag",
											"source": 14,
											"value": "273"
										},
										{
											"begin": 7278,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7387,
											"end": 7416,
											"name": "PUSH",
											"source": 14,
											"value": "1"
										},
										{
											"begin": 7378,
											"end": 7383,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "278"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "278"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "270"
										},
										{
											"begin": 7378,
											"end": 7416,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "tag",
											"source": 14,
											"value": "278"
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7378,
											"end": 7416,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "279"
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F645EEDF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "DUP1",
											"source": 14
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SWAP2",
											"source": 14
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "SWAP1",
											"source": 14
										},
										{
											"begin": 7439,
											"end": 7462,
											"name": "REVERT",
											"source": 14
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "tag",
											"source": 14,
											"value": "279"
										},
										{
											"begin": 7374,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7492,
											"end": 7527,
											"name": "PUSH",
											"source": 14,
											"value": "2"
										},
										{
											"begin": 7483,
											"end": 7488,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "270"
										},
										{
											"begin": 7483,
											"end": 7527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "tag",
											"source": 14,
											"value": "284"
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7483,
											"end": 7527,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "285"
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FCE698F7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7550,
											"end": 7596,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "tag",
											"source": 14,
											"value": "285"
										},
										{
											"begin": 7479,
											"end": 7722,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7626,
											"end": 7656,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 7617,
											"end": 7622,
											"name": "DUP3",
											"source": 14
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH",
											"source": 14,
											"value": "3"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "GT",
											"source": 14
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "ISZERO",
											"source": 14
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "291"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "291"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "270"
										},
										{
											"begin": 7617,
											"end": 7656,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 14
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "tag",
											"source": 14,
											"value": "291"
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "JUMPDEST",
											"source": 14
										},
										{
											"begin": 7617,
											"end": 7656,
											"name": "SUB",
											"source": 14
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "133"
										},
										{
											"begin": 7613,
											"end": 7722,
											"name": "JUMPI",
											"source": 14
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 14,
											"value": "40"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MLOAD",
											"source": 14
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "35E2F383"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "MSTORE",
											"source": 14
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH",
											"source": 14,
											"value": "4"
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "DUP2",
											"source": 14
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "ADD",
											"source": 14
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1354,
											"end": 1379,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 1327,
											"end": 1345,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7679,
											"end": 7711,
											"name": "PUSH [tag]",
											"source": 14,
											"value": "158"
										},
										{
											"begin": 1208,
											"end": 1385,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "tag",
											"source": 11,
											"value": "252"
										},
										{
											"begin": 2078,
											"end": 2483,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2137,
											"end": 2150,
											"name": "PUSH",
											"source": 11,
											"value": "60"
										},
										{
											"begin": 2162,
											"end": 2173,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "295"
										},
										{
											"begin": 2187,
											"end": 2191,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2176,
											"end": 2186,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "296"
										},
										{
											"begin": 2176,
											"end": 2192,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "tag",
											"source": 11,
											"value": "295"
										},
										{
											"begin": 2176,
											"end": 2192,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2311,
											"end": 2313,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2162,
											"end": 2192,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2162,
											"end": 2192,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2280,
											"end": 2297,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2280,
											"end": 2297,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "CALLDATASIZE",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 2300,
											"end": 2314,
											"name": "CALLDATACOPY",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2435,
											"end": 2439,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 2426,
											"end": 2440,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2426,
											"end": 2440,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 2419,
											"end": 2447,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2390,
											"end": 2406,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2078,
											"end": 2483,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 2555,
											"end": 2800,
											"name": "tag",
											"source": 11,
											"value": "296"
										},
										{
											"begin": 2555,
											"end": 2800,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 2616,
											"end": 2623,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 2688,
											"end": 2692,
											"name": "PUSH",
											"source": 11,
											"value": "FF"
										},
										{
											"begin": 2652,
											"end": 2692,
											"name": "DUP3",
											"source": 11
										},
										{
											"begin": 2652,
											"end": 2692,
											"name": "AND",
											"source": 11
										},
										{
											"begin": 2715,
											"end": 2717,
											"name": "PUSH",
											"source": 11,
											"value": "1F"
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2706,
											"end": 2717,
											"name": "GT",
											"source": 11
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "ISZERO",
											"source": 11
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "103"
										},
										{
											"begin": 2702,
											"end": 2771,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "2CD44AC3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "DUP2",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "MLOAD",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SUB",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "SWAP1",
											"source": 11
										},
										{
											"begin": 2740,
											"end": 2760,
											"name": "REVERT",
											"source": 11
										},
										{
											"begin": 14,
											"end": 303,
											"name": "tag",
											"source": 20,
											"value": "302"
										},
										{
											"begin": 14,
											"end": 303,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 56,
											"end": 59,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 94,
											"end": 99,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 88,
											"end": 100,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 121,
											"end": 127,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 116,
											"end": 119,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 109,
											"end": 128,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 177,
											"end": 183,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 170,
											"end": 174,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 163,
											"end": 168,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 159,
											"end": 175,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 152,
											"end": 156,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 147,
											"end": 150,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 143,
											"end": 157,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 137,
											"end": 184,
											"name": "MCOPY",
											"source": 20
										},
										{
											"begin": 229,
											"end": 230,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 222,
											"end": 226,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 213,
											"end": 219,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 208,
											"end": 211,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 204,
											"end": 220,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 200,
											"end": 227,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 193,
											"end": 231,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 292,
											"end": 296,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 285,
											"end": 287,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 281,
											"end": 288,
											"name": "NOT",
											"source": 20
										},
										{
											"begin": 276,
											"end": 278,
											"name": "PUSH",
											"source": 20,
											"value": "1F"
										},
										{
											"begin": 268,
											"end": 274,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 264,
											"end": 279,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 260,
											"end": 289,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 255,
											"end": 258,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 251,
											"end": 290,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 247,
											"end": 297,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 240,
											"end": 297,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 240,
											"end": 297,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 240,
											"end": 297,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 14,
											"end": 303,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 308,
											"end": 528,
											"name": "tag",
											"source": 20,
											"value": "27"
										},
										{
											"begin": 308,
											"end": 528,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 457,
											"end": 459,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 446,
											"end": 455,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 439,
											"end": 460,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 420,
											"end": 424,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 477,
											"end": 522,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "307"
										},
										{
											"begin": 518,
											"end": 520,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 507,
											"end": 516,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 503,
											"end": 521,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 495,
											"end": 501,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 477,
											"end": 522,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "302"
										},
										{
											"begin": 477,
											"end": 522,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 477,
											"end": 522,
											"name": "tag",
											"source": 20,
											"value": "307"
										},
										{
											"begin": 477,
											"end": 522,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 469,
											"end": 522,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 308,
											"end": 528,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 308,
											"end": 528,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "tag",
											"source": 20,
											"value": "303"
										},
										{
											"begin": 533,
											"end": 706,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 601,
											"end": 621,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 601,
											"end": 621,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 650,
											"end": 681,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 650,
											"end": 681,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 640,
											"end": 682,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 640,
											"end": 682,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 630,
											"end": 700,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "309"
										},
										{
											"begin": 630,
											"end": 700,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 696,
											"end": 697,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 693,
											"end": 694,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 686,
											"end": 698,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 630,
											"end": 700,
											"name": "tag",
											"source": 20,
											"value": "309"
										},
										{
											"begin": 630,
											"end": 700,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 533,
											"end": 706,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 711,
											"end": 1011,
											"name": "tag",
											"source": 20,
											"value": "30"
										},
										{
											"begin": 711,
											"end": 1011,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 779,
											"end": 785,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 787,
											"end": 793,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 840,
											"end": 842,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 828,
											"end": 837,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 819,
											"end": 826,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 815,
											"end": 838,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 811,
											"end": 843,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 808,
											"end": 860,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 808,
											"end": 860,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "311"
										},
										{
											"begin": 808,
											"end": 860,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 856,
											"end": 857,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 853,
											"end": 854,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 846,
											"end": 858,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 808,
											"end": 860,
											"name": "tag",
											"source": 20,
											"value": "311"
										},
										{
											"begin": 808,
											"end": 860,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 879,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "312"
										},
										{
											"begin": 898,
											"end": 907,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 879,
											"end": 908,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "303"
										},
										{
											"begin": 879,
											"end": 908,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 879,
											"end": 908,
											"name": "tag",
											"source": 20,
											"value": "312"
										},
										{
											"begin": 879,
											"end": 908,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 869,
											"end": 908,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 977,
											"end": 979,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 962,
											"end": 980,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 962,
											"end": 980,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 962,
											"end": 980,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 962,
											"end": 980,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 949,
											"end": 981,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 949,
											"end": 981,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 711,
											"end": 1011,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "tag",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1467,
											"end": 1473,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1475,
											"end": 1481,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1483,
											"end": 1489,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1536,
											"end": 1538,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 1524,
											"end": 1533,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 1515,
											"end": 1522,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 1511,
											"end": 1534,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 1507,
											"end": 1539,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "316"
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 1552,
											"end": 1553,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 1549,
											"end": 1550,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 1542,
											"end": 1554,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "tag",
											"source": 20,
											"value": "316"
										},
										{
											"begin": 1504,
											"end": 1556,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "317"
										},
										{
											"begin": 1594,
											"end": 1603,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "303"
										},
										{
											"begin": 1575,
											"end": 1604,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "tag",
											"source": 20,
											"value": "317"
										},
										{
											"begin": 1575,
											"end": 1604,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1565,
											"end": 1604,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1565,
											"end": 1604,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "318"
										},
										{
											"begin": 1657,
											"end": 1659,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 1646,
											"end": 1655,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 1642,
											"end": 1660,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "303"
										},
										{
											"begin": 1623,
											"end": 1661,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "tag",
											"source": 20,
											"value": "318"
										},
										{
											"begin": 1623,
											"end": 1661,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": 1613,
											"end": 1661,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 1613,
											"end": 1661,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1730,
											"end": 1732,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 1715,
											"end": 1733,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 1702,
											"end": 1734,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 1702,
											"end": 1734,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 1390,
											"end": 1764,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2140,
											"end": 2366,
											"name": "tag",
											"source": 20,
											"value": "53"
										},
										{
											"begin": 2140,
											"end": 2366,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2199,
											"end": 2205,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2252,
											"end": 2254,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2240,
											"end": 2249,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2231,
											"end": 2238,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 2227,
											"end": 2250,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 2223,
											"end": 2255,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "322"
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 2268,
											"end": 2269,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2265,
											"end": 2266,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 2258,
											"end": 2270,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "tag",
											"source": 20,
											"value": "322"
										},
										{
											"begin": 2220,
											"end": 2272,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2313,
											"end": 2336,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 2313,
											"end": 2336,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 2140,
											"end": 2366,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2140,
											"end": 2366,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2371,
											"end": 2557,
											"name": "tag",
											"source": 20,
											"value": "57"
										},
										{
											"begin": 2371,
											"end": 2557,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2430,
											"end": 2436,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2483,
											"end": 2485,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2471,
											"end": 2480,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2462,
											"end": 2469,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 2458,
											"end": 2481,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 2454,
											"end": 2486,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "324"
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 2499,
											"end": 2500,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 2496,
											"end": 2497,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 2489,
											"end": 2501,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "tag",
											"source": 20,
											"value": "324"
										},
										{
											"begin": 2451,
											"end": 2503,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2522,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "307"
										},
										{
											"begin": 2541,
											"end": 2550,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2522,
											"end": 2551,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "303"
										},
										{
											"begin": 2522,
											"end": 2551,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 2562,
											"end": 3800,
											"name": "tag",
											"source": 20,
											"value": "72"
										},
										{
											"begin": 2562,
											"end": 3800,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 2968,
											"end": 2971,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 2963,
											"end": 2966,
											"name": "PUSH",
											"source": 20,
											"value": "F8"
										},
										{
											"begin": 2959,
											"end": 2972,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 2951,
											"end": 2957,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 2947,
											"end": 2973,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 2936,
											"end": 2945,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 2929,
											"end": 2974,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3010,
											"end": 3013,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 3005,
											"end": 3007,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 2994,
											"end": 3003,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 2990,
											"end": 3008,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 2983,
											"end": 3014,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 2910,
											"end": 2914,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "327"
										},
										{
											"begin": 3078,
											"end": 3081,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 3067,
											"end": 3076,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3063,
											"end": 3082,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3055,
											"end": 3061,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "302"
										},
										{
											"begin": 3037,
											"end": 3083,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "tag",
											"source": 20,
											"value": "327"
										},
										{
											"begin": 3037,
											"end": 3083,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3131,
											"end": 3140,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3123,
											"end": 3129,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3119,
											"end": 3141,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 3114,
											"end": 3116,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 3103,
											"end": 3112,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3099,
											"end": 3117,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3092,
											"end": 3142,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "328"
										},
										{
											"begin": 3191,
											"end": 3197,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3183,
											"end": 3189,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "302"
										},
										{
											"begin": 3165,
											"end": 3198,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "tag",
											"source": 20,
											"value": "328"
										},
										{
											"begin": 3165,
											"end": 3198,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3229,
											"end": 3231,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3214,
											"end": 3232,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3207,
											"end": 3241,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 3207,
											"end": 3241,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3207,
											"end": 3241,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3278,
											"end": 3310,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 3278,
											"end": 3310,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 3272,
											"end": 3275,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 3257,
											"end": 3276,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3257,
											"end": 3276,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3250,
											"end": 3311,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3298,
											"end": 3301,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 3327,
											"end": 3346,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3327,
											"end": 3346,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3320,
											"end": 3355,
											"name": "DUP7",
											"source": 20
										},
										{
											"begin": 3320,
											"end": 3355,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3320,
											"end": 3355,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3392,
											"end": 3414,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3392,
											"end": 3414,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3392,
											"end": 3414,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 3386,
											"end": 3389,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 3371,
											"end": 3390,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 3371,
											"end": 3390,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3364,
											"end": 3415,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3464,
											"end": 3477,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3464,
											"end": 3477,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 3486,
											"end": 3508,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3486,
											"end": 3508,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 3486,
											"end": 3508,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3536,
											"end": 3538,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "DUP8",
											"source": 20
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3562,
											"end": 3577,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3524,
											"end": 3539,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "tag",
											"source": 20,
											"value": "329"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 3619,
											"end": 3625,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3616,
											"end": 3617,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 3613,
											"end": 3626,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "331"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 3680,
											"end": 3693,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3680,
											"end": 3693,
											"name": "MLOAD",
											"source": 20
										},
										{
											"begin": 3668,
											"end": 3694,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 3668,
											"end": 3694,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 3723,
											"end": 3725,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3749,
											"end": 3764,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3714,
											"end": 3726,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 3641,
											"end": 3642,
											"name": "PUSH",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 3634,
											"end": 3643,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "329"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "tag",
											"source": 20,
											"value": "331"
										},
										{
											"begin": 3605,
											"end": 3774,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3791,
											"end": 3794,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 3791,
											"end": 3794,
											"name": "SWAP12",
											"source": 20
										},
										{
											"begin": 2562,
											"end": 3800,
											"name": "SWAP11",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2562,
											"end": 3800,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "tag",
											"source": 20,
											"value": "86"
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4124,
											"end": 4130,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4132,
											"end": 4138,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4140,
											"end": 4146,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4148,
											"end": 4154,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4156,
											"end": 4162,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4164,
											"end": 4170,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4172,
											"end": 4178,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4225,
											"end": 4228,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 4213,
											"end": 4222,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4204,
											"end": 4211,
											"name": "DUP11",
											"source": 20
										},
										{
											"begin": 4200,
											"end": 4223,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 4196,
											"end": 4229,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 4193,
											"end": 4246,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 4193,
											"end": 4246,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "334"
										},
										{
											"begin": 4193,
											"end": 4246,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 4242,
											"end": 4243,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4239,
											"end": 4240,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4232,
											"end": 4244,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 4193,
											"end": 4246,
											"name": "tag",
											"source": 20,
											"value": "334"
										},
										{
											"begin": 4193,
											"end": 4246,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4265,
											"end": 4294,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "335"
										},
										{
											"begin": 4284,
											"end": 4293,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4265,
											"end": 4294,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "303"
										},
										{
											"begin": 4265,
											"end": 4294,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4265,
											"end": 4294,
											"name": "tag",
											"source": 20,
											"value": "335"
										},
										{
											"begin": 4265,
											"end": 4294,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4255,
											"end": 4294,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 4255,
											"end": 4294,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4313,
											"end": 4351,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "336"
										},
										{
											"begin": 4347,
											"end": 4349,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 4336,
											"end": 4345,
											"name": "DUP10",
											"source": 20
										},
										{
											"begin": 4332,
											"end": 4350,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4313,
											"end": 4351,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "303"
										},
										{
											"begin": 4313,
											"end": 4351,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4313,
											"end": 4351,
											"name": "tag",
											"source": 20,
											"value": "336"
										},
										{
											"begin": 4313,
											"end": 4351,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4303,
											"end": 4351,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4420,
											"end": 4422,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 4405,
											"end": 4423,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4405,
											"end": 4423,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4392,
											"end": 4424,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4392,
											"end": 4424,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4521,
											"end": 4523,
											"name": "PUSH",
											"source": 20,
											"value": "60"
										},
										{
											"begin": 4506,
											"end": 4524,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4506,
											"end": 4524,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4493,
											"end": 4525,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4493,
											"end": 4525,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4603,
											"end": 4606,
											"name": "PUSH",
											"source": 20,
											"value": "80"
										},
										{
											"begin": 4588,
											"end": 4607,
											"name": "DUP9",
											"source": 20
										},
										{
											"begin": 4588,
											"end": 4607,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4575,
											"end": 4608,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4652,
											"end": 4656,
											"name": "PUSH",
											"source": 20,
											"value": "FF"
										},
										{
											"begin": 4639,
											"end": 4657,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 4639,
											"end": 4657,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 4627,
											"end": 4658,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 4627,
											"end": 4658,
											"name": "EQ",
											"source": 20
										},
										{
											"begin": 4617,
											"end": 4676,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "337"
										},
										{
											"begin": 4617,
											"end": 4676,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 4672,
											"end": 4673,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4669,
											"end": 4670,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 4662,
											"end": 4674,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 4617,
											"end": 4676,
											"name": "tag",
											"source": 20,
											"value": "337"
										},
										{
											"begin": 4617,
											"end": 4676,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP10",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP9",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP7",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP6",
											"source": 20
										},
										{
											"begin": 4695,
											"end": 4702,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": 4775,
											"end": 4778,
											"name": "PUSH",
											"source": 20,
											"value": "A0"
										},
										{
											"begin": 4760,
											"end": 4779,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 4760,
											"end": 4779,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4747,
											"end": 4780,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4747,
											"end": 4780,
											"name": "SWAP5",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4879,
											"end": 4882,
											"name": "PUSH",
											"source": 20,
											"value": "C0"
										},
										{
											"begin": 4864,
											"end": 4883,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 4864,
											"end": 4883,
											"name": "SWAP4",
											"source": 20
										},
										{
											"begin": 4864,
											"end": 4883,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 4851,
											"end": 4884,
											"name": "CALLDATALOAD",
											"source": 20
										},
										{
											"begin": 4851,
											"end": 4884,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4013,
											"end": 4916,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4013,
											"end": 4916,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "tag",
											"source": 20,
											"value": "90"
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 4989,
											"end": 4995,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 4997,
											"end": 5003,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 5050,
											"end": 5052,
											"name": "PUSH",
											"source": 20,
											"value": "40"
										},
										{
											"begin": 5038,
											"end": 5047,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 5029,
											"end": 5036,
											"name": "DUP6",
											"source": 20
										},
										{
											"begin": 5025,
											"end": 5048,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 5021,
											"end": 5053,
											"name": "SLT",
											"source": 20
										},
										{
											"begin": 5018,
											"end": 5070,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 5018,
											"end": 5070,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "339"
										},
										{
											"begin": 5018,
											"end": 5070,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5066,
											"end": 5067,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5063,
											"end": 5064,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 5056,
											"end": 5068,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 5018,
											"end": 5070,
											"name": "tag",
											"source": 20,
											"value": "339"
										},
										{
											"begin": 5018,
											"end": 5070,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5089,
											"end": 5118,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "340"
										},
										{
											"begin": 5108,
											"end": 5117,
											"name": "DUP4",
											"source": 20
										},
										{
											"begin": 5089,
											"end": 5118,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "303"
										},
										{
											"begin": 5089,
											"end": 5118,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5089,
											"end": 5118,
											"name": "tag",
											"source": 20,
											"value": "340"
										},
										{
											"begin": 5089,
											"end": 5118,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5079,
											"end": 5118,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5079,
											"end": 5118,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5137,
											"end": 5175,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "341"
										},
										{
											"begin": 5171,
											"end": 5173,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 5160,
											"end": 5169,
											"name": "DUP5",
											"source": 20
										},
										{
											"begin": 5156,
											"end": 5174,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 5137,
											"end": 5175,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "303"
										},
										{
											"begin": 5137,
											"end": 5175,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5137,
											"end": 5175,
											"name": "tag",
											"source": 20,
											"value": "341"
										},
										{
											"begin": 5137,
											"end": 5175,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5127,
											"end": 5175,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5127,
											"end": 5175,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "SWAP3",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 4921,
											"end": 5181,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 5186,
											"end": 5566,
											"name": "tag",
											"source": 20,
											"value": "98"
										},
										{
											"begin": 5186,
											"end": 5566,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5265,
											"end": 5266,
											"name": "PUSH",
											"source": 20,
											"value": "1"
										},
										{
											"begin": 5261,
											"end": 5273,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5261,
											"end": 5273,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5261,
											"end": 5273,
											"name": "SHR",
											"source": 20
										},
										{
											"begin": 5261,
											"end": 5273,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5308,
											"end": 5320,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5308,
											"end": 5320,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 5308,
											"end": 5320,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 5329,
											"end": 5390,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "343"
										},
										{
											"begin": 5329,
											"end": 5390,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5383,
											"end": 5387,
											"name": "PUSH",
											"source": 20,
											"value": "7F"
										},
										{
											"begin": 5375,
											"end": 5381,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5371,
											"end": 5388,
											"name": "AND",
											"source": 20
										},
										{
											"begin": 5361,
											"end": 5388,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5361,
											"end": 5388,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5329,
											"end": 5390,
											"name": "tag",
											"source": 20,
											"value": "343"
										},
										{
											"begin": 5329,
											"end": 5390,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5436,
											"end": 5438,
											"name": "PUSH",
											"source": 20,
											"value": "20"
										},
										{
											"begin": 5428,
											"end": 5434,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 5425,
											"end": 5439,
											"name": "LT",
											"source": 20
										},
										{
											"begin": 5405,
											"end": 5423,
											"name": "DUP2",
											"source": 20
										},
										{
											"begin": 5402,
											"end": 5440,
											"name": "SUB",
											"source": 20
										},
										{
											"begin": 5399,
											"end": 5560,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "344"
										},
										{
											"begin": 5399,
											"end": 5560,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 5482,
											"end": 5492,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B71"
										},
										{
											"begin": 5477,
											"end": 5480,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 5473,
											"end": 5493,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 5470,
											"end": 5471,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5463,
											"end": 5494,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5517,
											"end": 5521,
											"name": "PUSH",
											"source": 20,
											"value": "22"
										},
										{
											"begin": 5514,
											"end": 5515,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 5507,
											"end": 5522,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 5545,
											"end": 5549,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 5542,
											"end": 5543,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 5535,
											"end": 5550,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 5399,
											"end": 5560,
											"name": "tag",
											"source": 20,
											"value": "344"
										},
										{
											"begin": 5399,
											"end": 5560,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 5399,
											"end": 5560,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5186,
											"end": 5566,
											"name": "SWAP2",
											"source": 20
										},
										{
											"begin": 5186,
											"end": 5566,
											"name": "SWAP1",
											"source": 20
										},
										{
											"begin": 5186,
											"end": 5566,
											"name": "POP",
											"source": 20
										},
										{
											"begin": 5186,
											"end": 5566,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 20
										},
										{
											"begin": 6950,
											"end": 7172,
											"name": "tag",
											"source": 20,
											"value": "239"
										},
										{
											"begin": 6950,
											"end": 7172,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 7015,
											"end": 7024,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 7015,
											"end": 7024,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7015,
											"end": 7024,
											"name": "ADD",
											"source": 20
										},
										{
											"begin": 7036,
											"end": 7046,
											"name": "DUP1",
											"source": 20
										},
										{
											"begin": 7036,
											"end": 7046,
											"name": "DUP3",
											"source": 20
										},
										{
											"begin": 7036,
											"end": 7046,
											"name": "GT",
											"source": 20
										},
										{
											"begin": 7033,
											"end": 7166,
											"name": "ISZERO",
											"source": 20
										},
										{
											"begin": 7033,
											"end": 7166,
											"name": "PUSH [tag]",
											"source": 20,
											"value": "103"
										},
										{
											"begin": 7033,
											"end": 7166,
											"name": "JUMPI",
											"source": 20
										},
										{
											"begin": 7088,
											"end": 7098,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B71"
										},
										{
											"begin": 7083,
											"end": 7086,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 7079,
											"end": 7099,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 7076,
											"end": 7077,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7069,
											"end": 7100,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7123,
											"end": 7127,
											"name": "PUSH",
											"source": 20,
											"value": "11"
										},
										{
											"begin": 7120,
											"end": 7121,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 7113,
											"end": 7128,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 7151,
											"end": 7155,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 7148,
											"end": 7149,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 7141,
											"end": 7156,
											"name": "REVERT",
											"source": 20
										},
										{
											"begin": 8074,
											"end": 8201,
											"name": "tag",
											"source": 20,
											"value": "270"
										},
										{
											"begin": 8074,
											"end": 8201,
											"name": "JUMPDEST",
											"source": 20
										},
										{
											"begin": 8135,
											"end": 8145,
											"name": "PUSH",
											"source": 20,
											"value": "4E487B71"
										},
										{
											"begin": 8130,
											"end": 8133,
											"name": "PUSH",
											"source": 20,
											"value": "E0"
										},
										{
											"begin": 8126,
											"end": 8146,
											"name": "SHL",
											"source": 20
										},
										{
											"begin": 8123,
											"end": 8124,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8116,
											"end": 8147,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8166,
											"end": 8170,
											"name": "PUSH",
											"source": 20,
											"value": "21"
										},
										{
											"begin": 8163,
											"end": 8164,
											"name": "PUSH",
											"source": 20,
											"value": "4"
										},
										{
											"begin": 8156,
											"end": 8171,
											"name": "MSTORE",
											"source": 20
										},
										{
											"begin": 8190,
											"end": 8194,
											"name": "PUSH",
											"source": 20,
											"value": "24"
										},
										{
											"begin": 8187,
											"end": 8188,
											"name": "PUSH",
											"source": 20,
											"value": "0"
										},
										{
											"begin": 8180,
											"end": 8195,
											"name": "REVERT",
											"source": 20
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts@5.0.2/access/Ownable.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol",
								"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol",
								"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol",
								"@openzeppelin/contracts@5.0.2/utils/Context.sol",
								"@openzeppelin/contracts@5.0.2/utils/Nonces.sol",
								"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol",
								"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol",
								"@openzeppelin/contracts@5.0.2/utils/Strings.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol",
								"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/Math.sol",
								"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol",
								"DADDY TATE.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFrom(address,uint256)": "79cc6790",
							"decimals()": "313ce567",
							"eip712Domain()": "84b0196e",
							"name()": "06fdde03",
							"nonces(address)": "7ecebe00",
							"owner()": "8da5cb5b",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf",
							"renounceOwnership()": "715018a6",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.26+commit.8a97fa7a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `value`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `value`. - the caller must have allowance for ``from``'s tokens of at least `value`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"DADDY TATE.sol\":\"DADDYTATEFRIEND\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts@5.0.2/access/Ownable.sol\":{\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6\",\"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a\"]},\"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol\":{\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5c0f29195ad64cbe556da8e257dac8f05f78c53f90323c0d2accf8e6922d33a\",\"dweb:/ipfs/QmQ61TED8uaCZwcbh8KkgRSsCav7x7HbcGHwHts3U4DmUP\"]},\"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f\",\"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229\",\"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol\":{\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c\",\"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol\":{\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26\",\"dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol\":{\"keccak256\":\"0xc858a86a35701004d89022a5e98819aac46ccbdc4072fc9dd43928a676b1a2ee\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://18acebb483c512c0eaafcb437f09c839972c3f0d36f0201ea7baa2926b987dd2\",\"dweb:/ipfs/Qmd9bf2noaDSYDtf6FMSzKu7LPhuf91jsVNmcoCuTCuGic\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850\",\"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV\"]},\"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol\":{\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://f5196ec75139918c6c7bb4251b36395e668f1fa6d206beba7e7520e74913940d\",\"dweb:/ipfs/QmSyqjksXxmm2mCG6qRd1yuwLykypkSVBbnBnGqJRcuJMi\"]},\"@openzeppelin/contracts@5.0.2/utils/Context.sol\":{\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12\",\"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF\"]},\"@openzeppelin/contracts@5.0.2/utils/Nonces.sol\":{\"keccak256\":\"0x0082767004fca261c332e9ad100868327a863a88ef724e844857128845ab350f\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://132dce9686a54e025eb5ba5d2e48208f847a1ec3e60a3e527766d7bf53fb7f9e\",\"dweb:/ipfs/QmXn1a2nUZMpu2z6S88UoTfMVtY2YNh86iGrzJDYmMkKeZ\"]},\"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol\":{\"keccak256\":\"0x18a7171df639a934592915a520ecb97c5bbc9675a1105607aac8a94e72bf62c6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7478e1f13da69a2867ccd883001d836b75620362e743f196376d63ed0c422a1c\",\"dweb:/ipfs/QmWywcQ9TNfwtoqAxbn25d8C5VrV12PrPS9UjtGe6pL2BA\"]},\"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol\":{\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1ae50c8b562427df610cc4540c9bf104acca7ef8e2dcae567ae7e52272281e9c\",\"dweb:/ipfs/QmTHiadFCSJUPpRjNegc5SahmeU8bAoY8i9Aq6tVscbcKR\"]},\"@openzeppelin/contracts@5.0.2/utils/Strings.sol\":{\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6e52e0a7765c943ef14e5bcf11e46e6139fa044be564881378349236bf2e3453\",\"dweb:/ipfs/QmZEeeXoFPW47amyP35gfzomF9DixqqTEPwzBakv6cZw6i\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol\":{\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ba80ba06c8e6be852847e4c5f4492cef801feb6558ae09ed705ff2e04ea8b13c\",\"dweb:/ipfs/QmXRJDv3xHLVQCVXg1ZvR35QS9sij5y9NDWYzMfUfAdTHF\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol\":{\"keccak256\":\"0x999f705a027ed6dc2d4e0df2cc4a509852c6bfd11de1c8161bf88832d0503fd0\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0798def67258d9a3cc20b2b4da7ebf351a5cefe0abfdd665d2d81f8e32f89b21\",\"dweb:/ipfs/QmPEvJosnPfzHNjKvCv2D3891mA2Ww8eUwkqrxBjuYdHCt\"]},\"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2ceacff44c0fdc81e48e0e0b1db87a2076d3c1fb497341de077bf1da9f6b406c\",\"dweb:/ipfs/QmRUo1muMRAewxrKQ7TkXUtknyRoR57AyEkoPpiuZQ8FzX\"]},\"@openzeppelin/contracts@5.0.2/utils/math/Math.sol\":{\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4ece9f0b9c8daca08c76b6b5405a6446b6f73b3a15fab7ff56e296cbd4a2c875\",\"dweb:/ipfs/QmQyRpyPRL5SQuAgj6SHmbir3foX65FJjbVTTQrA2EFg6L\"]},\"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol\":{\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://7d533a1c97cd43a57cd9c465f7ee8dd0e39ae93a8fb8ff8e5303a356b081cdcc\",\"dweb:/ipfs/QmVBEei6aTnvYNZp2CHYVNKyZS4q1KkjANfY39WVXZXVoT\"]},\"DADDY TATE.sol\":{\"keccak256\":\"0xe31ba794428d7210d1e5e202f3240755db2fdf90c9551a503918011539d9db02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9e2a748d3eb14d8650b1e82fa3c292a055ae4351bbd9a8529bae7408bd24171c\",\"dweb:/ipfs/QmWjjcZkPvZBm9MkqyRRLBWmd1mKZRQAexjqh7NzDp1gxG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 332,
								"contract": "DADDY TATE.sol:DADDYTATEFRIEND",
								"label": "_balances",
								"offset": 0,
								"slot": "0",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 338,
								"contract": "DADDY TATE.sol:DADDYTATEFRIEND",
								"label": "_allowances",
								"offset": 0,
								"slot": "1",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 340,
								"contract": "DADDY TATE.sol:DADDYTATEFRIEND",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "2",
								"type": "t_uint256"
							},
							{
								"astId": 342,
								"contract": "DADDY TATE.sol:DADDYTATEFRIEND",
								"label": "_name",
								"offset": 0,
								"slot": "3",
								"type": "t_string_storage"
							},
							{
								"astId": 344,
								"contract": "DADDY TATE.sol:DADDYTATEFRIEND",
								"label": "_symbol",
								"offset": 0,
								"slot": "4",
								"type": "t_string_storage"
							},
							{
								"astId": 2229,
								"contract": "DADDY TATE.sol:DADDYTATEFRIEND",
								"label": "_nameFallback",
								"offset": 0,
								"slot": "5",
								"type": "t_string_storage"
							},
							{
								"astId": 2231,
								"contract": "DADDY TATE.sol:DADDYTATEFRIEND",
								"label": "_versionFallback",
								"offset": 0,
								"slot": "6",
								"type": "t_string_storage"
							},
							{
								"astId": 1208,
								"contract": "DADDY TATE.sol:DADDYTATEFRIEND",
								"label": "_nonces",
								"offset": 0,
								"slot": "7",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 8,
								"contract": "DADDY TATE.sol:DADDYTATEFRIEND",
								"label": "_owner",
								"offset": 0,
								"slot": "8",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts@5.0.2/access/Ownable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1194
						],
						"Ownable": [
							147
						]
					},
					"id": 148,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 148,
							"sourceUnit": 1195,
							"src": "128:45:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1194,
										"src": "136:7:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Context",
										"nameLocations": [
											"692:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1194,
										"src": "692:7:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:7:0"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "175:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 147,
							"linearizedBaseContracts": [
								147,
								1194
							],
							"name": "Ownable",
							"nameLocation": "681:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 8,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "722:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 147,
									"src": "706:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 7,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "706:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 9,
										"nodeType": "StructuredDocumentation",
										"src": "735:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 13,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "831:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 12,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 11,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 13,
												"src": "858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 10,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "857:17:0"
									},
									"src": "825:50:0"
								},
								{
									"documentation": {
										"id": 14,
										"nodeType": "StructuredDocumentation",
										"src": "881:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 18,
									"name": "OwnableInvalidOwner",
									"nameLocation": "974:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1002:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "994:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "994:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "993:15:0"
									},
									"src": "968:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 24,
									"name": "OwnershipTransferred",
									"nameLocation": "1021:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1058:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1042:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1042:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1089:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "1073:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1073:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1041:57:0"
									},
									"src": "1015:84:0"
								},
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "1259:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 30,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 27,
														"src": "1273:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1297:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 32,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1289:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 31,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1289:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 34,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1289:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1273:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 44,
												"nodeType": "IfStatement",
												"src": "1269:95:0",
												"trueBody": {
													"id": 43,
													"nodeType": "Block",
													"src": "1301:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 39,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1350:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 38,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1342:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 37,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1342:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 40,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1342:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 36,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "1322:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 41,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1322:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 42,
															"nodeType": "RevertStatement",
															"src": "1315:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 46,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 27,
															"src": "1392:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 45,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "1373:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 47,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1373:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 48,
												"nodeType": "ExpressionStatement",
												"src": "1373:32:0"
											}
										]
									},
									"documentation": {
										"id": 25,
										"nodeType": "StructuredDocumentation",
										"src": "1105:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 50,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 28,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 27,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1245:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 50,
												"src": "1237:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 26,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1237:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1236:22:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1259:0:0"
									},
									"scope": 147,
									"src": "1225:187:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 57,
										"nodeType": "Block",
										"src": "1521:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 53,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 84,
														"src": "1531:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1531:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "1531:13:0"
											},
											{
												"id": 56,
												"nodeType": "PlaceholderStatement",
												"src": "1554:1:0"
											}
										]
									},
									"documentation": {
										"id": 51,
										"nodeType": "StructuredDocumentation",
										"src": "1418:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 58,
									"name": "onlyOwner",
									"nameLocation": "1509:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1518:2:0"
									},
									"src": "1500:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 66,
										"nodeType": "Block",
										"src": "1693:30:0",
										"statements": [
											{
												"expression": {
													"id": 64,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "1710:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 63,
												"id": 65,
												"nodeType": "Return",
												"src": "1703:13:0"
											}
										]
									},
									"documentation": {
										"id": 59,
										"nodeType": "StructuredDocumentation",
										"src": "1568:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 67,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1647:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1652:2:0"
									},
									"returnParameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "1684:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 61,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1684:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1683:9:0"
									},
									"scope": 147,
									"src": "1638:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "1841:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 75,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 71,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 67,
															"src": "1855:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 72,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1855:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 73,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1176,
															"src": "1866:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 74,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1866:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1855:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 82,
												"nodeType": "IfStatement",
												"src": "1851:101:0",
												"trueBody": {
													"id": 81,
													"nodeType": "Block",
													"src": "1880:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 77,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1176,
																			"src": "1928:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 78,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1928:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 76,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 13,
																	"src": "1901:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 79,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1901:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 80,
															"nodeType": "RevertStatement",
															"src": "1894:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "1729:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 84,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1805:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1816:2:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1841:0:0"
									},
									"scope": 147,
									"src": "1796:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 97,
										"nodeType": "Block",
										"src": "2347:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2384:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2376:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 91,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2376:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 94,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2376:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 90,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2357:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 95,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2357:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 96,
												"nodeType": "ExpressionStatement",
												"src": "2357:30:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "1964:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 98,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"2337:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2337:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2337:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2302:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2319:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2347:0:0"
									},
									"scope": 147,
									"src": "2293:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 125,
										"nodeType": "Block",
										"src": "2613:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 111,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 106,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 101,
														"src": "2627:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2647:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 108,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2639:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 107,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2639:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 110,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2639:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2627:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 120,
												"nodeType": "IfStatement",
												"src": "2623:91:0",
												"trueBody": {
													"id": 119,
													"nodeType": "Block",
													"src": "2651:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 115,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2700:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 114,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2692:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 113,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2692:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 116,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2692:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 112,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 18,
																	"src": "2672:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 117,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2672:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 118,
															"nodeType": "RevertStatement",
															"src": "2665:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 122,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 101,
															"src": "2742:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 121,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "2723:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 123,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2723:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 124,
												"nodeType": "ExpressionStatement",
												"src": "2723:28:0"
											}
										]
									},
									"documentation": {
										"id": 99,
										"nodeType": "StructuredDocumentation",
										"src": "2400:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 126,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 104,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 103,
												"name": "onlyOwner",
												"nameLocations": [
													"2603:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 58,
												"src": "2603:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2603:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2552:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 101,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2578:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 126,
												"src": "2570:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 100,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:0:0"
									},
									"scope": 147,
									"src": "2543:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 145,
										"nodeType": "Block",
										"src": "2975:124:0",
										"statements": [
											{
												"assignments": [
													133
												],
												"declarations": [
													{
														"constant": false,
														"id": 133,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2993:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 145,
														"src": "2985:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 132,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2985:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 135,
												"initialValue": {
													"id": 134,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 8,
													"src": "3004:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2985:25:0"
											},
											{
												"expression": {
													"id": 138,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 136,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 8,
														"src": "3020:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 137,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 129,
														"src": "3029:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3020:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 139,
												"nodeType": "ExpressionStatement",
												"src": "3020:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 141,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 133,
															"src": "3073:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 142,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 129,
															"src": "3083:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 140,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 24,
														"src": "3052:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 143,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3052:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 144,
												"nodeType": "EmitStatement",
												"src": "3047:45:0"
											}
										]
									},
									"documentation": {
										"id": 127,
										"nodeType": "StructuredDocumentation",
										"src": "2764:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 146,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2921:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 130,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 129,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2948:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2940:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 128,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2940:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2939:18:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2975:0:0"
									},
									"scope": 147,
									"src": "2912:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 148,
							"src": "663:2438:0",
							"usedErrors": [
								13,
								18
							],
							"usedEvents": [
								24
							]
						}
					],
					"src": "102:3000:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol",
					"exportedSymbols": {
						"IERC5267": [
							172
						]
					},
					"id": 173,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 149,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "107:24:1"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC5267",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 172,
							"linearizedBaseContracts": [
								172
							],
							"name": "IERC5267",
							"nameLocation": "143:8:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 150,
										"nodeType": "StructuredDocumentation",
										"src": "158:84:1",
										"text": " @dev MAY be emitted to signal that the domain could have changed."
									},
									"eventSelector": "0a6387c9ea3628b88a633bb4f3b151770f70085117a15f9bf3787cda53f13d31",
									"id": 152,
									"name": "EIP712DomainChanged",
									"nameLocation": "253:19:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "272:2:1"
									},
									"src": "247:28:1"
								},
								{
									"documentation": {
										"id": 153,
										"nodeType": "StructuredDocumentation",
										"src": "281:140:1",
										"text": " @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\n signature."
									},
									"functionSelector": "84b0196e",
									"id": 171,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "435:12:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "447:2:1"
									},
									"returnParameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 156,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "517:6:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "510:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 155,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "510:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "551:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "537:18:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 157,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "537:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 160,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "583:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "569:21:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 159,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "569:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "612:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "604:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 161,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "604:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 164,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "641:17:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "633:25:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "633:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 166,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "680:4:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "672:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 165,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "672:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "715:10:1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "698:27:1",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 167,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "698:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 168,
													"nodeType": "ArrayTypeName",
													"src": "698:9:1",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "496:239:1"
									},
									"scope": 172,
									"src": "426:310:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 173,
							"src": "133:605:1",
							"usedErrors": [],
							"usedEvents": [
								152
							]
						}
					],
					"src": "107:632:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							309
						],
						"IERC20Errors": [
							214
						],
						"IERC721Errors": [
							262
						]
					},
					"id": 310,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 174,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 175,
								"nodeType": "StructuredDocumentation",
								"src": "138:139:2",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 214,
							"linearizedBaseContracts": [
								214
							],
							"name": "IERC20Errors",
							"nameLocation": "288:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 176,
										"nodeType": "StructuredDocumentation",
										"src": "307:309:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 184,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "627:24:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "660:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "652:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 177,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 180,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "676:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "668:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "668:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "693:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "685:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 181,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "685:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "651:49:2"
									},
									"src": "621:80:2"
								},
								{
									"documentation": {
										"id": 185,
										"nodeType": "StructuredDocumentation",
										"src": "707:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 189,
									"name": "ERC20InvalidSender",
									"nameLocation": "870:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 188,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 187,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "897:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 189,
												"src": "889:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 186,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "888:16:2"
									},
									"src": "864:41:2"
								},
								{
									"documentation": {
										"id": 190,
										"nodeType": "StructuredDocumentation",
										"src": "911:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 194,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1081:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1110:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 194,
												"src": "1102:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 191,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1102:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:18:2"
									},
									"src": "1075:45:2"
								},
								{
									"documentation": {
										"id": 195,
										"nodeType": "StructuredDocumentation",
										"src": "1126:345:2",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 203,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1482:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 197,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1517:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1509:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1509:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 199,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1534:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1526:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 198,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1526:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1553:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 203,
												"src": "1545:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1545:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1508:52:2"
									},
									"src": "1476:85:2"
								},
								{
									"documentation": {
										"id": 204,
										"nodeType": "StructuredDocumentation",
										"src": "1567:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 208,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1752:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 206,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1781:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 208,
												"src": "1773:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 205,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1773:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:18:2"
									},
									"src": "1746:45:2"
								},
								{
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "1797:195:2",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 213,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2003:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2031:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "2023:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2023:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2022:17:2"
									},
									"src": "1997:43:2"
								}
							],
							"scope": 310,
							"src": "278:1764:2",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 215,
								"nodeType": "StructuredDocumentation",
								"src": "2044:141:2",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 262,
							"linearizedBaseContracts": [
								262
							],
							"name": "IERC721Errors",
							"nameLocation": "2196:13:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 216,
										"nodeType": "StructuredDocumentation",
										"src": "2216:219:2",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 220,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2446:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 219,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 218,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2473:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 220,
												"src": "2465:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 217,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2465:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2464:15:2"
									},
									"src": "2440:40:2"
								},
								{
									"documentation": {
										"id": 221,
										"nodeType": "StructuredDocumentation",
										"src": "2486:132:2",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 225,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2629:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 224,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 223,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2660:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 225,
												"src": "2652:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 222,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2652:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2651:17:2"
									},
									"src": "2623:46:2"
								},
								{
									"documentation": {
										"id": 226,
										"nodeType": "StructuredDocumentation",
										"src": "2675:289:2",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 234,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "2975:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 228,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3004:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "2996:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 227,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2996:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 230,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3020:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "3012:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 229,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3012:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3037:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "3029:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3029:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2995:48:2"
									},
									"src": "2969:75:2"
								},
								{
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "3050:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 239,
									"name": "ERC721InvalidSender",
									"nameLocation": "3213:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 237,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3241:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 239,
												"src": "3233:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 236,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3233:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3232:16:2"
									},
									"src": "3207:42:2"
								},
								{
									"documentation": {
										"id": 240,
										"nodeType": "StructuredDocumentation",
										"src": "3255:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 244,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3425:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 243,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 242,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3455:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 244,
												"src": "3447:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 241,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3447:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3446:18:2"
									},
									"src": "3419:46:2"
								},
								{
									"documentation": {
										"id": 245,
										"nodeType": "StructuredDocumentation",
										"src": "3471:247:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 251,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3729:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 247,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3764:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3756:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 246,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3756:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 249,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3782:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "3774:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3774:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3755:35:2"
									},
									"src": "3723:68:2"
								},
								{
									"documentation": {
										"id": 252,
										"nodeType": "StructuredDocumentation",
										"src": "3797:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 256,
									"name": "ERC721InvalidApprover",
									"nameLocation": "3982:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4012:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 256,
												"src": "4004:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 253,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4004:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4003:18:2"
									},
									"src": "3976:46:2"
								},
								{
									"documentation": {
										"id": 257,
										"nodeType": "StructuredDocumentation",
										"src": "4028:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 261,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4236:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 260,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4266:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 261,
												"src": "4258:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4258:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4257:18:2"
									},
									"src": "4230:46:2"
								}
							],
							"scope": 310,
							"src": "2186:2092:2",
							"usedErrors": [
								220,
								225,
								234,
								239,
								244,
								251,
								256,
								261
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 263,
								"nodeType": "StructuredDocumentation",
								"src": "4280:143:2",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 309,
							"linearizedBaseContracts": [
								309
							],
							"name": "IERC1155Errors",
							"nameLocation": "4434:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 264,
										"nodeType": "StructuredDocumentation",
										"src": "4455:361:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 274,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4827:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 266,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4862:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4854:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 265,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4854:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 268,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4878:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4870:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 267,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4870:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 270,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "4895:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4887:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 269,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4887:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 272,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4911:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 274,
												"src": "4903:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 271,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4903:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4853:66:2"
									},
									"src": "4821:99:2"
								},
								{
									"documentation": {
										"id": 275,
										"nodeType": "StructuredDocumentation",
										"src": "4926:152:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 279,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5089:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5118:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "5110:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 276,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5110:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5109:16:2"
									},
									"src": "5083:43:2"
								},
								{
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "5132:159:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 284,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5302:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 283,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5333:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 284,
												"src": "5325:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 281,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5325:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5324:18:2"
									},
									"src": "5296:47:2"
								},
								{
									"documentation": {
										"id": 285,
										"nodeType": "StructuredDocumentation",
										"src": "5349:256:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 291,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5616:28:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5653:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "5645:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 286,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5645:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 289,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5671:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 291,
												"src": "5663:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 288,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5663:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5644:33:2"
									},
									"src": "5610:68:2"
								},
								{
									"documentation": {
										"id": 292,
										"nodeType": "StructuredDocumentation",
										"src": "5684:174:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 296,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "5869:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 295,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 294,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "5900:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 296,
												"src": "5892:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5892:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5891:18:2"
									},
									"src": "5863:47:2"
								},
								{
									"documentation": {
										"id": 297,
										"nodeType": "StructuredDocumentation",
										"src": "5916:197:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 301,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6124:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6155:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "6147:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 298,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6147:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6146:18:2"
									},
									"src": "6118:47:2"
								},
								{
									"documentation": {
										"id": 302,
										"nodeType": "StructuredDocumentation",
										"src": "6171:280:2",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 308,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6462:25:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6496:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "6488:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6488:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6515:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 308,
												"src": "6507:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6507:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6487:41:2"
									},
									"src": "6456:73:2"
								}
							],
							"scope": 310,
							"src": "4424:2107:2",
							"usedErrors": [
								274,
								279,
								284,
								291,
								296,
								301,
								308
							],
							"usedEvents": []
						}
					],
					"src": "112:6420:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
					"exportedSymbols": {
						"Context": [
							1194
						],
						"ERC20": [
							824
						],
						"IERC20": [
							902
						],
						"IERC20Errors": [
							214
						],
						"IERC20Metadata": [
							1128
						]
					},
					"id": 825,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 311,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol",
							"file": "./IERC20.sol",
							"id": 313,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 903,
							"src": "131:36:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 312,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 902,
										"src": "139:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol",
							"file": "./extensions/IERC20Metadata.sol",
							"id": 315,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 1129,
							"src": "168:63:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 314,
										"name": "IERC20Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1128,
										"src": "176:14:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 317,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 1195,
							"src": "232:48:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 316,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1194,
										"src": "240:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 319,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 825,
							"sourceUnit": 310,
							"src": "281:65:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 318,
										"name": "IERC20Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 214,
										"src": "289:12:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 321,
										"name": "Context",
										"nameLocations": [
											"1428:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1194,
										"src": "1428:7:3"
									},
									"id": 322,
									"nodeType": "InheritanceSpecifier",
									"src": "1428:7:3"
								},
								{
									"baseName": {
										"id": 323,
										"name": "IERC20",
										"nameLocations": [
											"1437:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 902,
										"src": "1437:6:3"
									},
									"id": 324,
									"nodeType": "InheritanceSpecifier",
									"src": "1437:6:3"
								},
								{
									"baseName": {
										"id": 325,
										"name": "IERC20Metadata",
										"nameLocations": [
											"1445:14:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1128,
										"src": "1445:14:3"
									},
									"id": 326,
									"nodeType": "InheritanceSpecifier",
									"src": "1445:14:3"
								},
								{
									"baseName": {
										"id": 327,
										"name": "IERC20Errors",
										"nameLocations": [
											"1461:12:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 214,
										"src": "1461:12:3"
									},
									"id": 328,
									"nodeType": "InheritanceSpecifier",
									"src": "1461:12:3"
								}
							],
							"canonicalName": "ERC20",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 320,
								"nodeType": "StructuredDocumentation",
								"src": "348:1052:3",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n The default value of {decimals} is 18. To change this, you should override\n this function so it returns a different value.\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification."
							},
							"fullyImplemented": true,
							"id": 824,
							"linearizedBaseContracts": [
								824,
								214,
								1128,
								902,
								1194
							],
							"name": "ERC20",
							"nameLocation": "1419:5:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 332,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1524:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1480:53:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 331,
										"keyName": "account",
										"keyNameLocation": "1496:7:3",
										"keyType": {
											"id": 329,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1488:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1480:35:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 330,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1507:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 338,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1612:11:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1540:83:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 337,
										"keyName": "account",
										"keyNameLocation": "1556:7:3",
										"keyType": {
											"id": 333,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1548:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1540:63:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 336,
											"keyName": "spender",
											"keyNameLocation": "1583:7:3",
											"keyType": {
												"id": 334,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1575:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1567:35:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 335,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1594:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 340,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1646:12:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1630:28:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 339,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1630:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 342,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1680:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1665:20:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 341,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1665:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 344,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1706:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 824,
									"src": "1691:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 343,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1691:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 360,
										"nodeType": "Block",
										"src": "1952:57:3",
										"statements": [
											{
												"expression": {
													"id": 354,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 352,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 342,
														"src": "1962:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 353,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 347,
														"src": "1970:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1962:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 355,
												"nodeType": "ExpressionStatement",
												"src": "1962:13:3"
											},
											{
												"expression": {
													"id": 358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 356,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 344,
														"src": "1985:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 357,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 349,
														"src": "1995:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1985:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 359,
												"nodeType": "ExpressionStatement",
												"src": "1985:17:3"
											}
										]
									},
									"documentation": {
										"id": 345,
										"nodeType": "StructuredDocumentation",
										"src": "1720:171:3",
										"text": " @dev Sets the values for {name} and {symbol}.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 361,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1922:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "1908:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 346,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1908:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1943:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "1929:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 348,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1929:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1907:44:3"
									},
									"returnParameters": {
										"id": 351,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1952:0:3"
									},
									"scope": 824,
									"src": "1896:113:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1115
									],
									"body": {
										"id": 369,
										"nodeType": "Block",
										"src": "2134:29:3",
										"statements": [
											{
												"expression": {
													"id": 367,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 342,
													"src": "2151:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 366,
												"id": 368,
												"nodeType": "Return",
												"src": "2144:12:3"
											}
										]
									},
									"documentation": {
										"id": 362,
										"nodeType": "StructuredDocumentation",
										"src": "2015:54:3",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 370,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2083:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2087:2:3"
									},
									"returnParameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 365,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 370,
												"src": "2119:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 364,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2119:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2118:15:3"
									},
									"scope": 824,
									"src": "2074:89:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1121
									],
									"body": {
										"id": 378,
										"nodeType": "Block",
										"src": "2338:31:3",
										"statements": [
											{
												"expression": {
													"id": 376,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 344,
													"src": "2355:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 375,
												"id": 377,
												"nodeType": "Return",
												"src": "2348:14:3"
											}
										]
									},
									"documentation": {
										"id": 371,
										"nodeType": "StructuredDocumentation",
										"src": "2169:102:3",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 379,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2285:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2291:2:3"
									},
									"returnParameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 379,
												"src": "2323:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 373,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2323:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2322:15:3"
									},
									"scope": 824,
									"src": "2276:93:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1127
									],
									"body": {
										"id": 387,
										"nodeType": "Block",
										"src": "3058:26:3",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 385,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3075:2:3",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 384,
												"id": 386,
												"nodeType": "Return",
												"src": "3068:9:3"
											}
										]
									},
									"documentation": {
										"id": 380,
										"nodeType": "StructuredDocumentation",
										"src": "2375:622:3",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the default value returned by this function, unless\n it's overridden.\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 388,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3011:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 381,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3019:2:3"
									},
									"returnParameters": {
										"id": 384,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 383,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "3051:5:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 382,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3051:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3050:7:3"
									},
									"scope": 824,
									"src": "3002:82:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										851
									],
									"body": {
										"id": 396,
										"nodeType": "Block",
										"src": "3205:36:3",
										"statements": [
											{
												"expression": {
													"id": 394,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 340,
													"src": "3222:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 393,
												"id": 395,
												"nodeType": "Return",
												"src": "3215:19:3"
											}
										]
									},
									"documentation": {
										"id": 389,
										"nodeType": "StructuredDocumentation",
										"src": "3090:49:3",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 397,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3153:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3164:2:3"
									},
									"returnParameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 397,
												"src": "3196:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3196:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3195:9:3"
									},
									"scope": 824,
									"src": "3144:97:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										859
									],
									"body": {
										"id": 409,
										"nodeType": "Block",
										"src": "3373:42:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 405,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 332,
														"src": "3390:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 407,
													"indexExpression": {
														"id": 406,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 400,
														"src": "3400:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3390:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 404,
												"id": 408,
												"nodeType": "Return",
												"src": "3383:25:3"
											}
										]
									},
									"documentation": {
										"id": 398,
										"nodeType": "StructuredDocumentation",
										"src": "3247:47:3",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3308:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3326:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "3318:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 399,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3318:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3317:17:3"
									},
									"returnParameters": {
										"id": 404,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 403,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 410,
												"src": "3364:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 402,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3364:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3363:9:3"
									},
									"scope": 824,
									"src": "3299:116:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										869
									],
									"body": {
										"id": 433,
										"nodeType": "Block",
										"src": "3685:103:3",
										"statements": [
											{
												"assignments": [
													421
												],
												"declarations": [
													{
														"constant": false,
														"id": 421,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "3703:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 433,
														"src": "3695:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 420,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3695:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 424,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 422,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1176,
														"src": "3711:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3711:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3695:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 426,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 421,
															"src": "3743:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 427,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "3750:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 428,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 415,
															"src": "3754:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 425,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "3733:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 429,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3733:27:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 430,
												"nodeType": "ExpressionStatement",
												"src": "3733:27:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 431,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3777:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 419,
												"id": 432,
												"nodeType": "Return",
												"src": "3770:11:3"
											}
										]
									},
									"documentation": {
										"id": 411,
										"nodeType": "StructuredDocumentation",
										"src": "3421:184:3",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `value`."
									},
									"functionSelector": "a9059cbb",
									"id": 434,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "3619:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 416,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3636:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "3628:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3628:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3648:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "3640:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 414,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3640:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3627:27:3"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "3679:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 417,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3679:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3678:6:3"
									},
									"scope": 824,
									"src": "3610:178:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										879
									],
									"body": {
										"id": 450,
										"nodeType": "Block",
										"src": "3935:51:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 444,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 338,
															"src": "3952:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 446,
														"indexExpression": {
															"id": 445,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 437,
															"src": "3964:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "3952:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 448,
													"indexExpression": {
														"id": 447,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 439,
														"src": "3971:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3952:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 443,
												"id": 449,
												"nodeType": "Return",
												"src": "3945:34:3"
											}
										]
									},
									"documentation": {
										"id": 435,
										"nodeType": "StructuredDocumentation",
										"src": "3794:47:3",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 451,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "3855:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3873:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 451,
												"src": "3865:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 436,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3865:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3888:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 451,
												"src": "3880:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 438,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3880:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3864:32:3"
									},
									"returnParameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 451,
												"src": "3926:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3926:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3925:9:3"
									},
									"scope": 824,
									"src": "3846:140:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										889
									],
									"body": {
										"id": 474,
										"nodeType": "Block",
										"src": "4372:107:3",
										"statements": [
											{
												"assignments": [
													462
												],
												"declarations": [
													{
														"constant": false,
														"id": 462,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4390:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 474,
														"src": "4382:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 461,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4382:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 465,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 463,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1176,
														"src": "4398:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4398:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4382:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 467,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 462,
															"src": "4429:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 468,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 454,
															"src": "4436:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 469,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 456,
															"src": "4445:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 466,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															715,
															775
														],
														"referencedDeclaration": 715,
														"src": "4420:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 470,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4420:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 471,
												"nodeType": "ExpressionStatement",
												"src": "4420:31:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 472,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4468:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 460,
												"id": 473,
												"nodeType": "Return",
												"src": "4461:11:3"
											}
										]
									},
									"documentation": {
										"id": 452,
										"nodeType": "StructuredDocumentation",
										"src": "3992:296:3",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 475,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4302:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 454,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4318:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "4310:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 453,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4335:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "4327:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4309:32:3"
									},
									"returnParameters": {
										"id": 460,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 459,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "4366:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 458,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4366:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4365:6:3"
									},
									"scope": 824,
									"src": "4293:186:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										901
									],
									"body": {
										"id": 506,
										"nodeType": "Block",
										"src": "5132:151:3",
										"statements": [
											{
												"assignments": [
													488
												],
												"declarations": [
													{
														"constant": false,
														"id": 488,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5150:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 506,
														"src": "5142:15:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 487,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5142:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 491,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 489,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1176,
														"src": "5160:10:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 490,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5160:12:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5142:30:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 493,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "5198:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 494,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 488,
															"src": "5204:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 495,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 482,
															"src": "5213:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 492,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "5182:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 496,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5182:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 497,
												"nodeType": "ExpressionStatement",
												"src": "5182:37:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 499,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 478,
															"src": "5239:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 500,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 480,
															"src": "5245:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 501,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 482,
															"src": "5249:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 498,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 554,
														"src": "5229:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 502,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5229:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 503,
												"nodeType": "ExpressionStatement",
												"src": "5229:26:3"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5272:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 486,
												"id": 505,
												"nodeType": "Return",
												"src": "5265:11:3"
											}
										]
									},
									"documentation": {
										"id": 476,
										"nodeType": "StructuredDocumentation",
										"src": "4485:549:3",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `value`.\n - the caller must have allowance for ``from``'s tokens of at least\n `value`."
									},
									"functionSelector": "23b872dd",
									"id": 507,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5048:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5069:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5061:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 477,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5061:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5083:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5075:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 479,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5075:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5095:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5087:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5087:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5060:41:3"
									},
									"returnParameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 507,
												"src": "5126:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 484,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5126:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5125:6:3"
									},
									"scope": 824,
									"src": "5039:244:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 553,
										"nodeType": "Block",
										"src": "5725:231:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 517,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 510,
														"src": "5739:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 520,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5755:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 519,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5747:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 518,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5747:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 521,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5747:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5739:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 531,
												"nodeType": "IfStatement",
												"src": "5735:86:3",
												"trueBody": {
													"id": 530,
													"nodeType": "Block",
													"src": "5759:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 526,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5807:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 525,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5799:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 524,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5799:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 527,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5799:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 523,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 189,
																	"src": "5780:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 528,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5780:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 529,
															"nodeType": "RevertStatement",
															"src": "5773:37:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 532,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 512,
														"src": "5834:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 535,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "5848:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 534,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "5840:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 533,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "5840:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 536,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "5840:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "5834:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 546,
												"nodeType": "IfStatement",
												"src": "5830:86:3",
												"trueBody": {
													"id": 545,
													"nodeType": "Block",
													"src": "5852:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 541,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "5902:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 540,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "5894:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 539,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "5894:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 542,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5894:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 538,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "5873:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 543,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5873:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 544,
															"nodeType": "RevertStatement",
															"src": "5866:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 548,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 510,
															"src": "5933:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 549,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 512,
															"src": "5939:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 550,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 514,
															"src": "5943:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 547,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "5925:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5925:24:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 552,
												"nodeType": "ExpressionStatement",
												"src": "5925:24:3"
											}
										]
									},
									"documentation": {
										"id": 508,
										"nodeType": "StructuredDocumentation",
										"src": "5289:362:3",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 554,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "5665:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5683:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5675:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5675:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5697:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5689:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 511,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5689:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 514,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5709:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 554,
												"src": "5701:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 513,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5701:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5674:41:3"
									},
									"returnParameters": {
										"id": 516,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5725:0:3"
									},
									"scope": 824,
									"src": "5656:300:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 630,
										"nodeType": "Block",
										"src": "6346:1032:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 564,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 557,
														"src": "6360:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 567,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6376:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 566,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6368:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 565,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6368:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 568,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6368:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6360:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 601,
													"nodeType": "Block",
													"src": "6534:362:3",
													"statements": [
														{
															"assignments": [
																576
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 576,
																	"mutability": "mutable",
																	"name": "fromBalance",
																	"nameLocation": "6556:11:3",
																	"nodeType": "VariableDeclaration",
																	"scope": 601,
																	"src": "6548:19:3",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"typeName": {
																		"id": 575,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "6548:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 580,
															"initialValue": {
																"baseExpression": {
																	"id": 577,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 332,
																	"src": "6570:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 579,
																"indexExpression": {
																	"id": 578,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 557,
																	"src": "6580:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "6570:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "6548:37:3"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 583,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 581,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 576,
																	"src": "6603:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 582,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 561,
																	"src": "6617:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6603:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 591,
															"nodeType": "IfStatement",
															"src": "6599:115:3",
															"trueBody": {
																"id": 590,
																"nodeType": "Block",
																"src": "6624:90:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 585,
																					"name": "from",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 557,
																					"src": "6674:4:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 586,
																					"name": "fromBalance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 576,
																					"src": "6680:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 587,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 561,
																					"src": "6693:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 584,
																				"name": "ERC20InsufficientBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 184,
																				"src": "6649:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 588,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6649:50:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 589,
																		"nodeType": "RevertStatement",
																		"src": "6642:57:3"
																	}
																]
															}
														},
														{
															"id": 600,
															"nodeType": "UncheckedBlock",
															"src": "6727:159:3",
															"statements": [
																{
																	"expression": {
																		"id": 598,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 592,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 332,
																				"src": "6834:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 594,
																			"indexExpression": {
																				"id": 593,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 557,
																				"src": "6844:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "6834:15:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 597,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 595,
																				"name": "fromBalance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 576,
																				"src": "6852:11:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "-",
																			"rightExpression": {
																				"id": 596,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 561,
																				"src": "6866:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "6852:19:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6834:37:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 599,
																	"nodeType": "ExpressionStatement",
																	"src": "6834:37:3"
																}
															]
														}
													]
												},
												"id": 602,
												"nodeType": "IfStatement",
												"src": "6356:540:3",
												"trueBody": {
													"id": 574,
													"nodeType": "Block",
													"src": "6380:148:3",
													"statements": [
														{
															"expression": {
																"id": 572,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 570,
																	"name": "_totalSupply",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 340,
																	"src": "6496:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"id": 571,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 561,
																	"src": "6512:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6496:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 573,
															"nodeType": "ExpressionStatement",
															"src": "6496:21:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 608,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 603,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 559,
														"src": "6910:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6924:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 605,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6916:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 604,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6916:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 607,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6916:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6910:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 622,
													"nodeType": "Block",
													"src": "7125:206:3",
													"statements": [
														{
															"id": 621,
															"nodeType": "UncheckedBlock",
															"src": "7139:182:3",
															"statements": [
																{
																	"expression": {
																		"id": 619,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 615,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 332,
																				"src": "7284:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 617,
																			"indexExpression": {
																				"id": 616,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 559,
																				"src": "7294:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "7284:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"id": 618,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 561,
																			"src": "7301:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7284:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 620,
																	"nodeType": "ExpressionStatement",
																	"src": "7284:22:3"
																}
															]
														}
													]
												},
												"id": 623,
												"nodeType": "IfStatement",
												"src": "6906:425:3",
												"trueBody": {
													"id": 614,
													"nodeType": "Block",
													"src": "6928:191:3",
													"statements": [
														{
															"id": 613,
															"nodeType": "UncheckedBlock",
															"src": "6942:167:3",
															"statements": [
																{
																	"expression": {
																		"id": 611,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 609,
																			"name": "_totalSupply",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 340,
																			"src": "7073:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"id": 610,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 561,
																			"src": "7089:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "7073:21:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 612,
																	"nodeType": "ExpressionStatement",
																	"src": "7073:21:3"
																}
															]
														}
													]
												}
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 625,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 557,
															"src": "7355:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 626,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 559,
															"src": "7361:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 627,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 561,
															"src": "7365:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 624,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 836,
														"src": "7346:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 628,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 629,
												"nodeType": "EmitStatement",
												"src": "7341:30:3"
											}
										]
									},
									"documentation": {
										"id": 555,
										"nodeType": "StructuredDocumentation",
										"src": "5962:304:3",
										"text": " @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\n (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\n this function.\n Emits a {Transfer} event."
									},
									"id": 631,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "6280:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "6296:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "6288:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 556,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6288:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "6310:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "6302:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 558,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6302:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "6322:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "6314:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 560,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6314:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6287:41:3"
									},
									"returnParameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6346:0:3"
									},
									"scope": 824,
									"src": "6271:1107:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 663,
										"nodeType": "Block",
										"src": "7777:152:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 639,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 634,
														"src": "7791:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 642,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "7810:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "7802:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 640,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "7802:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 643,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7802:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "7791:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 653,
												"nodeType": "IfStatement",
												"src": "7787:91:3",
												"trueBody": {
													"id": 652,
													"nodeType": "Block",
													"src": "7814:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 648,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "7864:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 647,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "7856:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 646,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "7856:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 649,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7856:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 645,
																	"name": "ERC20InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 194,
																	"src": "7835:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 650,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7835:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 651,
															"nodeType": "RevertStatement",
															"src": "7828:39:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 657,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7903:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 656,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "7895:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 655,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "7895:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 658,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7895:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 659,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 634,
															"src": "7907:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 660,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "7916:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 654,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "7887:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7887:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 662,
												"nodeType": "ExpressionStatement",
												"src": "7887:35:3"
											}
										]
									},
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "7384:332:3",
										"text": " @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\n Relies on the `_update` mechanism\n Emits a {Transfer} event with `from` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead."
									},
									"id": 664,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "7730:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "7744:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "7736:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7736:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "7761:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "7753:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7753:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7735:32:3"
									},
									"returnParameters": {
										"id": 638,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7777:0:3"
									},
									"scope": 824,
									"src": "7721:208:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 696,
										"nodeType": "Block",
										"src": "8303:150:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 672,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 667,
														"src": "8317:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 675,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8336:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 674,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "8328:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 673,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "8328:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 676,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8328:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "8317:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 686,
												"nodeType": "IfStatement",
												"src": "8313:89:3",
												"trueBody": {
													"id": 685,
													"nodeType": "Block",
													"src": "8340:62:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 681,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "8388:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 680,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "8380:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 679,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "8380:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 682,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8380:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 678,
																	"name": "ERC20InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 189,
																	"src": "8361:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 683,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8361:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 684,
															"nodeType": "RevertStatement",
															"src": "8354:37:3"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 688,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "8419:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 691,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8436:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 690,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "8428:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 689,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "8428:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 692,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8428:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 693,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "8440:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 687,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "8411:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8411:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 695,
												"nodeType": "ExpressionStatement",
												"src": "8411:35:3"
											}
										]
									},
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "7935:307:3",
										"text": " @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\n Relies on the `_update` mechanism.\n Emits a {Transfer} event with `to` set to the zero address.\n NOTE: This function is not virtual, {_update} should be overridden instead"
									},
									"id": 697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "8256:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8270:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "8262:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8262:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8287:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "8279:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8279:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8261:32:3"
									},
									"returnParameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8303:0:3"
									},
									"scope": 824,
									"src": "8247:206:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 714,
										"nodeType": "Block",
										"src": "9063:54:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 708,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 700,
															"src": "9082:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 709,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 702,
															"src": "9089:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 710,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 704,
															"src": "9098:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "74727565",
															"id": 711,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9105:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 707,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															715,
															775
														],
														"referencedDeclaration": 775,
														"src": "9073:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
															"typeString": "function (address,address,uint256,bool)"
														}
													},
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9073:37:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 713,
												"nodeType": "ExpressionStatement",
												"src": "9073:37:3"
											}
										]
									},
									"documentation": {
										"id": 698,
										"nodeType": "StructuredDocumentation",
										"src": "8459:525:3",
										"text": " @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 715,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "8998:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 700,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9015:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "9007:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 699,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9007:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9030:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "9022:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 701,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9022:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9047:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 715,
												"src": "9039:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9006:47:3"
									},
									"returnParameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9063:0:3"
									},
									"scope": 824,
									"src": "8989:128:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 774,
										"nodeType": "Block",
										"src": "10047:334:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 727,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 718,
														"src": "10061:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 730,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10078:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 729,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10070:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 728,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10070:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 731,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10070:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10061:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 741,
												"nodeType": "IfStatement",
												"src": "10057:89:3",
												"trueBody": {
													"id": 740,
													"nodeType": "Block",
													"src": "10082:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 736,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10132:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 735,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10124:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 734,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10124:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 737,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10124:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 733,
																	"name": "ERC20InvalidApprover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 208,
																	"src": "10103:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 738,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10103:32:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 739,
															"nodeType": "RevertStatement",
															"src": "10096:39:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 747,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 742,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 720,
														"src": "10159:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 745,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10178:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 744,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10170:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 743,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10170:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 746,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10170:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10159:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 756,
												"nodeType": "IfStatement",
												"src": "10155:90:3",
												"trueBody": {
													"id": 755,
													"nodeType": "Block",
													"src": "10182:63:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 751,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10231:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 750,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10223:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 749,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10223:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 752,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10223:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 748,
																	"name": "ERC20InvalidSpender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 213,
																	"src": "10203:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$_t_error_$",
																		"typeString": "function (address) pure returns (error)"
																	}
																},
																"id": 753,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10203:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 754,
															"nodeType": "RevertStatement",
															"src": "10196:38:3"
														}
													]
												}
											},
											{
												"expression": {
													"id": 763,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 757,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 338,
																"src": "10254:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 760,
															"indexExpression": {
																"id": 758,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 718,
																"src": "10266:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "10254:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 761,
														"indexExpression": {
															"id": 759,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 720,
															"src": "10273:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "10254:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 762,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 722,
														"src": "10284:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10254:35:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 764,
												"nodeType": "ExpressionStatement",
												"src": "10254:35:3"
											},
											{
												"condition": {
													"id": 765,
													"name": "emitEvent",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 724,
													"src": "10303:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 773,
												"nodeType": "IfStatement",
												"src": "10299:76:3",
												"trueBody": {
													"id": 772,
													"nodeType": "Block",
													"src": "10314:61:3",
													"statements": [
														{
															"eventCall": {
																"arguments": [
																	{
																		"id": 767,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 718,
																		"src": "10342:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 768,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 720,
																		"src": "10349:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 769,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 722,
																		"src": "10358:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 766,
																	"name": "Approval",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "10333:8:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256)"
																	}
																},
																"id": 770,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10333:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 771,
															"nodeType": "EmitStatement",
															"src": "10328:36:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 716,
										"nodeType": "StructuredDocumentation",
										"src": "9123:821:3",
										"text": " @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\n By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\n `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\n `Approval` event during `transferFrom` operations.\n Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\n true using the following override:\n ```\n function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\n     super._approve(owner, spender, value, true);\n }\n ```\n Requirements are the same as {_approve}."
									},
									"id": 775,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "9958:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 725,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 718,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9975:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "9967:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 717,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9967:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 720,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9990:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "9982:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 719,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9982:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 722,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10007:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "9999:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 721,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9999:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 724,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "10019:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 775,
												"src": "10014:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 723,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "10014:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9966:63:3"
									},
									"returnParameters": {
										"id": 726,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10047:0:3"
									},
									"scope": 824,
									"src": "9949:432:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 822,
										"nodeType": "Block",
										"src": "10752:388:3",
										"statements": [
											{
												"assignments": [
													786
												],
												"declarations": [
													{
														"constant": false,
														"id": 786,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "10770:16:3",
														"nodeType": "VariableDeclaration",
														"scope": 822,
														"src": "10762:24:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 785,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10762:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 791,
												"initialValue": {
													"arguments": [
														{
															"id": 788,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 778,
															"src": "10799:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 789,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 780,
															"src": "10806:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 787,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 451,
														"src": "10789:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 790,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10789:25:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10762:52:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 798,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 792,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 786,
														"src": "10828:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 795,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10853:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 794,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "10853:7:3",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 793,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "10848:4:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 796,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10848:13:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 797,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "10862:3:3",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "10848:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "10828:37:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 821,
												"nodeType": "IfStatement",
												"src": "10824:310:3",
												"trueBody": {
													"id": 820,
													"nodeType": "Block",
													"src": "10867:267:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 801,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 799,
																	"name": "currentAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 786,
																	"src": "10885:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 800,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 782,
																	"src": "10904:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10885:24:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 809,
															"nodeType": "IfStatement",
															"src": "10881:130:3",
															"trueBody": {
																"id": 808,
																"nodeType": "Block",
																"src": "10911:100:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 803,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 780,
																					"src": "10963:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 804,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 786,
																					"src": "10972:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				{
																					"id": 805,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 782,
																					"src": "10990:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 802,
																				"name": "ERC20InsufficientAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 203,
																				"src": "10936:26:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$_t_error_$",
																					"typeString": "function (address,uint256,uint256) pure returns (error)"
																				}
																			},
																			"id": 806,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "10936:60:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 807,
																		"nodeType": "RevertStatement",
																		"src": "10929:67:3"
																	}
																]
															}
														},
														{
															"id": 819,
															"nodeType": "UncheckedBlock",
															"src": "11024:100:3",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 811,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 778,
																				"src": "11061:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 812,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 780,
																				"src": "11068:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 815,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 813,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 786,
																					"src": "11077:16:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 814,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 782,
																					"src": "11096:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "11077:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"hexValue": "66616c7365",
																				"id": 816,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "bool",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "11103:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				},
																				"value": "false"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			],
																			"id": 810,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [
																				715,
																				775
																			],
																			"referencedDeclaration": 775,
																			"src": "11052:8:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bool_$returns$__$",
																				"typeString": "function (address,address,uint256,bool)"
																			}
																		},
																		"id": 817,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "11052:57:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 818,
																	"nodeType": "ExpressionStatement",
																	"src": "11052:57:3"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 776,
										"nodeType": "StructuredDocumentation",
										"src": "10387:271:3",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `value`.\n Does not update the allowance value in case of infinite allowance.\n Revert if not enough allowance is available.\n Does not emit an {Approval} event."
									},
									"id": 823,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "10672:15:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 783,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 778,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10696:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "10688:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 777,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10688:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 780,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10711:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "10703:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 779,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10703:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 782,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10728:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "10720:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 781,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10720:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10687:47:3"
									},
									"returnParameters": {
										"id": 784,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10752:0:3"
									},
									"scope": 824,
									"src": "10663:477:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 825,
							"src": "1401:9741:3",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213
							],
							"usedEvents": [
								836,
								845
							]
						}
					],
					"src": "105:11038:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol",
					"exportedSymbols": {
						"IERC20": [
							902
						]
					},
					"id": 903,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 826,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 827,
								"nodeType": "StructuredDocumentation",
								"src": "132:70:4",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 902,
							"linearizedBaseContracts": [
								902
							],
							"name": "IERC20",
							"nameLocation": "213:6:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 828,
										"nodeType": "StructuredDocumentation",
										"src": "226:158:4",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 836,
									"name": "Transfer",
									"nameLocation": "395:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 830,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "420:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "404:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 829,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "404:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 832,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "442:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "426:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 831,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "426:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 834,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "454:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 836,
												"src": "446:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "446:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "403:57:4"
									},
									"src": "389:72:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 837,
										"nodeType": "StructuredDocumentation",
										"src": "467:148:4",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 845,
									"name": "Approval",
									"nameLocation": "626:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 844,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 839,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "651:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "635:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 838,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "635:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 841,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "674:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "658:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 840,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "658:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 843,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "691:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 845,
												"src": "683:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 842,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "634:63:4"
									},
									"src": "620:78:4"
								},
								{
									"documentation": {
										"id": 846,
										"nodeType": "StructuredDocumentation",
										"src": "704:65:4",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 851,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "783:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 847,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "794:2:4"
									},
									"returnParameters": {
										"id": 850,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 849,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 851,
												"src": "820:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 848,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "820:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "819:9:4"
									},
									"scope": 902,
									"src": "774:55:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 852,
										"nodeType": "StructuredDocumentation",
										"src": "835:71:4",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 859,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "920:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 855,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 854,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "938:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "930:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 853,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "930:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "929:17:4"
									},
									"returnParameters": {
										"id": 858,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 857,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 859,
												"src": "970:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 856,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "969:9:4"
									},
									"scope": 902,
									"src": "911:68:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 860,
										"nodeType": "StructuredDocumentation",
										"src": "985:213:4",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 869,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1212:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 865,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 862,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1229:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1221:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 861,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1221:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 864,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1241:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1233:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 863,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1233:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1220:27:4"
									},
									"returnParameters": {
										"id": 868,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 867,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 869,
												"src": "1266:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 866,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1266:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1265:6:4"
									},
									"scope": 902,
									"src": "1203:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 870,
										"nodeType": "StructuredDocumentation",
										"src": "1278:264:4",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 879,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1556:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 872,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1574:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "1566:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 871,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1566:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1589:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "1581:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 873,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1581:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1565:32:4"
									},
									"returnParameters": {
										"id": 878,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 877,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 879,
												"src": "1621:7:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 876,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1620:9:4"
									},
									"scope": 902,
									"src": "1547:83:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 880,
										"nodeType": "StructuredDocumentation",
										"src": "1636:667:4",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 889,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2317:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2333:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "2325:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 881,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2325:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2350:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "2342:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 883,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2342:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2324:32:4"
									},
									"returnParameters": {
										"id": 888,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 887,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 889,
												"src": "2375:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 886,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2375:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2374:6:4"
									},
									"scope": 902,
									"src": "2308:73:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 890,
										"nodeType": "StructuredDocumentation",
										"src": "2387:297:4",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 901,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2698:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 897,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 892,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2719:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2711:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 891,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2711:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 894,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2733:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2725:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 893,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2725:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 896,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2745:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2737:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 895,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2737:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2710:41:4"
									},
									"returnParameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 901,
												"src": "2770:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 898,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2770:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2769:6:4"
									},
									"scope": 902,
									"src": "2689:87:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 903,
							"src": "203:2575:4",
							"usedErrors": [],
							"usedEvents": [
								836,
								845
							]
						}
					],
					"src": "106:2673:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol",
					"exportedSymbols": {
						"Context": [
							1194
						],
						"ERC20": [
							824
						],
						"ERC20Burnable": [
							948
						]
					},
					"id": 949,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 904,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "124:24:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 906,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 949,
							"sourceUnit": 825,
							"src": "150:35:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 905,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 824,
										"src": "158:5:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/Context.sol",
							"file": "../../../utils/Context.sol",
							"id": 908,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 949,
							"sourceUnit": 1195,
							"src": "186:51:5",
							"symbolAliases": [
								{
									"foreign": {
										"id": 907,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1194,
										"src": "194:7:5",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 910,
										"name": "Context",
										"nameLocations": [
											"483:7:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1194,
										"src": "483:7:5"
									},
									"id": 911,
									"nodeType": "InheritanceSpecifier",
									"src": "483:7:5"
								},
								{
									"baseName": {
										"id": 912,
										"name": "ERC20",
										"nameLocations": [
											"492:5:5"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 824,
										"src": "492:5:5"
									},
									"id": 913,
									"nodeType": "InheritanceSpecifier",
									"src": "492:5:5"
								}
							],
							"canonicalName": "ERC20Burnable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 909,
								"nodeType": "StructuredDocumentation",
								"src": "239:208:5",
								"text": " @dev Extension of {ERC20} that allows token holders to destroy both their own\n tokens and those that they have an allowance for, in a way that can be\n recognized off-chain (via event analysis)."
							},
							"fullyImplemented": true,
							"id": 948,
							"linearizedBaseContracts": [
								948,
								824,
								214,
								1128,
								902,
								1194
							],
							"name": "ERC20Burnable",
							"nameLocation": "466:13:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 925,
										"nodeType": "Block",
										"src": "662:43:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 920,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1176,
																"src": "678:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 921,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "678:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 922,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 916,
															"src": "692:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 919,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "672:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 923,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "672:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 924,
												"nodeType": "ExpressionStatement",
												"src": "672:26:5"
											}
										]
									},
									"documentation": {
										"id": 914,
										"nodeType": "StructuredDocumentation",
										"src": "504:109:5",
										"text": " @dev Destroys a `value` amount of tokens from the caller.\n See {ERC20-_burn}."
									},
									"functionSelector": "42966c68",
									"id": 926,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "627:4:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 916,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "640:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 926,
												"src": "632:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "632:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "631:15:5"
									},
									"returnParameters": {
										"id": 918,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "662:0:5"
									},
									"scope": 948,
									"src": "618:87:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 946,
										"nodeType": "Block",
										"src": "1086:93:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 935,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 929,
															"src": "1112:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 936,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1176,
																"src": "1121:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 937,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1121:12:5",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 938,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 931,
															"src": "1135:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 934,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "1096:15:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 939,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1096:45:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 940,
												"nodeType": "ExpressionStatement",
												"src": "1096:45:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 942,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 929,
															"src": "1157:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 943,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 931,
															"src": "1166:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 941,
														"name": "_burn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 697,
														"src": "1151:5:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 944,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1151:21:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 945,
												"nodeType": "ExpressionStatement",
												"src": "1151:21:5"
											}
										]
									},
									"documentation": {
										"id": 927,
										"nodeType": "StructuredDocumentation",
										"src": "711:305:5",
										"text": " @dev Destroys a `value` amount of tokens from `account`, deducting from\n the caller's allowance.\n See {ERC20-_burn} and {ERC20-allowance}.\n Requirements:\n - the caller must have allowance for ``accounts``'s tokens of at least\n `value`."
									},
									"functionSelector": "79cc6790",
									"id": 947,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "burnFrom",
									"nameLocation": "1030:8:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 932,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 929,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1047:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "1039:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 928,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1039:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 931,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1064:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 947,
												"src": "1056:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 930,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1056:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1038:32:5"
									},
									"returnParameters": {
										"id": 933,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1086:0:5"
									},
									"scope": 948,
									"src": "1021:158:5",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 949,
							"src": "448:733:5",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213
							],
							"usedEvents": [
								836,
								845
							]
						}
					],
					"src": "124:1058:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol",
					"exportedSymbols": {
						"ECDSA": [
							2192
						],
						"EIP712": [
							2419
						],
						"ERC20": [
							824
						],
						"ERC20Permit": [
							1102
						],
						"IERC20Permit": [
							1164
						],
						"Nonces": [
							1262
						]
					},
					"id": 1103,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 950,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "122:24:6"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol",
							"file": "./IERC20Permit.sol",
							"id": 952,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1103,
							"sourceUnit": 1165,
							"src": "148:48:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 951,
										"name": "IERC20Permit",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1164,
										"src": "156:12:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
							"file": "../ERC20.sol",
							"id": 954,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1103,
							"sourceUnit": 825,
							"src": "197:35:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 953,
										"name": "ERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 824,
										"src": "205:5:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol",
							"file": "../../../utils/cryptography/ECDSA.sol",
							"id": 956,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1103,
							"sourceUnit": 2193,
							"src": "233:60:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 955,
										"name": "ECDSA",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2192,
										"src": "241:5:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol",
							"file": "../../../utils/cryptography/EIP712.sol",
							"id": 958,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1103,
							"sourceUnit": 2420,
							"src": "294:62:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 957,
										"name": "EIP712",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2419,
										"src": "302:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/Nonces.sol",
							"file": "../../../utils/Nonces.sol",
							"id": 960,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1103,
							"sourceUnit": 1263,
							"src": "357:49:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 959,
										"name": "Nonces",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1262,
										"src": "365:6:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 962,
										"name": "ERC20",
										"nameLocations": [
											"929:5:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 824,
										"src": "929:5:6"
									},
									"id": 963,
									"nodeType": "InheritanceSpecifier",
									"src": "929:5:6"
								},
								{
									"baseName": {
										"id": 964,
										"name": "IERC20Permit",
										"nameLocations": [
											"936:12:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1164,
										"src": "936:12:6"
									},
									"id": 965,
									"nodeType": "InheritanceSpecifier",
									"src": "936:12:6"
								},
								{
									"baseName": {
										"id": 966,
										"name": "EIP712",
										"nameLocations": [
											"950:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 2419,
										"src": "950:6:6"
									},
									"id": 967,
									"nodeType": "InheritanceSpecifier",
									"src": "950:6:6"
								},
								{
									"baseName": {
										"id": 968,
										"name": "Nonces",
										"nameLocations": [
											"958:6:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1262,
										"src": "958:6:6"
									},
									"id": 969,
									"nodeType": "InheritanceSpecifier",
									"src": "958:6:6"
								}
							],
							"canonicalName": "ERC20Permit",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 961,
								"nodeType": "StructuredDocumentation",
								"src": "408:487:6",
								"text": " @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."
							},
							"fullyImplemented": true,
							"id": 1102,
							"linearizedBaseContracts": [
								1102,
								1262,
								2419,
								172,
								1164,
								824,
								214,
								1128,
								902,
								1194
							],
							"name": "ERC20Permit",
							"nameLocation": "914:11:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 974,
									"mutability": "constant",
									"name": "PERMIT_TYPEHASH",
									"nameLocation": "996:15:6",
									"nodeType": "VariableDeclaration",
									"scope": 1102,
									"src": "971:146:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 970,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "971:7:6",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "5065726d69742861646472657373206f776e65722c61646472657373207370656e6465722c75696e743235362076616c75652c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529",
												"id": 972,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "1032:84:6",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												},
												"value": "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9",
													"typeString": "literal_string \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\""
												}
											],
											"id": 971,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "1022:9:6",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 973,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "1022:95:6",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 975,
										"nodeType": "StructuredDocumentation",
										"src": "1124:52:6",
										"text": " @dev Permit deadline has expired."
									},
									"errorSelector": "62791302",
									"id": 979,
									"name": "ERC2612ExpiredSignature",
									"nameLocation": "1187:23:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 978,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 977,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1219:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 979,
												"src": "1211:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 976,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1211:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1210:18:6"
									},
									"src": "1181:48:6"
								},
								{
									"documentation": {
										"id": 980,
										"nodeType": "StructuredDocumentation",
										"src": "1235:45:6",
										"text": " @dev Mismatched signature."
									},
									"errorSelector": "4b800e46",
									"id": 986,
									"name": "ERC2612InvalidSigner",
									"nameLocation": "1291:20:6",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 985,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "signer",
												"nameLocation": "1320:6:6",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "1312:14:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 981,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1312:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 984,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1336:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 986,
												"src": "1328:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 983,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1328:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1311:31:6"
									},
									"src": "1285:58:6"
								},
								{
									"body": {
										"id": 996,
										"nodeType": "Block",
										"src": "1624:2:6",
										"statements": []
									},
									"documentation": {
										"id": 987,
										"nodeType": "StructuredDocumentation",
										"src": "1349:220:6",
										"text": " @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n It's a good idea to use the same `name` that is defined as the ERC20 token name."
									},
									"id": 997,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"id": 992,
													"name": "name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 989,
													"src": "1613:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												{
													"hexValue": "31",
													"id": 993,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1619:3:6",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
														"typeString": "literal_string \"1\""
													},
													"value": "1"
												}
											],
											"id": 994,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 991,
												"name": "EIP712",
												"nameLocations": [
													"1606:6:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 2419,
												"src": "1606:6:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "1606:17:6"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 990,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 989,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "1600:4:6",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "1586:18:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 988,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1586:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1585:20:6"
									},
									"returnParameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1624:0:6"
									},
									"scope": 1102,
									"src": "1574:52:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1149
									],
									"body": {
										"id": 1073,
										"nodeType": "Block",
										"src": "1869:483:6",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1018,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1015,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1883:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1016,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1889:9:6",
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "1883:15:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"id": 1017,
														"name": "deadline",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1006,
														"src": "1901:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1883:26:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1024,
												"nodeType": "IfStatement",
												"src": "1879:97:6",
												"trueBody": {
													"id": 1023,
													"nodeType": "Block",
													"src": "1911:65:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1020,
																		"name": "deadline",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1006,
																		"src": "1956:8:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1019,
																	"name": "ERC2612ExpiredSignature",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 979,
																	"src": "1932:23:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256) pure returns (error)"
																	}
																},
																"id": 1021,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1932:33:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1022,
															"nodeType": "RevertStatement",
															"src": "1925:40:6"
														}
													]
												}
											},
											{
												"assignments": [
													1026
												],
												"declarations": [
													{
														"constant": false,
														"id": 1026,
														"mutability": "mutable",
														"name": "structHash",
														"nameLocation": "1994:10:6",
														"nodeType": "VariableDeclaration",
														"scope": 1073,
														"src": "1986:18:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1025,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "1986:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1040,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1030,
																	"name": "PERMIT_TYPEHASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 974,
																	"src": "2028:15:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1031,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1000,
																	"src": "2045:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1032,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1002,
																	"src": "2052:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 1033,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1004,
																	"src": "2061:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 1035,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1000,
																			"src": "2078:5:6",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1034,
																		"name": "_useNonce",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1236,
																		"src": "2068:9:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
																			"typeString": "function (address) returns (uint256)"
																		}
																	},
																	"id": 1036,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2068:16:6",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 1037,
																	"name": "deadline",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1006,
																	"src": "2086:8:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 1028,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2017:3:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 1029,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2021:6:6",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "2017:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 1038,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2017:78:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1027,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2007:9:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 1039,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2007:89:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1986:110:6"
											},
											{
												"assignments": [
													1042
												],
												"declarations": [
													{
														"constant": false,
														"id": 1042,
														"mutability": "mutable",
														"name": "hash",
														"nameLocation": "2115:4:6",
														"nodeType": "VariableDeclaration",
														"scope": 1073,
														"src": "2107:12:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1041,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "2107:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1046,
												"initialValue": {
													"arguments": [
														{
															"id": 1044,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1026,
															"src": "2139:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1043,
														"name": "_hashTypedDataV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2352,
														"src": "2122:16:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32) view returns (bytes32)"
														}
													},
													"id": 1045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2122:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2107:43:6"
											},
											{
												"assignments": [
													1048
												],
												"declarations": [
													{
														"constant": false,
														"id": 1048,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "2169:6:6",
														"nodeType": "VariableDeclaration",
														"scope": 1073,
														"src": "2161:14:6",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1047,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2161:7:6",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1056,
												"initialValue": {
													"arguments": [
														{
															"id": 1051,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1042,
															"src": "2192:4:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1052,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1008,
															"src": "2198:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 1053,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1010,
															"src": "2201:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1054,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1012,
															"src": "2204:1:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1049,
															"name": "ECDSA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2192,
															"src": "2178:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_ECDSA_$2192_$",
																"typeString": "type(library ECDSA)"
															}
														},
														"id": 1050,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2184:7:6",
														"memberName": "recover",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2142,
														"src": "2178:13:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 1055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2178:28:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2161:45:6"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1059,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1057,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1048,
														"src": "2220:6:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1058,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1000,
														"src": "2230:5:6",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2220:15:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1066,
												"nodeType": "IfStatement",
												"src": "2216:88:6",
												"trueBody": {
													"id": 1065,
													"nodeType": "Block",
													"src": "2237:67:6",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1061,
																		"name": "signer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1048,
																		"src": "2279:6:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1062,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1000,
																		"src": "2287:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1060,
																	"name": "ERC2612InvalidSigner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 986,
																	"src": "2258:20:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_address_$returns$_t_error_$",
																		"typeString": "function (address,address) pure returns (error)"
																	}
																},
																"id": 1063,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2258:35:6",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1064,
															"nodeType": "RevertStatement",
															"src": "2251:42:6"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1068,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1000,
															"src": "2323:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1069,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1002,
															"src": "2330:7:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1070,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1004,
															"src": "2339:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1067,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															715,
															775
														],
														"referencedDeclaration": 715,
														"src": "2314:8:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1071,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2314:31:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1072,
												"nodeType": "ExpressionStatement",
												"src": "2314:31:6"
											}
										]
									},
									"documentation": {
										"id": 998,
										"nodeType": "StructuredDocumentation",
										"src": "1632:43:6",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "d505accf",
									"id": 1074,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "1689:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1713:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "1705:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 999,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1705:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1736:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "1728:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1001,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1728:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1004,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1761:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "1753:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1003,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1753:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "1784:8:6",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "1776:16:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1005,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1776:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1008,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "1808:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "1802:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1007,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "1802:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1010,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1827:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "1819:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1009,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1819:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1012,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "1846:1:6",
												"nodeType": "VariableDeclaration",
												"scope": 1074,
												"src": "1838:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1011,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1695:158:6"
									},
									"returnParameters": {
										"id": 1014,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1869:0:6"
									},
									"scope": 1102,
									"src": "1680:672:6",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1157,
										1221
									],
									"body": {
										"id": 1090,
										"nodeType": "Block",
										"src": "2506:43:6",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1087,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1077,
															"src": "2536:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1085,
															"name": "super",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967271,
															"src": "2523:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_super$_ERC20Permit_$1102_$",
																"typeString": "type(contract super ERC20Permit)"
															}
														},
														"id": 1086,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2529:6:6",
														"memberName": "nonces",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1221,
														"src": "2523:12:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view returns (uint256)"
														}
													},
													"id": 1088,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2523:19:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1084,
												"id": 1089,
												"nodeType": "Return",
												"src": "2516:26:6"
											}
										]
									},
									"documentation": {
										"id": 1075,
										"nodeType": "StructuredDocumentation",
										"src": "2358:43:6",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "7ecebe00",
									"id": 1091,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "2415:6:6",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 1081,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 1079,
												"name": "IERC20Permit",
												"nameLocations": [
													"2466:12:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1164,
												"src": "2466:12:6"
											},
											{
												"id": 1080,
												"name": "Nonces",
												"nameLocations": [
													"2480:6:6"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1262,
												"src": "2480:6:6"
											}
										],
										"src": "2457:30:6"
									},
									"parameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2430:5:6",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "2422:13:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1076,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2422:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2421:15:6"
									},
									"returnParameters": {
										"id": 1084,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1083,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1091,
												"src": "2497:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2497:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2496:9:6"
									},
									"scope": 1102,
									"src": "2406:143:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1163
									],
									"body": {
										"id": 1100,
										"nodeType": "Block",
										"src": "2724:44:6",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1097,
														"name": "_domainSeparatorV4",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2315,
														"src": "2741:18:6",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
															"typeString": "function () view returns (bytes32)"
														}
													},
													"id": 1098,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2741:20:6",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 1096,
												"id": 1099,
												"nodeType": "Return",
												"src": "2734:27:6"
											}
										]
									},
									"documentation": {
										"id": 1092,
										"nodeType": "StructuredDocumentation",
										"src": "2555:43:6",
										"text": " @inheritdoc IERC20Permit"
									},
									"functionSelector": "3644e515",
									"id": 1101,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "2665:16:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1093,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2681:2:6"
									},
									"returnParameters": {
										"id": 1096,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1095,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1101,
												"src": "2715:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1094,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2715:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2714:9:6"
									},
									"scope": 1102,
									"src": "2656:112:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "external"
								}
							],
							"scope": 1103,
							"src": "896:1874:6",
							"usedErrors": [
								184,
								189,
								194,
								203,
								208,
								213,
								979,
								986,
								1204,
								1276,
								1278,
								1855,
								1860,
								1865
							],
							"usedEvents": [
								152,
								836,
								845
							]
						}
					],
					"src": "122:2649:6"
				},
				"id": 6
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Metadata.sol",
					"exportedSymbols": {
						"IERC20": [
							902
						],
						"IERC20Metadata": [
							1128
						]
					},
					"id": 1129,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1104,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "125:24:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/IERC20.sol",
							"file": "../IERC20.sol",
							"id": 1106,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1129,
							"sourceUnit": 903,
							"src": "151:37:7",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1105,
										"name": "IERC20",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 902,
										"src": "159:6:7",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1108,
										"name": "IERC20",
										"nameLocations": [
											"305:6:7"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 902,
										"src": "305:6:7"
									},
									"id": 1109,
									"nodeType": "InheritanceSpecifier",
									"src": "305:6:7"
								}
							],
							"canonicalName": "IERC20Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1107,
								"nodeType": "StructuredDocumentation",
								"src": "190:86:7",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard."
							},
							"fullyImplemented": false,
							"id": 1128,
							"linearizedBaseContracts": [
								1128,
								902
							],
							"name": "IERC20Metadata",
							"nameLocation": "287:14:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1110,
										"nodeType": "StructuredDocumentation",
										"src": "318:54:7",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 1115,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "386:4:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1111,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "390:2:7"
									},
									"returnParameters": {
										"id": 1114,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1113,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1115,
												"src": "416:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1112,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "416:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "415:15:7"
									},
									"scope": 1128,
									"src": "377:54:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1116,
										"nodeType": "StructuredDocumentation",
										"src": "437:56:7",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 1121,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "507:6:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "513:2:7"
									},
									"returnParameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1121,
												"src": "539:13:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1118,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "539:6:7",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "538:15:7"
									},
									"scope": 1128,
									"src": "498:56:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1122,
										"nodeType": "StructuredDocumentation",
										"src": "560:65:7",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 1127,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "639:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1123,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "647:2:7"
									},
									"returnParameters": {
										"id": 1126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1125,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1127,
												"src": "673:5:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1124,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "673:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "672:7:7"
									},
									"scope": 1128,
									"src": "630:50:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1129,
							"src": "277:405:7",
							"usedErrors": [],
							"usedEvents": [
								836,
								845
							]
						}
					],
					"src": "125:558:7"
				},
				"id": 7
			},
			"@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/IERC20Permit.sol",
					"exportedSymbols": {
						"IERC20Permit": [
							1164
						]
					},
					"id": 1165,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1130,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:8"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1131,
								"nodeType": "StructuredDocumentation",
								"src": "149:1963:8",
								"text": " @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 1164,
							"linearizedBaseContracts": [
								1164
							],
							"name": "IERC20Permit",
							"nameLocation": "2123:12:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1132,
										"nodeType": "StructuredDocumentation",
										"src": "2142:850:8",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 1149,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "3006:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1147,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3030:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1149,
												"src": "3022:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3022:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1136,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "3053:7:8",
												"nodeType": "VariableDeclaration",
												"scope": 1149,
												"src": "3045:15:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1135,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3045:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1138,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3078:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1149,
												"src": "3070:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1137,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1140,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "3101:8:8",
												"nodeType": "VariableDeclaration",
												"scope": 1149,
												"src": "3093:16:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1139,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3093:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1142,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "3125:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1149,
												"src": "3119:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 1141,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3119:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1144,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3144:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1149,
												"src": "3136:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1143,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3136:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1146,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "3163:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1149,
												"src": "3155:9:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1145,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3155:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3012:158:8"
									},
									"returnParameters": {
										"id": 1148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3179:0:8"
									},
									"scope": 1164,
									"src": "2997:183:8",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1150,
										"nodeType": "StructuredDocumentation",
										"src": "3186:294:8",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 1157,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "3494:6:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1152,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3509:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1157,
												"src": "3501:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1151,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3501:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3500:15:8"
									},
									"returnParameters": {
										"id": 1156,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1155,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1157,
												"src": "3539:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1154,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3539:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3538:9:8"
									},
									"scope": 1164,
									"src": "3485:63:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1158,
										"nodeType": "StructuredDocumentation",
										"src": "3554:128:8",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 1163,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "3749:16:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1159,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3765:2:8"
									},
									"returnParameters": {
										"id": 1162,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1161,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1163,
												"src": "3791:7:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1160,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3791:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3790:9:8"
									},
									"scope": 1164,
									"src": "3740:60:8",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1165,
							"src": "2113:1689:8",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3680:8"
				},
				"id": 8
			},
			"@openzeppelin/contracts@5.0.2/utils/Context.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1194
						]
					},
					"id": 1195,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1166,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:9"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1167,
								"nodeType": "StructuredDocumentation",
								"src": "127:496:9",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1194,
							"linearizedBaseContracts": [
								1194
							],
							"name": "Context",
							"nameLocation": "642:7:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1175,
										"nodeType": "Block",
										"src": "718:34:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1172,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "735:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1173,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "739:6:9",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "735:10:9",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1171,
												"id": 1174,
												"nodeType": "Return",
												"src": "728:17:9"
											}
										]
									},
									"id": 1176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "665:10:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1168,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "675:2:9"
									},
									"returnParameters": {
										"id": 1171,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1170,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "709:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1169,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "709:7:9",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "708:9:9"
									},
									"scope": 1194,
									"src": "656:96:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1184,
										"nodeType": "Block",
										"src": "825:32:9",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1181,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "842:3:9",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "846:4:9",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "842:8:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1180,
												"id": 1183,
												"nodeType": "Return",
												"src": "835:15:9"
											}
										]
									},
									"id": 1185,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "767:8:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "775:2:9"
									},
									"returnParameters": {
										"id": 1180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1179,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1185,
												"src": "809:14:9",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1178,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "809:5:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "808:16:9"
									},
									"scope": 1194,
									"src": "758:99:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1192,
										"nodeType": "Block",
										"src": "935:25:9",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 1190,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "952:1:9",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 1189,
												"id": 1191,
												"nodeType": "Return",
												"src": "945:8:9"
											}
										]
									},
									"id": 1193,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "872:20:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1186,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "892:2:9"
									},
									"returnParameters": {
										"id": 1189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1188,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1193,
												"src": "926:7:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1187,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "926:7:9",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "925:9:9"
									},
									"scope": 1194,
									"src": "863:97:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1195,
							"src": "624:338:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "101:862:9"
				},
				"id": 9
			},
			"@openzeppelin/contracts@5.0.2/utils/Nonces.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/utils/Nonces.sol",
					"exportedSymbols": {
						"Nonces": [
							1262
						]
					},
					"id": 1263,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1196,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "99:24:10"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Nonces",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1197,
								"nodeType": "StructuredDocumentation",
								"src": "125:83:10",
								"text": " @dev Provides tracking nonces for addresses. Nonces will only increment."
							},
							"fullyImplemented": true,
							"id": 1262,
							"linearizedBaseContracts": [
								1262
							],
							"name": "Nonces",
							"nameLocation": "227:6:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1198,
										"nodeType": "StructuredDocumentation",
										"src": "240:90:10",
										"text": " @dev The nonce used for an `account` is not the expected current nonce."
									},
									"errorSelector": "752d88c0",
									"id": 1204,
									"name": "InvalidAccountNonce",
									"nameLocation": "341:19:10",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "369:7:10",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "361:15:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "361:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "currentNonce",
												"nameLocation": "386:12:10",
												"nodeType": "VariableDeclaration",
												"scope": 1204,
												"src": "378:20:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1201,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "378:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "360:39:10"
									},
									"src": "335:65:10"
								},
								{
									"constant": false,
									"id": 1208,
									"mutability": "mutable",
									"name": "_nonces",
									"nameLocation": "450:7:10",
									"nodeType": "VariableDeclaration",
									"scope": 1262,
									"src": "406:51:10",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1207,
										"keyName": "account",
										"keyNameLocation": "422:7:10",
										"keyType": {
											"id": 1205,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "414:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "406:35:10",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 1206,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "433:7:10",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 1220,
										"nodeType": "Block",
										"src": "607:38:10",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 1216,
														"name": "_nonces",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1208,
														"src": "624:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 1218,
													"indexExpression": {
														"id": 1217,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1211,
														"src": "632:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "624:14:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1215,
												"id": 1219,
												"nodeType": "Return",
												"src": "617:21:10"
											}
										]
									},
									"documentation": {
										"id": 1209,
										"nodeType": "StructuredDocumentation",
										"src": "464:69:10",
										"text": " @dev Returns the next unused nonce for an address."
									},
									"functionSelector": "7ecebe00",
									"id": 1221,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "547:6:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1211,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "562:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1221,
												"src": "554:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1210,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "554:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "553:15:10"
									},
									"returnParameters": {
										"id": 1215,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1214,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1221,
												"src": "598:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1213,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "598:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "597:9:10"
									},
									"scope": 1262,
									"src": "538:107:10",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1235,
										"nodeType": "Block",
										"src": "828:326:10",
										"statements": [
											{
												"id": 1234,
												"nodeType": "UncheckedBlock",
												"src": "1031:117:10",
												"statements": [
													{
														"expression": {
															"id": 1232,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "++",
															"prefix": false,
															"src": "1121:16:10",
															"subExpression": {
																"baseExpression": {
																	"id": 1229,
																	"name": "_nonces",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1208,
																	"src": "1121:7:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1231,
																"indexExpression": {
																	"id": 1230,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1224,
																	"src": "1129:5:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "1121:14:10",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1228,
														"id": 1233,
														"nodeType": "Return",
														"src": "1114:23:10"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1222,
										"nodeType": "StructuredDocumentation",
										"src": "651:103:10",
										"text": " @dev Consumes a nonce.\n Returns the current value and increments nonce."
									},
									"id": 1236,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useNonce",
									"nameLocation": "768:9:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1224,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "786:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "778:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1223,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "778:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "777:15:10"
									},
									"returnParameters": {
										"id": 1228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "819:7:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1226,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "819:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "818:9:10"
									},
									"scope": 1262,
									"src": "759:395:10",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1260,
										"nodeType": "Block",
										"src": "1338:149:10",
										"statements": [
											{
												"assignments": [
													1245
												],
												"declarations": [
													{
														"constant": false,
														"id": 1245,
														"mutability": "mutable",
														"name": "current",
														"nameLocation": "1356:7:10",
														"nodeType": "VariableDeclaration",
														"scope": 1260,
														"src": "1348:15:10",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1244,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1348:7:10",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1249,
												"initialValue": {
													"arguments": [
														{
															"id": 1247,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1239,
															"src": "1376:5:10",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1246,
														"name": "_useNonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1236,
														"src": "1366:9:10",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) returns (uint256)"
														}
													},
													"id": 1248,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1366:16:10",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1348:34:10"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1252,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1250,
														"name": "nonce",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1241,
														"src": "1396:5:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1251,
														"name": "current",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1245,
														"src": "1405:7:10",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1396:16:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1259,
												"nodeType": "IfStatement",
												"src": "1392:89:10",
												"trueBody": {
													"id": 1258,
													"nodeType": "Block",
													"src": "1414:67:10",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1254,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1239,
																		"src": "1455:5:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1255,
																		"name": "current",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1245,
																		"src": "1462:7:10",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1253,
																	"name": "InvalidAccountNonce",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1204,
																	"src": "1435:19:10",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (address,uint256) pure returns (error)"
																	}
																},
																"id": 1256,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1435:35:10",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1257,
															"nodeType": "RevertStatement",
															"src": "1428:42:10"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1237,
										"nodeType": "StructuredDocumentation",
										"src": "1160:100:10",
										"text": " @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`."
									},
									"id": 1261,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_useCheckedNonce",
									"nameLocation": "1274:16:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1239,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1299:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "1291:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1238,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1291:7:10",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "nonce",
												"nameLocation": "1314:5:10",
												"nodeType": "VariableDeclaration",
												"scope": 1261,
												"src": "1306:13:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1306:7:10",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1290:30:10"
									},
									"returnParameters": {
										"id": 1243,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1338:0:10"
									},
									"scope": 1262,
									"src": "1265:222:10",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1263,
							"src": "209:1280:10",
							"usedErrors": [
								1204
							],
							"usedEvents": []
						}
					],
					"src": "99:1391:10"
				},
				"id": 10
			},
			"@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol",
					"exportedSymbols": {
						"ShortString": [
							1268
						],
						"ShortStrings": [
							1479
						],
						"StorageSlot": [
							1589
						]
					},
					"id": 1480,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1264,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:11"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol",
							"file": "./StorageSlot.sol",
							"id": 1266,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1480,
							"sourceUnit": 1590,
							"src": "132:46:11",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1265,
										"name": "StorageSlot",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1589,
										"src": "140:11:11",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"canonicalName": "ShortString",
							"id": 1268,
							"name": "ShortString",
							"nameLocation": "353:11:11",
							"nodeType": "UserDefinedValueTypeDefinition",
							"src": "348:28:11",
							"underlyingType": {
								"id": 1267,
								"name": "bytes32",
								"nodeType": "ElementaryTypeName",
								"src": "368:7:11",
								"typeDescriptions": {
									"typeIdentifier": "t_bytes32",
									"typeString": "bytes32"
								}
							}
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ShortStrings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1269,
								"nodeType": "StructuredDocumentation",
								"src": "378:876:11",
								"text": " @dev This library provides functions to convert short memory strings\n into a `ShortString` type that can be used as an immutable variable.\n Strings of arbitrary length can be optimized using this library if\n they are short enough (up to 31 bytes) by packing them with their\n length (1 byte) in a single EVM word (32 bytes). Additionally, a\n fallback mechanism can be used for every other case.\n Usage example:\n ```solidity\n contract Named {\n     using ShortStrings for *;\n     ShortString private immutable _name;\n     string private _nameFallback;\n     constructor(string memory contractName) {\n         _name = contractName.toShortStringWithFallback(_nameFallback);\n     }\n     function name() external view returns (string memory) {\n         return _name.toStringWithFallback(_nameFallback);\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1479,
							"linearizedBaseContracts": [
								1479
							],
							"name": "ShortStrings",
							"nameLocation": "1263:12:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1272,
									"mutability": "constant",
									"name": "FALLBACK_SENTINEL",
									"nameLocation": "1370:17:11",
									"nodeType": "VariableDeclaration",
									"scope": 1479,
									"src": "1345:111:11",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 1270,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1345:7:11",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030304646",
										"id": 1271,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1390:66:11",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_255_by_1",
											"typeString": "int_const 255"
										},
										"value": "0x00000000000000000000000000000000000000000000000000000000000000FF"
									},
									"visibility": "private"
								},
								{
									"errorSelector": "305a27a9",
									"id": 1276,
									"name": "StringTooLong",
									"nameLocation": "1469:13:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1274,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1490:3:11",
												"nodeType": "VariableDeclaration",
												"scope": 1276,
												"src": "1483:10:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1273,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1483:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1482:12:11"
									},
									"src": "1463:32:11"
								},
								{
									"errorSelector": "b3512b0c",
									"id": 1278,
									"name": "InvalidShortString",
									"nameLocation": "1506:18:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1277,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1524:2:11"
									},
									"src": "1500:27:11"
								},
								{
									"body": {
										"id": 1321,
										"nodeType": "Block",
										"src": "1786:208:11",
										"statements": [
											{
												"assignments": [
													1288
												],
												"declarations": [
													{
														"constant": false,
														"id": 1288,
														"mutability": "mutable",
														"name": "bstr",
														"nameLocation": "1809:4:11",
														"nodeType": "VariableDeclaration",
														"scope": 1321,
														"src": "1796:17:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1287,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1796:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1293,
												"initialValue": {
													"arguments": [
														{
															"id": 1291,
															"name": "str",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1281,
															"src": "1822:3:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1290,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "1816:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
															"typeString": "type(bytes storage pointer)"
														},
														"typeName": {
															"id": 1289,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "1816:5:11",
															"typeDescriptions": {}
														}
													},
													"id": 1292,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1816:10:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1796:30:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1297,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1294,
															"name": "bstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1288,
															"src": "1840:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1295,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1845:6:11",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1840:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1296,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1854:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "1840:16:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1303,
												"nodeType": "IfStatement",
												"src": "1836:72:11",
												"trueBody": {
													"id": 1302,
													"nodeType": "Block",
													"src": "1858:50:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1299,
																		"name": "str",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1281,
																		"src": "1893:3:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1298,
																	"name": "StringTooLong",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1276,
																	"src": "1879:13:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$_t_error_$",
																		"typeString": "function (string memory) pure returns (error)"
																	}
																},
																"id": 1300,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1879:18:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1301,
															"nodeType": "RevertStatement",
															"src": "1872:25:11"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1317,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 1312,
																						"name": "bstr",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1288,
																						"src": "1965:4:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					],
																					"id": 1311,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "1957:7:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_bytes32_$",
																						"typeString": "type(bytes32)"
																					},
																					"typeName": {
																						"id": 1310,
																						"name": "bytes32",
																						"nodeType": "ElementaryTypeName",
																						"src": "1957:7:11",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 1313,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "1957:13:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes32",
																					"typeString": "bytes32"
																				}
																			],
																			"id": 1309,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1949:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_uint256_$",
																				"typeString": "type(uint256)"
																			},
																			"typeName": {
																				"id": 1308,
																				"name": "uint256",
																				"nodeType": "ElementaryTypeName",
																				"src": "1949:7:11",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1314,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1949:22:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "|",
																	"rightExpression": {
																		"expression": {
																			"id": 1315,
																			"name": "bstr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1288,
																			"src": "1974:4:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 1316,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1979:6:11",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "1974:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1949:36:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1307,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1941:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 1306,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "1941:7:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1318,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1941:45:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 1304,
															"name": "ShortString",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1268,
															"src": "1924:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1268_$",
																"typeString": "type(ShortString)"
															}
														},
														"id": 1305,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "1936:4:11",
														"memberName": "wrap",
														"nodeType": "MemberAccess",
														"src": "1924:16:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1268_$",
															"typeString": "function (bytes32) pure returns (ShortString)"
														}
													},
													"id": 1319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1924:63:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
														"typeString": "ShortString"
													}
												},
												"functionReturnParameters": 1286,
												"id": 1320,
												"nodeType": "Return",
												"src": "1917:70:11"
											}
										]
									},
									"documentation": {
										"id": 1279,
										"nodeType": "StructuredDocumentation",
										"src": "1533:170:11",
										"text": " @dev Encode a string of at most 31 chars into a `ShortString`.\n This will trigger a `StringTooLong` error is the input string is too long."
									},
									"id": 1322,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortString",
									"nameLocation": "1717:13:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1282,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1281,
												"mutability": "mutable",
												"name": "str",
												"nameLocation": "1745:3:11",
												"nodeType": "VariableDeclaration",
												"scope": 1322,
												"src": "1731:17:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1280,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1731:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1730:19:11"
									},
									"returnParameters": {
										"id": 1286,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1285,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1322,
												"src": "1773:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1284,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1283,
														"name": "ShortString",
														"nameLocations": [
															"1773:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1268,
														"src": "1773:11:11"
													},
													"referencedDeclaration": 1268,
													"src": "1773:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1772:13:11"
									},
									"scope": 1479,
									"src": "1708:286:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1347,
										"nodeType": "Block",
										"src": "2152:331:11",
										"statements": [
											{
												"assignments": [
													1332
												],
												"declarations": [
													{
														"constant": false,
														"id": 1332,
														"mutability": "mutable",
														"name": "len",
														"nameLocation": "2170:3:11",
														"nodeType": "VariableDeclaration",
														"scope": 1347,
														"src": "2162:11:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1331,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2162:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1336,
												"initialValue": {
													"arguments": [
														{
															"id": 1334,
															"name": "sstr",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1326,
															"src": "2187:4:11",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																"typeString": "ShortString"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																"typeString": "ShortString"
															}
														],
														"id": 1333,
														"name": "byteLength",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1380,
														"src": "2176:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1268_$returns$_t_uint256_$",
															"typeString": "function (ShortString) pure returns (uint256)"
														}
													},
													"id": 1335,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2176:16:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2162:30:11"
											},
											{
												"assignments": [
													1338
												],
												"declarations": [
													{
														"constant": false,
														"id": 1338,
														"mutability": "mutable",
														"name": "str",
														"nameLocation": "2294:3:11",
														"nodeType": "VariableDeclaration",
														"scope": 1347,
														"src": "2280:17:11",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 1337,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2280:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1343,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "3332",
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2311:2:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															},
															"value": "32"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_rational_32_by_1",
																"typeString": "int_const 32"
															}
														],
														"id": 1340,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2300:10:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256) pure returns (string memory)"
														},
														"typeName": {
															"id": 1339,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2304:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														}
													},
													"id": 1342,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2300:14:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2280:34:11"
											},
											{
												"AST": {
													"nativeSrc": "2376:81:11",
													"nodeType": "YulBlock",
													"src": "2376:81:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "str",
																		"nativeSrc": "2397:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "2397:3:11"
																	},
																	{
																		"name": "len",
																		"nativeSrc": "2402:3:11",
																		"nodeType": "YulIdentifier",
																		"src": "2402:3:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2390:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2390:6:11"
																},
																"nativeSrc": "2390:16:11",
																"nodeType": "YulFunctionCall",
																"src": "2390:16:11"
															},
															"nativeSrc": "2390:16:11",
															"nodeType": "YulExpressionStatement",
															"src": "2390:16:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "str",
																				"nativeSrc": "2430:3:11",
																				"nodeType": "YulIdentifier",
																				"src": "2430:3:11"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "2435:4:11",
																				"nodeType": "YulLiteral",
																				"src": "2435:4:11",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "2426:3:11",
																			"nodeType": "YulIdentifier",
																			"src": "2426:3:11"
																		},
																		"nativeSrc": "2426:14:11",
																		"nodeType": "YulFunctionCall",
																		"src": "2426:14:11"
																	},
																	{
																		"name": "sstr",
																		"nativeSrc": "2442:4:11",
																		"nodeType": "YulIdentifier",
																		"src": "2442:4:11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "2419:6:11",
																	"nodeType": "YulIdentifier",
																	"src": "2419:6:11"
																},
																"nativeSrc": "2419:28:11",
																"nodeType": "YulFunctionCall",
																"src": "2419:28:11"
															},
															"nativeSrc": "2419:28:11",
															"nodeType": "YulExpressionStatement",
															"src": "2419:28:11"
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1332,
														"isOffset": false,
														"isSlot": false,
														"src": "2402:3:11",
														"valueSize": 1
													},
													{
														"declaration": 1326,
														"isOffset": false,
														"isSlot": false,
														"src": "2442:4:11",
														"valueSize": 1
													},
													{
														"declaration": 1338,
														"isOffset": false,
														"isSlot": false,
														"src": "2397:3:11",
														"valueSize": 1
													},
													{
														"declaration": 1338,
														"isOffset": false,
														"isSlot": false,
														"src": "2430:3:11",
														"valueSize": 1
													}
												],
												"id": 1344,
												"nodeType": "InlineAssembly",
												"src": "2367:90:11"
											},
											{
												"expression": {
													"id": 1345,
													"name": "str",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1338,
													"src": "2473:3:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1330,
												"id": 1346,
												"nodeType": "Return",
												"src": "2466:10:11"
											}
										]
									},
									"documentation": {
										"id": 1323,
										"nodeType": "StructuredDocumentation",
										"src": "2000:73:11",
										"text": " @dev Decode a `ShortString` back to a \"normal\" string."
									},
									"id": 1348,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "2087:8:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1326,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2108:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1348,
												"src": "2096:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1325,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1324,
														"name": "ShortString",
														"nameLocations": [
															"2096:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1268,
														"src": "2096:11:11"
													},
													"referencedDeclaration": 1268,
													"src": "2096:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2095:18:11"
									},
									"returnParameters": {
										"id": 1330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1329,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1348,
												"src": "2137:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1328,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2137:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2136:15:11"
									},
									"scope": 1479,
									"src": "2078:405:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1379,
										"nodeType": "Block",
										"src": "2625:175:11",
										"statements": [
											{
												"assignments": [
													1358
												],
												"declarations": [
													{
														"constant": false,
														"id": 1358,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "2643:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 1379,
														"src": "2635:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1357,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2635:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1368,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1367,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 1363,
																		"name": "sstr",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1352,
																		"src": "2679:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																			"typeString": "ShortString"
																		}
																	],
																	"expression": {
																		"id": 1361,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1268,
																		"src": "2660:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1268_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1362,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "2672:6:11",
																	"memberName": "unwrap",
																	"nodeType": "MemberAccess",
																	"src": "2660:18:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1268_$returns$_t_bytes32_$",
																		"typeString": "function (ShortString) pure returns (bytes32)"
																	}
																},
																"id": 1364,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2660:24:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 1360,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2652:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 1359,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2652:7:11",
																"typeDescriptions": {}
															}
														},
														"id": 1365,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2652:33:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&",
													"rightExpression": {
														"hexValue": "30784646",
														"id": 1366,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2688:4:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_255_by_1",
															"typeString": "int_const 255"
														},
														"value": "0xFF"
													},
													"src": "2652:40:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2635:57:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1371,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1369,
														"name": "result",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1358,
														"src": "2706:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "3331",
														"id": 1370,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2715:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_31_by_1",
															"typeString": "int_const 31"
														},
														"value": "31"
													},
													"src": "2706:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1376,
												"nodeType": "IfStatement",
												"src": "2702:69:11",
												"trueBody": {
													"id": 1375,
													"nodeType": "Block",
													"src": "2719:52:11",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 1372,
																	"name": "InvalidShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1278,
																	"src": "2740:18:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																		"typeString": "function () pure returns (error)"
																	}
																},
																"id": 1373,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2740:20:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1374,
															"nodeType": "RevertStatement",
															"src": "2733:27:11"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1377,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1358,
													"src": "2787:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1356,
												"id": 1378,
												"nodeType": "Return",
												"src": "2780:13:11"
											}
										]
									},
									"documentation": {
										"id": 1349,
										"nodeType": "StructuredDocumentation",
										"src": "2489:61:11",
										"text": " @dev Return the length of a `ShortString`."
									},
									"id": 1380,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLength",
									"nameLocation": "2564:10:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1352,
												"mutability": "mutable",
												"name": "sstr",
												"nameLocation": "2587:4:11",
												"nodeType": "VariableDeclaration",
												"scope": 1380,
												"src": "2575:16:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1351,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1350,
														"name": "ShortString",
														"nameLocations": [
															"2575:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1268,
														"src": "2575:11:11"
													},
													"referencedDeclaration": 1268,
													"src": "2575:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2574:18:11"
									},
									"returnParameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1355,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1380,
												"src": "2616:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1354,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2616:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2615:9:11"
									},
									"scope": 1479,
									"src": "2555:245:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1419,
										"nodeType": "Block",
										"src": "3023:231:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1397,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1393,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1383,
																	"src": "3043:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1392,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3037:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																	"typeString": "type(bytes storage pointer)"
																},
																"typeName": {
																	"id": 1391,
																	"name": "bytes",
																	"nodeType": "ElementaryTypeName",
																	"src": "3037:5:11",
																	"typeDescriptions": {}
																}
															},
															"id": 1394,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3037:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1395,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3050:6:11",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3037:19:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"hexValue": "3332",
														"id": 1396,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3059:2:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_32_by_1",
															"typeString": "int_const 32"
														},
														"value": "32"
													},
													"src": "3037:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1417,
													"nodeType": "Block",
													"src": "3121:127:11",
													"statements": [
														{
															"expression": {
																"id": 1410,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 1406,
																				"name": "store",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1385,
																				"src": "3161:5:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_string_storage_ptr",
																					"typeString": "string storage pointer"
																				}
																			],
																			"expression": {
																				"id": 1403,
																				"name": "StorageSlot",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1589,
																				"src": "3135:11:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_StorageSlot_$1589_$",
																					"typeString": "type(library StorageSlot)"
																				}
																			},
																			"id": 1405,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "3147:13:11",
																			"memberName": "getStringSlot",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 1566,
																			"src": "3135:25:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_string_storage_ptr_$returns$_t_struct$_StringSlot_$1497_storage_ptr_$",
																				"typeString": "function (string storage pointer) pure returns (struct StorageSlot.StringSlot storage pointer)"
																			}
																		},
																		"id": 1407,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3135:32:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_StringSlot_$1497_storage_ptr",
																			"typeString": "struct StorageSlot.StringSlot storage pointer"
																		}
																	},
																	"id": 1408,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "3168:5:11",
																	"memberName": "value",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1496,
																	"src": "3135:38:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage",
																		"typeString": "string storage ref"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"id": 1409,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1383,
																	"src": "3176:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																},
																"src": "3135:46:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															},
															"id": 1411,
															"nodeType": "ExpressionStatement",
															"src": "3135:46:11"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1414,
																		"name": "FALLBACK_SENTINEL",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1272,
																		"src": "3219:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"expression": {
																		"id": 1412,
																		"name": "ShortString",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1268,
																		"src": "3202:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1268_$",
																			"typeString": "type(ShortString)"
																		}
																	},
																	"id": 1413,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "3214:4:11",
																	"memberName": "wrap",
																	"nodeType": "MemberAccess",
																	"src": "3202:16:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_wrap_pure$_t_bytes32_$returns$_t_userDefinedValueType$_ShortString_$1268_$",
																		"typeString": "function (bytes32) pure returns (ShortString)"
																	}
																},
																"id": 1415,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3202:35:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1390,
															"id": 1416,
															"nodeType": "Return",
															"src": "3195:42:11"
														}
													]
												},
												"id": 1418,
												"nodeType": "IfStatement",
												"src": "3033:215:11",
												"trueBody": {
													"id": 1402,
													"nodeType": "Block",
													"src": "3063:52:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1399,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1383,
																		"src": "3098:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1398,
																	"name": "toShortString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1322,
																	"src": "3084:13:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_string_memory_ptr_$returns$_t_userDefinedValueType$_ShortString_$1268_$",
																		"typeString": "function (string memory) pure returns (ShortString)"
																	}
																},
																"id": 1400,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3084:20:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																	"typeString": "ShortString"
																}
															},
															"functionReturnParameters": 1390,
															"id": 1401,
															"nodeType": "Return",
															"src": "3077:27:11"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1381,
										"nodeType": "StructuredDocumentation",
										"src": "2806:103:11",
										"text": " @dev Encode a string into a `ShortString`, or write it to storage if it is too long."
									},
									"id": 1420,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toShortStringWithFallback",
									"nameLocation": "2923:25:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1383,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2963:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "2949:19:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1382,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2949:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1385,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "2985:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "2970:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1384,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2970:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2948:43:11"
									},
									"returnParameters": {
										"id": 1390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1389,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1420,
												"src": "3010:11:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1388,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1387,
														"name": "ShortString",
														"nameLocations": [
															"3010:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1268,
														"src": "3010:11:11"
													},
													"referencedDeclaration": 1268,
													"src": "3010:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3009:13:11"
									},
									"scope": 1479,
									"src": "2914:340:11",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1446,
										"nodeType": "Block",
										"src": "3494:158:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1433,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1424,
																"src": "3527:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1431,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1268,
																"src": "3508:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1268_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1432,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "3520:6:11",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "3508:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1268_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1434,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3508:25:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1435,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1272,
														"src": "3537:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3508:46:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1444,
													"nodeType": "Block",
													"src": "3609:37:11",
													"statements": [
														{
															"expression": {
																"id": 1442,
																"name": "store",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1426,
																"src": "3630:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage_ptr",
																	"typeString": "string storage pointer"
																}
															},
															"functionReturnParameters": 1430,
															"id": 1443,
															"nodeType": "Return",
															"src": "3623:12:11"
														}
													]
												},
												"id": 1445,
												"nodeType": "IfStatement",
												"src": "3504:142:11",
												"trueBody": {
													"id": 1441,
													"nodeType": "Block",
													"src": "3556:47:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1438,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1424,
																		"src": "3586:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1437,
																	"name": "toString",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1348,
																	"src": "3577:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1268_$returns$_t_string_memory_ptr_$",
																		"typeString": "function (ShortString) pure returns (string memory)"
																	}
																},
																"id": 1439,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3577:15:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"functionReturnParameters": 1430,
															"id": 1440,
															"nodeType": "Return",
															"src": "3570:22:11"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1421,
										"nodeType": "StructuredDocumentation",
										"src": "3260:120:11",
										"text": " @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}."
									},
									"id": 1447,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringWithFallback",
									"nameLocation": "3394:20:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1427,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1424,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3427:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "3415:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1423,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1422,
														"name": "ShortString",
														"nameLocations": [
															"3415:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1268,
														"src": "3415:11:11"
													},
													"referencedDeclaration": 1268,
													"src": "3415:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1426,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3449:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "3434:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1425,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3434:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3414:41:11"
									},
									"returnParameters": {
										"id": 1430,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1429,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1447,
												"src": "3479:13:11",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1428,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3479:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3478:15:11"
									},
									"scope": 1479,
									"src": "3385:267:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1477,
										"nodeType": "Block",
										"src": "4132:174:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													},
													"id": 1463,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 1460,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1451,
																"src": "4165:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																	"typeString": "ShortString"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																	"typeString": "ShortString"
																}
															],
															"expression": {
																"id": 1458,
																"name": "ShortString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1268,
																"src": "4146:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_userDefinedValueType$_ShortString_$1268_$",
																	"typeString": "type(ShortString)"
																}
															},
															"id": 1459,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "4158:6:11",
															"memberName": "unwrap",
															"nodeType": "MemberAccess",
															"src": "4146:18:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_unwrap_pure$_t_userDefinedValueType$_ShortString_$1268_$returns$_t_bytes32_$",
																"typeString": "function (ShortString) pure returns (bytes32)"
															}
														},
														"id": 1461,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4146:25:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 1462,
														"name": "FALLBACK_SENTINEL",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1272,
														"src": "4175:17:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "4146:46:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1475,
													"nodeType": "Block",
													"src": "4249:51:11",
													"statements": [
														{
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1471,
																			"name": "store",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1453,
																			"src": "4276:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_storage_ptr",
																				"typeString": "string storage pointer"
																			}
																		],
																		"id": 1470,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4270:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1469,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "4270:5:11",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1472,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4270:12:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_storage_ptr",
																		"typeString": "bytes storage pointer"
																	}
																},
																"id": 1473,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4283:6:11",
																"memberName": "length",
																"nodeType": "MemberAccess",
																"src": "4270:19:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1457,
															"id": 1474,
															"nodeType": "Return",
															"src": "4263:26:11"
														}
													]
												},
												"id": 1476,
												"nodeType": "IfStatement",
												"src": "4142:158:11",
												"trueBody": {
													"id": 1468,
													"nodeType": "Block",
													"src": "4194:49:11",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1465,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1451,
																		"src": "4226:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																			"typeString": "ShortString"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																			"typeString": "ShortString"
																		}
																	],
																	"id": 1464,
																	"name": "byteLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1380,
																	"src": "4215:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1268_$returns$_t_uint256_$",
																		"typeString": "function (ShortString) pure returns (uint256)"
																	}
																},
																"id": 1466,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4215:17:11",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 1457,
															"id": 1467,
															"nodeType": "Return",
															"src": "4208:24:11"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1448,
										"nodeType": "StructuredDocumentation",
										"src": "3658:364:11",
										"text": " @dev Return the length of a string that was encoded to `ShortString` or written to storage using\n {setWithFallback}.\n WARNING: This will return the \"byte length\" of the string. This may not reflect the actual length in terms of\n actual characters as the UTF-8 encoding of a single character can span over multiple bytes."
									},
									"id": 1478,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "byteLengthWithFallback",
									"nameLocation": "4036:22:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1451,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4071:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "4059:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
													"typeString": "ShortString"
												},
												"typeName": {
													"id": 1450,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1449,
														"name": "ShortString",
														"nameLocations": [
															"4059:11:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1268,
														"src": "4059:11:11"
													},
													"referencedDeclaration": 1268,
													"src": "4059:11:11",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
														"typeString": "ShortString"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1453,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "4093:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "4078:20:11",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1452,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4078:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4058:41:11"
									},
									"returnParameters": {
										"id": 1457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1456,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1478,
												"src": "4123:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1455,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4123:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4122:9:11"
									},
									"scope": 1479,
									"src": "4027:279:11",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1480,
							"src": "1255:3053:11",
							"usedErrors": [
								1276,
								1278
							],
							"usedEvents": []
						}
					],
					"src": "106:4203:11"
				},
				"id": 11
			},
			"@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/utils/StorageSlot.sol",
					"exportedSymbols": {
						"StorageSlot": [
							1589
						]
					},
					"id": 1590,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1481,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "193:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "StorageSlot",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1482,
								"nodeType": "StructuredDocumentation",
								"src": "219:1025:12",
								"text": " @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(newImplementation.code.length > 0);\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1589,
							"linearizedBaseContracts": [
								1589
							],
							"name": "StorageSlot",
							"nameLocation": "1253:11:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "StorageSlot.AddressSlot",
									"id": 1485,
									"members": [
										{
											"constant": false,
											"id": 1484,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1308:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1485,
											"src": "1300:13:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 1483,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1300:7:12",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "AddressSlot",
									"nameLocation": "1278:11:12",
									"nodeType": "StructDefinition",
									"scope": 1589,
									"src": "1271:49:12",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BooleanSlot",
									"id": 1488,
									"members": [
										{
											"constant": false,
											"id": 1487,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1360:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1488,
											"src": "1355:10:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 1486,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1355:4:12",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BooleanSlot",
									"nameLocation": "1333:11:12",
									"nodeType": "StructDefinition",
									"scope": 1589,
									"src": "1326:46:12",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Bytes32Slot",
									"id": 1491,
									"members": [
										{
											"constant": false,
											"id": 1490,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1415:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1491,
											"src": "1407:13:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes32",
												"typeString": "bytes32"
											},
											"typeName": {
												"id": 1489,
												"name": "bytes32",
												"nodeType": "ElementaryTypeName",
												"src": "1407:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Bytes32Slot",
									"nameLocation": "1385:11:12",
									"nodeType": "StructDefinition",
									"scope": 1589,
									"src": "1378:49:12",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.Uint256Slot",
									"id": 1494,
									"members": [
										{
											"constant": false,
											"id": 1493,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1470:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1494,
											"src": "1462:13:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											},
											"typeName": {
												"id": 1492,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1462:7:12",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "Uint256Slot",
									"nameLocation": "1440:11:12",
									"nodeType": "StructDefinition",
									"scope": 1589,
									"src": "1433:49:12",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.StringSlot",
									"id": 1497,
									"members": [
										{
											"constant": false,
											"id": 1496,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1523:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1497,
											"src": "1516:12:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_string_storage_ptr",
												"typeString": "string"
											},
											"typeName": {
												"id": 1495,
												"name": "string",
												"nodeType": "ElementaryTypeName",
												"src": "1516:6:12",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "StringSlot",
									"nameLocation": "1495:10:12",
									"nodeType": "StructDefinition",
									"scope": 1589,
									"src": "1488:47:12",
									"visibility": "public"
								},
								{
									"canonicalName": "StorageSlot.BytesSlot",
									"id": 1500,
									"members": [
										{
											"constant": false,
											"id": 1499,
											"mutability": "mutable",
											"name": "value",
											"nameLocation": "1574:5:12",
											"nodeType": "VariableDeclaration",
											"scope": 1500,
											"src": "1568:11:12",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bytes_storage_ptr",
												"typeString": "bytes"
											},
											"typeName": {
												"id": 1498,
												"name": "bytes",
												"nodeType": "ElementaryTypeName",
												"src": "1568:5:12",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "BytesSlot",
									"nameLocation": "1548:9:12",
									"nodeType": "StructDefinition",
									"scope": 1589,
									"src": "1541:45:12",
									"visibility": "public"
								},
								{
									"body": {
										"id": 1510,
										"nodeType": "Block",
										"src": "1768:106:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1830:38:12",
													"nodeType": "YulBlock",
													"src": "1830:38:12",
													"statements": [
														{
															"nativeSrc": "1844:14:12",
															"nodeType": "YulAssignment",
															"src": "1844:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "1854:4:12",
																"nodeType": "YulIdentifier",
																"src": "1854:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "1844:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "1844:6:12"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1507,
														"isOffset": false,
														"isSlot": true,
														"src": "1844:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1503,
														"isOffset": false,
														"isSlot": false,
														"src": "1854:4:12",
														"valueSize": 1
													}
												],
												"id": 1509,
												"nodeType": "InlineAssembly",
												"src": "1821:47:12"
											}
										]
									},
									"documentation": {
										"id": 1501,
										"nodeType": "StructuredDocumentation",
										"src": "1592:87:12",
										"text": " @dev Returns an `AddressSlot` with member `value` located at `slot`."
									},
									"id": 1511,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getAddressSlot",
									"nameLocation": "1693:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1504,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1503,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "1716:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "1708:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1502,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1708:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1707:14:12"
									},
									"returnParameters": {
										"id": 1508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1507,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "1765:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1511,
												"src": "1745:21:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_AddressSlot_$1485_storage_ptr",
													"typeString": "struct StorageSlot.AddressSlot"
												},
												"typeName": {
													"id": 1506,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1505,
														"name": "AddressSlot",
														"nameLocations": [
															"1745:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1485,
														"src": "1745:11:12"
													},
													"referencedDeclaration": 1485,
													"src": "1745:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_AddressSlot_$1485_storage_ptr",
														"typeString": "struct StorageSlot.AddressSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1744:23:12"
									},
									"scope": 1589,
									"src": "1684:190:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1521,
										"nodeType": "Block",
										"src": "2056:106:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2118:38:12",
													"nodeType": "YulBlock",
													"src": "2118:38:12",
													"statements": [
														{
															"nativeSrc": "2132:14:12",
															"nodeType": "YulAssignment",
															"src": "2132:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "2142:4:12",
																"nodeType": "YulIdentifier",
																"src": "2142:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2132:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2132:6:12"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1518,
														"isOffset": false,
														"isSlot": true,
														"src": "2132:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1514,
														"isOffset": false,
														"isSlot": false,
														"src": "2142:4:12",
														"valueSize": 1
													}
												],
												"id": 1520,
												"nodeType": "InlineAssembly",
												"src": "2109:47:12"
											}
										]
									},
									"documentation": {
										"id": 1512,
										"nodeType": "StructuredDocumentation",
										"src": "1880:87:12",
										"text": " @dev Returns an `BooleanSlot` with member `value` located at `slot`."
									},
									"id": 1522,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBooleanSlot",
									"nameLocation": "1981:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2004:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1522,
												"src": "1996:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1513,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1996:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1995:14:12"
									},
									"returnParameters": {
										"id": 1519,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1518,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2053:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1522,
												"src": "2033:21:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BooleanSlot_$1488_storage_ptr",
													"typeString": "struct StorageSlot.BooleanSlot"
												},
												"typeName": {
													"id": 1517,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1516,
														"name": "BooleanSlot",
														"nameLocations": [
															"2033:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1488,
														"src": "2033:11:12"
													},
													"referencedDeclaration": 1488,
													"src": "2033:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BooleanSlot_$1488_storage_ptr",
														"typeString": "struct StorageSlot.BooleanSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2032:23:12"
									},
									"scope": 1589,
									"src": "1972:190:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1532,
										"nodeType": "Block",
										"src": "2344:106:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2406:38:12",
													"nodeType": "YulBlock",
													"src": "2406:38:12",
													"statements": [
														{
															"nativeSrc": "2420:14:12",
															"nodeType": "YulAssignment",
															"src": "2420:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "2430:4:12",
																"nodeType": "YulIdentifier",
																"src": "2430:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2420:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2420:6:12"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1529,
														"isOffset": false,
														"isSlot": true,
														"src": "2420:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1525,
														"isOffset": false,
														"isSlot": false,
														"src": "2430:4:12",
														"valueSize": 1
													}
												],
												"id": 1531,
												"nodeType": "InlineAssembly",
												"src": "2397:47:12"
											}
										]
									},
									"documentation": {
										"id": 1523,
										"nodeType": "StructuredDocumentation",
										"src": "2168:87:12",
										"text": " @dev Returns an `Bytes32Slot` with member `value` located at `slot`."
									},
									"id": 1533,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytes32Slot",
									"nameLocation": "2269:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1526,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1525,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2292:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "2284:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1524,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2284:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2283:14:12"
									},
									"returnParameters": {
										"id": 1530,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1529,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2341:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "2321:21:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Bytes32Slot_$1491_storage_ptr",
													"typeString": "struct StorageSlot.Bytes32Slot"
												},
												"typeName": {
													"id": 1528,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1527,
														"name": "Bytes32Slot",
														"nameLocations": [
															"2321:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1491,
														"src": "2321:11:12"
													},
													"referencedDeclaration": 1491,
													"src": "2321:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Bytes32Slot_$1491_storage_ptr",
														"typeString": "struct StorageSlot.Bytes32Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2320:23:12"
									},
									"scope": 1589,
									"src": "2260:190:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1543,
										"nodeType": "Block",
										"src": "2632:106:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2694:38:12",
													"nodeType": "YulBlock",
													"src": "2694:38:12",
													"statements": [
														{
															"nativeSrc": "2708:14:12",
															"nodeType": "YulAssignment",
															"src": "2708:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "2718:4:12",
																"nodeType": "YulIdentifier",
																"src": "2718:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2708:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2708:6:12"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1540,
														"isOffset": false,
														"isSlot": true,
														"src": "2708:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1536,
														"isOffset": false,
														"isSlot": false,
														"src": "2718:4:12",
														"valueSize": 1
													}
												],
												"id": 1542,
												"nodeType": "InlineAssembly",
												"src": "2685:47:12"
											}
										]
									},
									"documentation": {
										"id": 1534,
										"nodeType": "StructuredDocumentation",
										"src": "2456:87:12",
										"text": " @dev Returns an `Uint256Slot` with member `value` located at `slot`."
									},
									"id": 1544,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getUint256Slot",
									"nameLocation": "2557:14:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2580:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1544,
												"src": "2572:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1535,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2572:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2571:14:12"
									},
									"returnParameters": {
										"id": 1541,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1540,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2629:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1544,
												"src": "2609:21:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_Uint256Slot_$1494_storage_ptr",
													"typeString": "struct StorageSlot.Uint256Slot"
												},
												"typeName": {
													"id": 1539,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1538,
														"name": "Uint256Slot",
														"nameLocations": [
															"2609:11:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1494,
														"src": "2609:11:12"
													},
													"referencedDeclaration": 1494,
													"src": "2609:11:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_Uint256Slot_$1494_storage_ptr",
														"typeString": "struct StorageSlot.Uint256Slot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2608:23:12"
									},
									"scope": 1589,
									"src": "2548:190:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1554,
										"nodeType": "Block",
										"src": "2917:106:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "2979:38:12",
													"nodeType": "YulBlock",
													"src": "2979:38:12",
													"statements": [
														{
															"nativeSrc": "2993:14:12",
															"nodeType": "YulAssignment",
															"src": "2993:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "3003:4:12",
																"nodeType": "YulIdentifier",
																"src": "3003:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "2993:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "2993:6:12"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1551,
														"isOffset": false,
														"isSlot": true,
														"src": "2993:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1547,
														"isOffset": false,
														"isSlot": false,
														"src": "3003:4:12",
														"valueSize": 1
													}
												],
												"id": 1553,
												"nodeType": "InlineAssembly",
												"src": "2970:47:12"
											}
										]
									},
									"documentation": {
										"id": 1545,
										"nodeType": "StructuredDocumentation",
										"src": "2744:86:12",
										"text": " @dev Returns an `StringSlot` with member `value` located at `slot`."
									},
									"id": 1555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "2844:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1547,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "2866:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "2858:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1546,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2858:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2857:14:12"
									},
									"returnParameters": {
										"id": 1552,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1551,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "2914:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1555,
												"src": "2895:20:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1497_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1550,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1549,
														"name": "StringSlot",
														"nameLocations": [
															"2895:10:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1497,
														"src": "2895:10:12"
													},
													"referencedDeclaration": 1497,
													"src": "2895:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1497_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2894:22:12"
									},
									"scope": 1589,
									"src": "2835:188:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1565,
										"nodeType": "Block",
										"src": "3225:112:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3287:44:12",
													"nodeType": "YulBlock",
													"src": "3287:44:12",
													"statements": [
														{
															"nativeSrc": "3301:20:12",
															"nodeType": "YulAssignment",
															"src": "3301:20:12",
															"value": {
																"name": "store.slot",
																"nativeSrc": "3311:10:12",
																"nodeType": "YulIdentifier",
																"src": "3311:10:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3301:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "3301:6:12"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1562,
														"isOffset": false,
														"isSlot": true,
														"src": "3301:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1558,
														"isOffset": false,
														"isSlot": true,
														"src": "3311:10:12",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1564,
												"nodeType": "InlineAssembly",
												"src": "3278:53:12"
											}
										]
									},
									"documentation": {
										"id": 1556,
										"nodeType": "StructuredDocumentation",
										"src": "3029:101:12",
										"text": " @dev Returns an `StringSlot` representation of the string storage pointer `store`."
									},
									"id": 1566,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getStringSlot",
									"nameLocation": "3144:13:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1558,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3173:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "3158:20:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_string_storage_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1557,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3158:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3157:22:12"
									},
									"returnParameters": {
										"id": 1563,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1562,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3222:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1566,
												"src": "3203:20:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_StringSlot_$1497_storage_ptr",
													"typeString": "struct StorageSlot.StringSlot"
												},
												"typeName": {
													"id": 1561,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1560,
														"name": "StringSlot",
														"nameLocations": [
															"3203:10:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1497,
														"src": "3203:10:12"
													},
													"referencedDeclaration": 1497,
													"src": "3203:10:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_StringSlot_$1497_storage_ptr",
														"typeString": "struct StorageSlot.StringSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3202:22:12"
									},
									"scope": 1589,
									"src": "3135:202:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1576,
										"nodeType": "Block",
										"src": "3513:106:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3575:38:12",
													"nodeType": "YulBlock",
													"src": "3575:38:12",
													"statements": [
														{
															"nativeSrc": "3589:14:12",
															"nodeType": "YulAssignment",
															"src": "3589:14:12",
															"value": {
																"name": "slot",
																"nativeSrc": "3599:4:12",
																"nodeType": "YulIdentifier",
																"src": "3599:4:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3589:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "3589:6:12"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1573,
														"isOffset": false,
														"isSlot": true,
														"src": "3589:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1569,
														"isOffset": false,
														"isSlot": false,
														"src": "3599:4:12",
														"valueSize": 1
													}
												],
												"id": 1575,
												"nodeType": "InlineAssembly",
												"src": "3566:47:12"
											}
										]
									},
									"documentation": {
										"id": 1567,
										"nodeType": "StructuredDocumentation",
										"src": "3343:85:12",
										"text": " @dev Returns an `BytesSlot` with member `value` located at `slot`."
									},
									"id": 1577,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3442:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1569,
												"mutability": "mutable",
												"name": "slot",
												"nameLocation": "3463:4:12",
												"nodeType": "VariableDeclaration",
												"scope": 1577,
												"src": "3455:12:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1568,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3455:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3454:14:12"
									},
									"returnParameters": {
										"id": 1574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1573,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3510:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1577,
												"src": "3492:19:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1500_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1572,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1571,
														"name": "BytesSlot",
														"nameLocations": [
															"3492:9:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1500,
														"src": "3492:9:12"
													},
													"referencedDeclaration": 1500,
													"src": "3492:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1500_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3491:21:12"
									},
									"scope": 1589,
									"src": "3433:186:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1587,
										"nodeType": "Block",
										"src": "3816:112:12",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3878:44:12",
													"nodeType": "YulBlock",
													"src": "3878:44:12",
													"statements": [
														{
															"nativeSrc": "3892:20:12",
															"nodeType": "YulAssignment",
															"src": "3892:20:12",
															"value": {
																"name": "store.slot",
																"nativeSrc": "3902:10:12",
																"nodeType": "YulIdentifier",
																"src": "3902:10:12"
															},
															"variableNames": [
																{
																	"name": "r.slot",
																	"nativeSrc": "3892:6:12",
																	"nodeType": "YulIdentifier",
																	"src": "3892:6:12"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 1584,
														"isOffset": false,
														"isSlot": true,
														"src": "3892:6:12",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 1580,
														"isOffset": false,
														"isSlot": true,
														"src": "3902:10:12",
														"suffix": "slot",
														"valueSize": 1
													}
												],
												"id": 1586,
												"nodeType": "InlineAssembly",
												"src": "3869:53:12"
											}
										]
									},
									"documentation": {
										"id": 1578,
										"nodeType": "StructuredDocumentation",
										"src": "3625:99:12",
										"text": " @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."
									},
									"id": 1588,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getBytesSlot",
									"nameLocation": "3738:12:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1581,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1580,
												"mutability": "mutable",
												"name": "store",
												"nameLocation": "3765:5:12",
												"nodeType": "VariableDeclaration",
												"scope": 1588,
												"src": "3751:19:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_storage_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1579,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3751:5:12",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3750:21:12"
									},
									"returnParameters": {
										"id": 1585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1584,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "3813:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 1588,
												"src": "3795:19:12",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_BytesSlot_$1500_storage_ptr",
													"typeString": "struct StorageSlot.BytesSlot"
												},
												"typeName": {
													"id": 1583,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1582,
														"name": "BytesSlot",
														"nameLocations": [
															"3795:9:12"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1500,
														"src": "3795:9:12"
													},
													"referencedDeclaration": 1500,
													"src": "3795:9:12",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_BytesSlot_$1500_storage_ptr",
														"typeString": "struct StorageSlot.BytesSlot"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3794:21:12"
									},
									"scope": 1589,
									"src": "3729:199:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1590,
							"src": "1245:2685:12",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "193:3738:12"
				},
				"id": 12
			},
			"@openzeppelin/contracts@5.0.2/utils/Strings.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							3547
						],
						"SignedMath": [
							3652
						],
						"Strings": [
							1844
						]
					},
					"id": 1845,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1591,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:13"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1593,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1845,
							"sourceUnit": 3548,
							"src": "127:37:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1592,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3547,
										"src": "135:4:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 1595,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1845,
							"sourceUnit": 3653,
							"src": "165:49:13",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1594,
										"name": "SignedMath",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3652,
										"src": "173:10:13",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1596,
								"nodeType": "StructuredDocumentation",
								"src": "216:34:13",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1844,
							"linearizedBaseContracts": [
								1844
							],
							"name": "Strings",
							"nameLocation": "259:7:13",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1599,
									"mutability": "constant",
									"name": "HEX_DIGITS",
									"nameLocation": "298:10:13",
									"nodeType": "VariableDeclaration",
									"scope": 1844,
									"src": "273:56:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1597,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "273:7:13",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1598,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "311:18:13",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1602,
									"mutability": "constant",
									"name": "ADDRESS_LENGTH",
									"nameLocation": "358:14:13",
									"nodeType": "VariableDeclaration",
									"scope": 1844,
									"src": "335:42:13",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1600,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "335:5:13",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1601,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "375:2:13",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1603,
										"nodeType": "StructuredDocumentation",
										"src": "384:81:13",
										"text": " @dev The `value` string doesn't fit in the specified `length`."
									},
									"errorSelector": "e22e27eb",
									"id": 1609,
									"name": "StringsInsufficientHexLength",
									"nameLocation": "476:28:13",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1608,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1605,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "513:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1609,
												"src": "505:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1604,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "505:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1607,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "528:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1609,
												"src": "520:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1606,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "520:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "504:31:13"
									},
									"src": "470:66:13"
								},
								{
									"body": {
										"id": 1656,
										"nodeType": "Block",
										"src": "708:627:13",
										"statements": [
											{
												"id": 1655,
												"nodeType": "UncheckedBlock",
												"src": "718:611:13",
												"statements": [
													{
														"assignments": [
															1618
														],
														"declarations": [
															{
																"constant": false,
																"id": 1618,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "750:6:13",
																"nodeType": "VariableDeclaration",
																"scope": 1655,
																"src": "742:14:13",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1617,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "742:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1625,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1624,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1621,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1612,
																		"src": "770:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1619,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3547,
																		"src": "759:4:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$3547_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1620,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "764:5:13",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 3367,
																	"src": "759:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1622,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "759:17:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1623,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "779:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "759:21:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "742:38:13"
													},
													{
														"assignments": [
															1627
														],
														"declarations": [
															{
																"constant": false,
																"id": 1627,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "808:6:13",
																"nodeType": "VariableDeclaration",
																"scope": 1655,
																"src": "794:20:13",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1626,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "794:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1632,
														"initialValue": {
															"arguments": [
																{
																	"id": 1630,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1618,
																	"src": "828:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1629,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "817:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1628,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "821:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1631,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "817:18:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "794:41:13"
													},
													{
														"assignments": [
															1634
														],
														"declarations": [
															{
																"constant": false,
																"id": 1634,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "857:3:13",
																"nodeType": "VariableDeclaration",
																"scope": 1655,
																"src": "849:11:13",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1633,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "849:7:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1635,
														"nodeType": "VariableDeclarationStatement",
														"src": "849:11:13"
													},
													{
														"AST": {
															"nativeSrc": "930:67:13",
															"nodeType": "YulBlock",
															"src": "930:67:13",
															"statements": [
																{
																	"nativeSrc": "948:35:13",
																	"nodeType": "YulAssignment",
																	"src": "948:35:13",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nativeSrc": "959:6:13",
																				"nodeType": "YulIdentifier",
																				"src": "959:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "971:2:13",
																						"nodeType": "YulLiteral",
																						"src": "971:2:13",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nativeSrc": "975:6:13",
																						"nodeType": "YulIdentifier",
																						"src": "975:6:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nativeSrc": "967:3:13",
																					"nodeType": "YulIdentifier",
																					"src": "967:3:13"
																				},
																				"nativeSrc": "967:15:13",
																				"nodeType": "YulFunctionCall",
																				"src": "967:15:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "955:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "955:3:13"
																		},
																		"nativeSrc": "955:28:13",
																		"nodeType": "YulFunctionCall",
																		"src": "955:28:13"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nativeSrc": "948:3:13",
																			"nodeType": "YulIdentifier",
																			"src": "948:3:13"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 1627,
																"isOffset": false,
																"isSlot": false,
																"src": "959:6:13",
																"valueSize": 1
															},
															{
																"declaration": 1618,
																"isOffset": false,
																"isSlot": false,
																"src": "975:6:13",
																"valueSize": 1
															},
															{
																"declaration": 1634,
																"isOffset": false,
																"isSlot": false,
																"src": "948:3:13",
																"valueSize": 1
															}
														],
														"id": 1636,
														"nodeType": "InlineAssembly",
														"src": "921:76:13"
													},
													{
														"body": {
															"id": 1651,
															"nodeType": "Block",
															"src": "1023:269:13",
															"statements": [
																{
																	"expression": {
																		"id": 1639,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "1041:5:13",
																		"subExpression": {
																			"id": 1638,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1634,
																			"src": "1041:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1640,
																	"nodeType": "ExpressionStatement",
																	"src": "1041:5:13"
																},
																{
																	"AST": {
																		"nativeSrc": "1124:86:13",
																		"nodeType": "YulBlock",
																		"src": "1124:86:13",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nativeSrc": "1154:3:13",
																							"nodeType": "YulIdentifier",
																							"src": "1154:3:13"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nativeSrc": "1168:5:13",
																											"nodeType": "YulIdentifier",
																											"src": "1168:5:13"
																										},
																										{
																											"kind": "number",
																											"nativeSrc": "1175:2:13",
																											"nodeType": "YulLiteral",
																											"src": "1175:2:13",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nativeSrc": "1164:3:13",
																										"nodeType": "YulIdentifier",
																										"src": "1164:3:13"
																									},
																									"nativeSrc": "1164:14:13",
																									"nodeType": "YulFunctionCall",
																									"src": "1164:14:13"
																								},
																								{
																									"name": "HEX_DIGITS",
																									"nativeSrc": "1180:10:13",
																									"nodeType": "YulIdentifier",
																									"src": "1180:10:13"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nativeSrc": "1159:4:13",
																								"nodeType": "YulIdentifier",
																								"src": "1159:4:13"
																							},
																							"nativeSrc": "1159:32:13",
																							"nodeType": "YulFunctionCall",
																							"src": "1159:32:13"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nativeSrc": "1146:7:13",
																						"nodeType": "YulIdentifier",
																						"src": "1146:7:13"
																					},
																					"nativeSrc": "1146:46:13",
																					"nodeType": "YulFunctionCall",
																					"src": "1146:46:13"
																				},
																				"nativeSrc": "1146:46:13",
																				"nodeType": "YulExpressionStatement",
																				"src": "1146:46:13"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "cancun",
																	"externalReferences": [
																		{
																			"declaration": 1599,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1180:10:13",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1634,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1154:3:13",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1612,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1168:5:13",
																			"valueSize": 1
																		}
																	],
																	"id": 1641,
																	"nodeType": "InlineAssembly",
																	"src": "1115:95:13"
																},
																{
																	"expression": {
																		"id": 1644,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1642,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1612,
																			"src": "1227:5:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1643,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1236:2:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1227:11:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1645,
																	"nodeType": "ExpressionStatement",
																	"src": "1227:11:13"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1648,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1646,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1612,
																			"src": "1260:5:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1647,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1269:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1260:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1650,
																	"nodeType": "IfStatement",
																	"src": "1256:21:13",
																	"trueBody": {
																		"id": 1649,
																		"nodeType": "Break",
																		"src": "1272:5:13"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1637,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1017:4:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1652,
														"nodeType": "WhileStatement",
														"src": "1010:282:13"
													},
													{
														"expression": {
															"id": 1653,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1627,
															"src": "1312:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1616,
														"id": 1654,
														"nodeType": "Return",
														"src": "1305:13:13"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1610,
										"nodeType": "StructuredDocumentation",
										"src": "542:90:13",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1657,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "646:8:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1613,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1612,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "663:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1657,
												"src": "655:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1611,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "655:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "654:15:13"
									},
									"returnParameters": {
										"id": 1616,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1615,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1657,
												"src": "693:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1614,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "693:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "692:15:13"
									},
									"scope": 1844,
									"src": "637:698:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1682,
										"nodeType": "Block",
										"src": "1511:92:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1670,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1668,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1660,
																	"src": "1542:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1669,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1550:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1542:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "",
																"id": 1672,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1560:2:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"id": 1673,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "1542:20:13",
															"trueExpression": {
																"hexValue": "2d",
																"id": 1671,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1554:3:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																	"typeString": "literal_string \"-\""
																},
																"value": "-"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1677,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1660,
																			"src": "1588:5:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"expression": {
																			"id": 1675,
																			"name": "SignedMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3652,
																			"src": "1573:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SignedMath_$3652_$",
																				"typeString": "type(library SignedMath)"
																			}
																		},
																		"id": 1676,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1584:3:13",
																		"memberName": "abs",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3651,
																		"src": "1573:14:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																			"typeString": "function (int256) pure returns (uint256)"
																		}
																	},
																	"id": 1678,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1573:21:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1674,
																"name": "toString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1657,
																"src": "1564:8:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 1679,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1564:31:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"id": 1666,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1528:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1665,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "1528:6:13",
																"typeDescriptions": {}
															}
														},
														"id": 1667,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1535:6:13",
														"memberName": "concat",
														"nodeType": "MemberAccess",
														"src": "1528:13:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () pure returns (string memory)"
														}
													},
													"id": 1680,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1528:68:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1664,
												"id": 1681,
												"nodeType": "Return",
												"src": "1521:75:13"
											}
										]
									},
									"documentation": {
										"id": 1658,
										"nodeType": "StructuredDocumentation",
										"src": "1341:89:13",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 1683,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringSigned",
									"nameLocation": "1444:14:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1660,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1466:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "1459:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1659,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1459:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1458:14:13"
									},
									"returnParameters": {
										"id": 1664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1663,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1683,
												"src": "1496:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1662,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1496:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1495:15:13"
									},
									"scope": 1844,
									"src": "1435:168:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1702,
										"nodeType": "Block",
										"src": "1782:100:13",
										"statements": [
											{
												"id": 1701,
												"nodeType": "UncheckedBlock",
												"src": "1792:84:13",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1692,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1686,
																	"src": "1835:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1698,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1695,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1686,
																				"src": "1854:5:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1693,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3547,
																				"src": "1842:4:13",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$3547_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1694,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1847:6:13",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 3489,
																			"src": "1842:11:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1696,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1842:18:13",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1697,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1863:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1842:22:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1691,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1703,
																	1786,
																	1806
																],
																"referencedDeclaration": 1786,
																"src": "1823:11:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1699,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1823:42:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1690,
														"id": 1700,
														"nodeType": "Return",
														"src": "1816:49:13"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1684,
										"nodeType": "StructuredDocumentation",
										"src": "1609:94:13",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1703,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1717:11:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1687,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1686,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1737:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1703,
												"src": "1729:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1685,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1729:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1728:15:13"
									},
									"returnParameters": {
										"id": 1690,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1689,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1703,
												"src": "1767:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1688,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1767:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1766:15:13"
									},
									"scope": 1844,
									"src": "1708:174:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1785,
										"nodeType": "Block",
										"src": "2095:435:13",
										"statements": [
											{
												"assignments": [
													1714
												],
												"declarations": [
													{
														"constant": false,
														"id": 1714,
														"mutability": "mutable",
														"name": "localValue",
														"nameLocation": "2113:10:13",
														"nodeType": "VariableDeclaration",
														"scope": 1785,
														"src": "2105:18:13",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1713,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2105:7:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1716,
												"initialValue": {
													"id": 1715,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1706,
													"src": "2126:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2105:26:13"
											},
											{
												"assignments": [
													1718
												],
												"declarations": [
													{
														"constant": false,
														"id": 1718,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "2154:6:13",
														"nodeType": "VariableDeclaration",
														"scope": 1785,
														"src": "2141:19:13",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1717,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2141:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1727,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1725,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1723,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1721,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2173:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1722,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1708,
																	"src": "2177:6:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2173:10:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1724,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2186:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2173:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1720,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2163:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1719,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2167:5:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1726,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2163:25:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2141:47:13"
											},
											{
												"expression": {
													"id": 1732,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1728,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1718,
															"src": "2198:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1730,
														"indexExpression": {
															"hexValue": "30",
															"id": 1729,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2205:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2198:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1731,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2210:3:13",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2198:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1733,
												"nodeType": "ExpressionStatement",
												"src": "2198:15:13"
											},
											{
												"expression": {
													"id": 1738,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1734,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1718,
															"src": "2223:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1736,
														"indexExpression": {
															"hexValue": "31",
															"id": 1735,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2230:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2223:9:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1737,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2235:3:13",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2223:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1739,
												"nodeType": "ExpressionStatement",
												"src": "2223:15:13"
											},
											{
												"body": {
													"id": 1768,
													"nodeType": "Block",
													"src": "2293:95:13",
													"statements": [
														{
															"expression": {
																"id": 1762,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1754,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1718,
																		"src": "2307:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1756,
																	"indexExpression": {
																		"id": 1755,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1741,
																		"src": "2314:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2307:9:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1757,
																		"name": "HEX_DIGITS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1599,
																		"src": "2319:10:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1761,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1760,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1758,
																			"name": "localValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1714,
																			"src": "2330:10:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1759,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2343:3:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2330:16:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2319:28:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2307:40:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1763,
															"nodeType": "ExpressionStatement",
															"src": "2307:40:13"
														},
														{
															"expression": {
																"id": 1766,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1764,
																	"name": "localValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1714,
																	"src": "2361:10:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1765,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2376:1:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2361:16:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1767,
															"nodeType": "ExpressionStatement",
															"src": "2361:16:13"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1750,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1748,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1741,
														"src": "2281:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1749,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2285:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2281:5:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1769,
												"initializationExpression": {
													"assignments": [
														1741
													],
													"declarations": [
														{
															"constant": false,
															"id": 1741,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2261:1:13",
															"nodeType": "VariableDeclaration",
															"scope": 1769,
															"src": "2253:9:13",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1740,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2253:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1747,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1746,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1744,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1742,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2265:1:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1743,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1708,
																"src": "2269:6:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2265:10:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1745,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2278:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2265:14:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2253:26:13"
												},
												"isSimpleCounterLoop": false,
												"loopExpression": {
													"expression": {
														"id": 1752,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2288:3:13",
														"subExpression": {
															"id": 1751,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1741,
															"src": "2290:1:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1753,
													"nodeType": "ExpressionStatement",
													"src": "2288:3:13"
												},
												"nodeType": "ForStatement",
												"src": "2248:140:13"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1772,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1770,
														"name": "localValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1714,
														"src": "2401:10:13",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1771,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2415:1:13",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2401:15:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1779,
												"nodeType": "IfStatement",
												"src": "2397:96:13",
												"trueBody": {
													"id": 1778,
													"nodeType": "Block",
													"src": "2418:75:13",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1774,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1706,
																		"src": "2468:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1775,
																		"name": "length",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1708,
																		"src": "2475:6:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1773,
																	"name": "StringsInsufficientHexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1609,
																	"src": "2439:28:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$_t_error_$",
																		"typeString": "function (uint256,uint256) pure returns (error)"
																	}
																},
																"id": 1776,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2439:43:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_error",
																	"typeString": "error"
																}
															},
															"id": 1777,
															"nodeType": "RevertStatement",
															"src": "2432:50:13"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1782,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1718,
															"src": "2516:6:13",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1781,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2509:6:13",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1780,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2509:6:13",
															"typeDescriptions": {}
														}
													},
													"id": 1783,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2509:14:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1712,
												"id": 1784,
												"nodeType": "Return",
												"src": "2502:21:13"
											}
										]
									},
									"documentation": {
										"id": 1704,
										"nodeType": "StructuredDocumentation",
										"src": "1888:112:13",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1786,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2014:11:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1709,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1706,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2034:5:13",
												"nodeType": "VariableDeclaration",
												"scope": 1786,
												"src": "2026:13:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2026:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1708,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "2049:6:13",
												"nodeType": "VariableDeclaration",
												"scope": 1786,
												"src": "2041:14:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1707,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2041:7:13",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2025:31:13"
									},
									"returnParameters": {
										"id": 1712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1711,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1786,
												"src": "2080:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1710,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2080:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2079:15:13"
									},
									"scope": 1844,
									"src": "2005:525:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1805,
										"nodeType": "Block",
										"src": "2762:75:13",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1799,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1789,
																			"src": "2807:4:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1798,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2799:7:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1797,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2799:7:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1800,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2799:13:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1796,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2791:7:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1795,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2791:7:13",
																	"typeDescriptions": {}
																}
															},
															"id": 1801,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2791:22:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1802,
															"name": "ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1602,
															"src": "2815:14:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1794,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1703,
															1786,
															1806
														],
														"referencedDeclaration": 1786,
														"src": "2779:11:13",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2779:51:13",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1793,
												"id": 1804,
												"nodeType": "Return",
												"src": "2772:58:13"
											}
										]
									},
									"documentation": {
										"id": 1787,
										"nodeType": "StructuredDocumentation",
										"src": "2536:148:13",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."
									},
									"id": 1806,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2698:11:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1790,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1789,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2718:4:13",
												"nodeType": "VariableDeclaration",
												"scope": 1806,
												"src": "2710:12:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1788,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2710:7:13",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2709:14:13"
									},
									"returnParameters": {
										"id": 1793,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1792,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1806,
												"src": "2747:13:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1791,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2747:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:15:13"
									},
									"scope": 1844,
									"src": "2689:148:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1842,
										"nodeType": "Block",
										"src": "2992:104:13",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1840,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1826,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1818,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1809,
																		"src": "3015:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1817,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3009:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1816,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3009:5:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1819,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3009:8:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1820,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3018:6:13",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3009:15:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1823,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1811,
																		"src": "3034:1:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1822,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3028:5:13",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1821,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3028:5:13",
																		"typeDescriptions": {}
																	}
																},
																"id": 1824,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3028:8:13",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1825,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3037:6:13",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3028:15:13",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3009:34:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 1839,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1830,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1809,
																			"src": "3063:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1829,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3057:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1828,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3057:5:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1831,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3057:8:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1827,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3047:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3047:19:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1836,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1811,
																			"src": "3086:1:13",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1835,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3080:5:13",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1834,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3080:5:13",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1837,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3080:8:13",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1833,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3070:9:13",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3070:19:13",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3047:42:13",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3009:80:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1815,
												"id": 1841,
												"nodeType": "Return",
												"src": "3002:87:13"
											}
										]
									},
									"documentation": {
										"id": 1807,
										"nodeType": "StructuredDocumentation",
										"src": "2843:66:13",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 1843,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "2923:5:13",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1812,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1809,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2943:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "2929:15:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1808,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2929:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1811,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2960:1:13",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "2946:15:13",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1810,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2946:6:13",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2928:34:13"
									},
									"returnParameters": {
										"id": 1815,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1814,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1843,
												"src": "2986:4:13",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1813,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2986:4:13",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2985:6:13"
									},
									"scope": 1844,
									"src": "2914:182:13",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1845,
							"src": "251:2847:13",
							"usedErrors": [
								1609
							],
							"usedEvents": []
						}
					],
					"src": "101:2998:13"
				},
				"id": 13
			},
			"@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/utils/cryptography/ECDSA.sol",
					"exportedSymbols": {
						"ECDSA": [
							2192
						]
					},
					"id": 2193,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1846,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:14"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ECDSA",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1847,
								"nodeType": "StructuredDocumentation",
								"src": "138:205:14",
								"text": " @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."
							},
							"fullyImplemented": true,
							"id": 2192,
							"linearizedBaseContracts": [
								2192
							],
							"name": "ECDSA",
							"nameLocation": "352:5:14",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "ECDSA.RecoverError",
									"id": 1852,
									"members": [
										{
											"id": 1848,
											"name": "NoError",
											"nameLocation": "392:7:14",
											"nodeType": "EnumValue",
											"src": "392:7:14"
										},
										{
											"id": 1849,
											"name": "InvalidSignature",
											"nameLocation": "409:16:14",
											"nodeType": "EnumValue",
											"src": "409:16:14"
										},
										{
											"id": 1850,
											"name": "InvalidSignatureLength",
											"nameLocation": "435:22:14",
											"nodeType": "EnumValue",
											"src": "435:22:14"
										},
										{
											"id": 1851,
											"name": "InvalidSignatureS",
											"nameLocation": "467:17:14",
											"nodeType": "EnumValue",
											"src": "467:17:14"
										}
									],
									"name": "RecoverError",
									"nameLocation": "369:12:14",
									"nodeType": "EnumDefinition",
									"src": "364:126:14"
								},
								{
									"documentation": {
										"id": 1853,
										"nodeType": "StructuredDocumentation",
										"src": "496:63:14",
										"text": " @dev The signature derives the `address(0)`."
									},
									"errorSelector": "f645eedf",
									"id": 1855,
									"name": "ECDSAInvalidSignature",
									"nameLocation": "570:21:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1854,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "591:2:14"
									},
									"src": "564:30:14"
								},
								{
									"documentation": {
										"id": 1856,
										"nodeType": "StructuredDocumentation",
										"src": "600:60:14",
										"text": " @dev The signature has an invalid length."
									},
									"errorSelector": "fce698f7",
									"id": 1860,
									"name": "ECDSAInvalidSignatureLength",
									"nameLocation": "671:27:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1859,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1858,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "707:6:14",
												"nodeType": "VariableDeclaration",
												"scope": 1860,
												"src": "699:14:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1857,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "699:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "698:16:14"
									},
									"src": "665:50:14"
								},
								{
									"documentation": {
										"id": 1861,
										"nodeType": "StructuredDocumentation",
										"src": "721:85:14",
										"text": " @dev The signature has an S value that is in the upper half order."
									},
									"errorSelector": "d78bce0c",
									"id": 1865,
									"name": "ECDSAInvalidSignatureS",
									"nameLocation": "817:22:14",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1864,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1863,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "848:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1865,
												"src": "840:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1862,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "840:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:11:14"
									},
									"src": "811:40:14"
								},
								{
									"body": {
										"id": 1917,
										"nodeType": "Block",
										"src": "2242:653:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1883,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1880,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1870,
															"src": "2256:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1881,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "2266:6:14",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "2256:16:14",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "3635",
														"id": 1882,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2276:2:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_65_by_1",
															"typeString": "int_const 65"
														},
														"value": "65"
													},
													"src": "2256:22:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1915,
													"nodeType": "Block",
													"src": "2781:108:14",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1904,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2811:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1903,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2803:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1902,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2803:7:14",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1905,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2803:10:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 1906,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1852,
																			"src": "2815:12:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1852_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 1907,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "2828:22:14",
																		"memberName": "InvalidSignatureLength",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1850,
																		"src": "2815:35:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1852",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 1910,
																					"name": "signature",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1870,
																					"src": "2860:9:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_memory_ptr",
																						"typeString": "bytes memory"
																					}
																				},
																				"id": 1911,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2870:6:14",
																				"memberName": "length",
																				"nodeType": "MemberAccess",
																				"src": "2860:16:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 1909,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2852:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 1908,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "2852:7:14",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1912,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2852:25:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 1913,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2802:76:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1879,
															"id": 1914,
															"nodeType": "Return",
															"src": "2795:83:14"
														}
													]
												},
												"id": 1916,
												"nodeType": "IfStatement",
												"src": "2252:637:14",
												"trueBody": {
													"id": 1901,
													"nodeType": "Block",
													"src": "2280:495:14",
													"statements": [
														{
															"assignments": [
																1885
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1885,
																	"mutability": "mutable",
																	"name": "r",
																	"nameLocation": "2302:1:14",
																	"nodeType": "VariableDeclaration",
																	"scope": 1901,
																	"src": "2294:9:14",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1884,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2294:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1886,
															"nodeType": "VariableDeclarationStatement",
															"src": "2294:9:14"
														},
														{
															"assignments": [
																1888
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1888,
																	"mutability": "mutable",
																	"name": "s",
																	"nameLocation": "2325:1:14",
																	"nodeType": "VariableDeclaration",
																	"scope": 1901,
																	"src": "2317:9:14",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	"typeName": {
																		"id": 1887,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "2317:7:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1889,
															"nodeType": "VariableDeclarationStatement",
															"src": "2317:9:14"
														},
														{
															"assignments": [
																1891
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1891,
																	"mutability": "mutable",
																	"name": "v",
																	"nameLocation": "2346:1:14",
																	"nodeType": "VariableDeclaration",
																	"scope": 1901,
																	"src": "2340:7:14",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	"typeName": {
																		"id": 1890,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "2340:5:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1892,
															"nodeType": "VariableDeclarationStatement",
															"src": "2340:7:14"
														},
														{
															"AST": {
																"nativeSrc": "2548:171:14",
																"nodeType": "YulBlock",
																"src": "2548:171:14",
																"statements": [
																	{
																		"nativeSrc": "2566:32:14",
																		"nodeType": "YulAssignment",
																		"src": "2566:32:14",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2581:9:14",
																							"nodeType": "YulIdentifier",
																							"src": "2581:9:14"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2592:4:14",
																							"nodeType": "YulLiteral",
																							"src": "2592:4:14",
																							"type": "",
																							"value": "0x20"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2577:3:14",
																						"nodeType": "YulIdentifier",
																						"src": "2577:3:14"
																					},
																					"nativeSrc": "2577:20:14",
																					"nodeType": "YulFunctionCall",
																					"src": "2577:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2571:5:14",
																				"nodeType": "YulIdentifier",
																				"src": "2571:5:14"
																			},
																			"nativeSrc": "2571:27:14",
																			"nodeType": "YulFunctionCall",
																			"src": "2571:27:14"
																		},
																		"variableNames": [
																			{
																				"name": "r",
																				"nativeSrc": "2566:1:14",
																				"nodeType": "YulIdentifier",
																				"src": "2566:1:14"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2615:32:14",
																		"nodeType": "YulAssignment",
																		"src": "2615:32:14",
																		"value": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "signature",
																							"nativeSrc": "2630:9:14",
																							"nodeType": "YulIdentifier",
																							"src": "2630:9:14"
																						},
																						{
																							"kind": "number",
																							"nativeSrc": "2641:4:14",
																							"nodeType": "YulLiteral",
																							"src": "2641:4:14",
																							"type": "",
																							"value": "0x40"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nativeSrc": "2626:3:14",
																						"nodeType": "YulIdentifier",
																						"src": "2626:3:14"
																					},
																					"nativeSrc": "2626:20:14",
																					"nodeType": "YulFunctionCall",
																					"src": "2626:20:14"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nativeSrc": "2620:5:14",
																				"nodeType": "YulIdentifier",
																				"src": "2620:5:14"
																			},
																			"nativeSrc": "2620:27:14",
																			"nodeType": "YulFunctionCall",
																			"src": "2620:27:14"
																		},
																		"variableNames": [
																			{
																				"name": "s",
																				"nativeSrc": "2615:1:14",
																				"nodeType": "YulIdentifier",
																				"src": "2615:1:14"
																			}
																		]
																	},
																	{
																		"nativeSrc": "2664:41:14",
																		"nodeType": "YulAssignment",
																		"src": "2664:41:14",
																		"value": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nativeSrc": "2674:1:14",
																					"nodeType": "YulLiteral",
																					"src": "2674:1:14",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "signature",
																									"nativeSrc": "2687:9:14",
																									"nodeType": "YulIdentifier",
																									"src": "2687:9:14"
																								},
																								{
																									"kind": "number",
																									"nativeSrc": "2698:4:14",
																									"nodeType": "YulLiteral",
																									"src": "2698:4:14",
																									"type": "",
																									"value": "0x60"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nativeSrc": "2683:3:14",
																								"nodeType": "YulIdentifier",
																								"src": "2683:3:14"
																							},
																							"nativeSrc": "2683:20:14",
																							"nodeType": "YulFunctionCall",
																							"src": "2683:20:14"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nativeSrc": "2677:5:14",
																						"nodeType": "YulIdentifier",
																						"src": "2677:5:14"
																					},
																					"nativeSrc": "2677:27:14",
																					"nodeType": "YulFunctionCall",
																					"src": "2677:27:14"
																				}
																			],
																			"functionName": {
																				"name": "byte",
																				"nativeSrc": "2669:4:14",
																				"nodeType": "YulIdentifier",
																				"src": "2669:4:14"
																			},
																			"nativeSrc": "2669:36:14",
																			"nodeType": "YulFunctionCall",
																			"src": "2669:36:14"
																		},
																		"variableNames": [
																			{
																				"name": "v",
																				"nativeSrc": "2664:1:14",
																				"nodeType": "YulIdentifier",
																				"src": "2664:1:14"
																			}
																		]
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "cancun",
															"externalReferences": [
																{
																	"declaration": 1885,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2566:1:14",
																	"valueSize": 1
																},
																{
																	"declaration": 1888,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2615:1:14",
																	"valueSize": 1
																},
																{
																	"declaration": 1870,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2581:9:14",
																	"valueSize": 1
																},
																{
																	"declaration": 1870,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2630:9:14",
																	"valueSize": 1
																},
																{
																	"declaration": 1870,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2687:9:14",
																	"valueSize": 1
																},
																{
																	"declaration": 1891,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "2664:1:14",
																	"valueSize": 1
																}
															],
															"id": 1893,
															"nodeType": "InlineAssembly",
															"src": "2539:180:14"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1895,
																		"name": "hash",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1868,
																		"src": "2750:4:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1896,
																		"name": "v",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1891,
																		"src": "2756:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	},
																	{
																		"id": 1897,
																		"name": "r",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1885,
																		"src": "2759:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	},
																	{
																		"id": 1898,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1888,
																		"src": "2762:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		},
																		{
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	],
																	"id": 1894,
																	"name": "tryRecover",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1918,
																		1998,
																		2106
																	],
																	"referencedDeclaration": 2106,
																	"src": "2739:10:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
																		"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																	}
																},
																"id": 1899,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2739:25:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 1879,
															"id": 1900,
															"nodeType": "Return",
															"src": "2732:32:14"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1866,
										"nodeType": "StructuredDocumentation",
										"src": "857:1267:14",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\n return address(0) without also returning an error description. Errors are documented using an enum (error type)\n and a bytes32 providing additional information about the error.\n If no error is returned, then the address can be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]"
									},
									"id": 1918,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "2138:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1871,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1868,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "2157:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "2149:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1867,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1870,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "2176:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "2163:22:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1869,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2163:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2148:38:14"
									},
									"returnParameters": {
										"id": 1879,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1873,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "2210:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1872,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2210:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1876,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "2219:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1852",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1875,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1874,
														"name": "RecoverError",
														"nameLocations": [
															"2219:12:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1852,
														"src": "2219:12:14"
													},
													"referencedDeclaration": 1852,
													"src": "2219:12:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1852",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1878,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1918,
												"src": "2233:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1877,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2233:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2209:32:14"
									},
									"scope": 2192,
									"src": "2129:766:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1947,
										"nodeType": "Block",
										"src": "3789:168:14",
										"statements": [
											{
												"assignments": [
													1929,
													1932,
													1934
												],
												"declarations": [
													{
														"constant": false,
														"id": 1929,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "3808:9:14",
														"nodeType": "VariableDeclaration",
														"scope": 1947,
														"src": "3800:17:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1928,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3800:7:14",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1932,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "3832:5:14",
														"nodeType": "VariableDeclaration",
														"scope": 1947,
														"src": "3819:18:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1852",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 1931,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 1930,
																"name": "RecoverError",
																"nameLocations": [
																	"3819:12:14"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1852,
																"src": "3819:12:14"
															},
															"referencedDeclaration": 1852,
															"src": "3819:12:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1934,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "3847:8:14",
														"nodeType": "VariableDeclaration",
														"scope": 1947,
														"src": "3839:16:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 1933,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "3839:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1939,
												"initialValue": {
													"arguments": [
														{
															"id": 1936,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1921,
															"src": "3870:4:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 1937,
															"name": "signature",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1923,
															"src": "3876:9:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1935,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1918,
															1998,
															2106
														],
														"referencedDeclaration": 1918,
														"src": "3859:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 1938,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3859:27:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3799:87:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1941,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1932,
															"src": "3908:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 1942,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1934,
															"src": "3915:8:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 1940,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2191,
														"src": "3896:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1852_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 1943,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3896:28:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1944,
												"nodeType": "ExpressionStatement",
												"src": "3896:28:14"
											},
											{
												"expression": {
													"id": 1945,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1929,
													"src": "3941:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1927,
												"id": 1946,
												"nodeType": "Return",
												"src": "3934:16:14"
											}
										]
									},
									"documentation": {
										"id": 1919,
										"nodeType": "StructuredDocumentation",
										"src": "2901:796:14",
										"text": " @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it."
									},
									"id": 1948,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "3711:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1924,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1921,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "3727:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1948,
												"src": "3719:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1920,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3719:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1923,
												"mutability": "mutable",
												"name": "signature",
												"nameLocation": "3746:9:14",
												"nodeType": "VariableDeclaration",
												"scope": 1948,
												"src": "3733:22:14",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1922,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3733:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3718:38:14"
									},
									"returnParameters": {
										"id": 1927,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1926,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1948,
												"src": "3780:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1925,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3780:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3779:9:14"
									},
									"scope": 2192,
									"src": "3702:255:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1997,
										"nodeType": "Block",
										"src": "4285:342:14",
										"statements": [
											{
												"id": 1996,
												"nodeType": "UncheckedBlock",
												"src": "4295:326:14",
												"statements": [
													{
														"assignments": [
															1966
														],
														"declarations": [
															{
																"constant": false,
																"id": 1966,
																"mutability": "mutable",
																"name": "s",
																"nameLocation": "4327:1:14",
																"nodeType": "VariableDeclaration",
																"scope": 1996,
																"src": "4319:9:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																},
																"typeName": {
																	"id": 1965,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "4319:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1973,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															"id": 1972,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1967,
																"name": "vs",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1955,
																"src": "4331:2:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666",
																		"id": 1970,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4344:66:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		},
																		"value": "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1",
																			"typeString": "int_const 5789...(69 digits omitted)...9967"
																		}
																	],
																	"id": 1969,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "4336:7:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes32_$",
																		"typeString": "type(bytes32)"
																	},
																	"typeName": {
																		"id": 1968,
																		"name": "bytes32",
																		"nodeType": "ElementaryTypeName",
																		"src": "4336:7:14",
																		"typeDescriptions": {}
																	}
																},
																"id": 1971,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4336:75:14",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"src": "4331:80:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4319:92:14"
													},
													{
														"assignments": [
															1975
														],
														"declarations": [
															{
																"constant": false,
																"id": 1975,
																"mutability": "mutable",
																"name": "v",
																"nameLocation": "4528:1:14",
																"nodeType": "VariableDeclaration",
																"scope": 1996,
																"src": "4522:7:14",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"typeName": {
																	"id": 1974,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4522:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1988,
														"initialValue": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1986,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"components": [
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 1983,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"arguments": [
																						{
																							"id": 1980,
																							"name": "vs",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1955,
																							"src": "4547:2:14",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_bytes32",
																								"typeString": "bytes32"
																							}
																						],
																						"id": 1979,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "4539:7:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_uint256_$",
																							"typeString": "type(uint256)"
																						},
																						"typeName": {
																							"id": 1978,
																							"name": "uint256",
																							"nodeType": "ElementaryTypeName",
																							"src": "4539:7:14",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 1981,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"nameLocations": [],
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "4539:11:14",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": ">>",
																				"rightExpression": {
																					"hexValue": "323535",
																					"id": 1982,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "4554:3:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_255_by_1",
																						"typeString": "int_const 255"
																					},
																					"value": "255"
																				},
																				"src": "4539:18:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"id": 1984,
																		"isConstant": false,
																		"isInlineArray": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "TupleExpression",
																		"src": "4538:20:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "3237",
																		"id": 1985,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4561:2:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_27_by_1",
																			"typeString": "int_const 27"
																		},
																		"value": "27"
																	},
																	"src": "4538:25:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1977,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4532:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 1976,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "4532:5:14",
																	"typeDescriptions": {}
																}
															},
															"id": 1987,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4532:32:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4522:42:14"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 1990,
																	"name": "hash",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1951,
																	"src": "4596:4:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1991,
																	"name": "v",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1975,
																	"src": "4602:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																{
																	"id": 1992,
																	"name": "r",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1953,
																	"src": "4605:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 1993,
																	"name": "s",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1966,
																	"src": "4608:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																],
																"id": 1989,
																"name": "tryRecover",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1918,
																	1998,
																	2106
																],
																"referencedDeclaration": 2106,
																"src": "4585:10:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
																	"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"id": 1994,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4585:25:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
																"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
															}
														},
														"functionReturnParameters": 1964,
														"id": 1995,
														"nodeType": "Return",
														"src": "4578:32:14"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1949,
										"nodeType": "StructuredDocumentation",
										"src": "3963:205:14",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]"
									},
									"id": 1998,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "4182:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1956,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1951,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4201:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 1998,
												"src": "4193:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1950,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4193:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1953,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4215:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 1998,
												"src": "4207:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1952,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4207:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1955,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4226:2:14",
												"nodeType": "VariableDeclaration",
												"scope": 1998,
												"src": "4218:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1954,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4218:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4192:37:14"
									},
									"returnParameters": {
										"id": 1964,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1958,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1998,
												"src": "4253:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1957,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4253:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1961,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1998,
												"src": "4262:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1852",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 1960,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 1959,
														"name": "RecoverError",
														"nameLocations": [
															"4262:12:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1852,
														"src": "4262:12:14"
													},
													"referencedDeclaration": 1852,
													"src": "4262:12:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1852",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1963,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1998,
												"src": "4276:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 1962,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4276:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4252:32:14"
									},
									"scope": 2192,
									"src": "4173:454:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2030,
										"nodeType": "Block",
										"src": "4840:164:14",
										"statements": [
											{
												"assignments": [
													2011,
													2014,
													2016
												],
												"declarations": [
													{
														"constant": false,
														"id": 2011,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "4859:9:14",
														"nodeType": "VariableDeclaration",
														"scope": 2030,
														"src": "4851:17:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2010,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4851:7:14",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2014,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "4883:5:14",
														"nodeType": "VariableDeclaration",
														"scope": 2030,
														"src": "4870:18:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1852",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2013,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2012,
																"name": "RecoverError",
																"nameLocations": [
																	"4870:12:14"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1852,
																"src": "4870:12:14"
															},
															"referencedDeclaration": 1852,
															"src": "4870:12:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2016,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "4898:8:14",
														"nodeType": "VariableDeclaration",
														"scope": 2030,
														"src": "4890:16:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2015,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "4890:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2022,
												"initialValue": {
													"arguments": [
														{
															"id": 2018,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2001,
															"src": "4921:4:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2019,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2003,
															"src": "4927:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2020,
															"name": "vs",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2005,
															"src": "4930:2:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2017,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1918,
															1998,
															2106
														],
														"referencedDeclaration": 1998,
														"src": "4910:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2021,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4910:23:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4850:83:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2024,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2014,
															"src": "4955:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2025,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2016,
															"src": "4962:8:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2023,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2191,
														"src": "4943:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1852_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2026,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4943:28:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2027,
												"nodeType": "ExpressionStatement",
												"src": "4943:28:14"
											},
											{
												"expression": {
													"id": 2028,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2011,
													"src": "4988:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2009,
												"id": 2029,
												"nodeType": "Return",
												"src": "4981:16:14"
											}
										]
									},
									"documentation": {
										"id": 1999,
										"nodeType": "StructuredDocumentation",
										"src": "4633:116:14",
										"text": " @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately."
									},
									"id": 2031,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "4763:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2006,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2001,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "4779:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "4771:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2000,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4771:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2003,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "4793:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "4785:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2002,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4785:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2005,
												"mutability": "mutable",
												"name": "vs",
												"nameLocation": "4804:2:14",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "4796:10:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2004,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4796:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4770:37:14"
									},
									"returnParameters": {
										"id": 2009,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2008,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2031,
												"src": "4831:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2007,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4831:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4830:9:14"
									},
									"scope": 2192,
									"src": "4754:250:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2105,
										"nodeType": "Block",
										"src": "5298:1372:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2055,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2052,
																"name": "s",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2040,
																"src": "6194:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															],
															"id": 2051,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6186:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_uint256_$",
																"typeString": "type(uint256)"
															},
															"typeName": {
																"id": 2050,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "6186:7:14",
																"typeDescriptions": {}
															}
														},
														"id": 2053,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6186:10:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130",
														"id": 2054,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6199:66:14",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1",
															"typeString": "int_const 5789...(69 digits omitted)...7168"
														},
														"value": "0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"
													},
													"src": "6186:79:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2066,
												"nodeType": "IfStatement",
												"src": "6182:164:14",
												"trueBody": {
													"id": 2065,
													"nodeType": "Block",
													"src": "6267:79:14",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2058,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6297:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2057,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6289:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2056,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6289:7:14",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2059,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6289:10:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2060,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1852,
																			"src": "6301:12:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1852_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2061,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6314:17:14",
																		"memberName": "InvalidSignatureS",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1851,
																		"src": "6301:30:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1852",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"id": 2062,
																		"name": "s",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2040,
																		"src": "6333:1:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2063,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6288:47:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2049,
															"id": 2064,
															"nodeType": "Return",
															"src": "6281:54:14"
														}
													]
												}
											},
											{
												"assignments": [
													2068
												],
												"declarations": [
													{
														"constant": false,
														"id": 2068,
														"mutability": "mutable",
														"name": "signer",
														"nameLocation": "6448:6:14",
														"nodeType": "VariableDeclaration",
														"scope": 2105,
														"src": "6440:14:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2067,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6440:7:14",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2075,
												"initialValue": {
													"arguments": [
														{
															"id": 2070,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2034,
															"src": "6467:4:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2071,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2036,
															"src": "6473:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2072,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2038,
															"src": "6476:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2073,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2040,
															"src": "6479:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2069,
														"name": "ecrecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967290,
														"src": "6457:9:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
														}
													},
													"id": 2074,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6457:24:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6440:41:14"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 2081,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2076,
														"name": "signer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2068,
														"src": "6495:6:14",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 2079,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6513:1:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 2078,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "6505:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2077,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "6505:7:14",
																"typeDescriptions": {}
															}
														},
														"id": 2080,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "6505:10:14",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "6495:20:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2095,
												"nodeType": "IfStatement",
												"src": "6491:113:14",
												"trueBody": {
													"id": 2094,
													"nodeType": "Block",
													"src": "6517:87:14",
													"statements": [
														{
															"expression": {
																"components": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2084,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6547:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2083,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6539:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 2082,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "6539:7:14",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2085,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6539:10:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"expression": {
																			"id": 2086,
																			"name": "RecoverError",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1852,
																			"src": "6551:12:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_enum$_RecoverError_$1852_$",
																				"typeString": "type(enum ECDSA.RecoverError)"
																			}
																		},
																		"id": 2087,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "6564:16:14",
																		"memberName": "InvalidSignature",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 1849,
																		"src": "6551:29:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_enum$_RecoverError_$1852",
																			"typeString": "enum ECDSA.RecoverError"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 2090,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "6590:1:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 2089,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "6582:7:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bytes32_$",
																				"typeString": "type(bytes32)"
																			},
																			"typeName": {
																				"id": 2088,
																				"name": "bytes32",
																				"nodeType": "ElementaryTypeName",
																				"src": "6582:7:14",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 2091,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6582:10:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes32",
																			"typeString": "bytes32"
																		}
																	}
																],
																"id": 2092,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6538:55:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
																	"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
																}
															},
															"functionReturnParameters": 2049,
															"id": 2093,
															"nodeType": "Return",
															"src": "6531:62:14"
														}
													]
												}
											},
											{
												"expression": {
													"components": [
														{
															"id": 2096,
															"name": "signer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2068,
															"src": "6622:6:14",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"expression": {
																"id": 2097,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1852,
																"src": "6630:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1852_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2098,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "6643:7:14",
															"memberName": "NoError",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1848,
															"src": "6630:20:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2101,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6660:1:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2100,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6652:7:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2099,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "6652:7:14",
																	"typeDescriptions": {}
																}
															},
															"id": 2102,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6652:10:14",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"id": 2103,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "6621:42:14",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"functionReturnParameters": 2049,
												"id": 2104,
												"nodeType": "Return",
												"src": "6614:49:14"
											}
										]
									},
									"documentation": {
										"id": 2032,
										"nodeType": "StructuredDocumentation",
										"src": "5010:125:14",
										"text": " @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2106,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryRecover",
									"nameLocation": "5149:10:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2041,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2034,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "5177:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2106,
												"src": "5169:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2033,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2036,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "5197:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2106,
												"src": "5191:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2035,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "5191:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2038,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "5216:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2106,
												"src": "5208:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2037,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5208:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2040,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "5235:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2106,
												"src": "5227:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2039,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5227:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5159:83:14"
									},
									"returnParameters": {
										"id": 2049,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2043,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2106,
												"src": "5266:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2042,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5266:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2046,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2106,
												"src": "5275:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1852",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2045,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2044,
														"name": "RecoverError",
														"nameLocations": [
															"5275:12:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1852,
														"src": "5275:12:14"
													},
													"referencedDeclaration": 1852,
													"src": "5275:12:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1852",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2048,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2106,
												"src": "5289:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2047,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5289:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5265:32:14"
									},
									"scope": 2192,
									"src": "5140:1530:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2141,
										"nodeType": "Block",
										"src": "6897:166:14",
										"statements": [
											{
												"assignments": [
													2121,
													2124,
													2126
												],
												"declarations": [
													{
														"constant": false,
														"id": 2121,
														"mutability": "mutable",
														"name": "recovered",
														"nameLocation": "6916:9:14",
														"nodeType": "VariableDeclaration",
														"scope": 2141,
														"src": "6908:17:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 2120,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6908:7:14",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2124,
														"mutability": "mutable",
														"name": "error",
														"nameLocation": "6940:5:14",
														"nodeType": "VariableDeclaration",
														"scope": 2141,
														"src": "6927:18:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1852",
															"typeString": "enum ECDSA.RecoverError"
														},
														"typeName": {
															"id": 2123,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 2122,
																"name": "RecoverError",
																"nameLocations": [
																	"6927:12:14"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 1852,
																"src": "6927:12:14"
															},
															"referencedDeclaration": 1852,
															"src": "6927:12:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 2126,
														"mutability": "mutable",
														"name": "errorArg",
														"nameLocation": "6955:8:14",
														"nodeType": "VariableDeclaration",
														"scope": 2141,
														"src": "6947:16:14",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"typeName": {
															"id": 2125,
															"name": "bytes32",
															"nodeType": "ElementaryTypeName",
															"src": "6947:7:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2133,
												"initialValue": {
													"arguments": [
														{
															"id": 2128,
															"name": "hash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2109,
															"src": "6978:4:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2129,
															"name": "v",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2111,
															"src": "6984:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														{
															"id": 2130,
															"name": "r",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2113,
															"src": "6987:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2131,
															"name": "s",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2115,
															"src": "6990:1:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2127,
														"name": "tryRecover",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1918,
															1998,
															2106
														],
														"referencedDeclaration": 2106,
														"src": "6967:10:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
															"typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError,bytes32)"
														}
													},
													"id": 2132,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6967:25:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_address_$_t_enum$_RecoverError_$1852_$_t_bytes32_$",
														"typeString": "tuple(address,enum ECDSA.RecoverError,bytes32)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6907:85:14"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 2135,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2124,
															"src": "7014:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														{
															"id": 2136,
															"name": "errorArg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2126,
															"src": "7021:8:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"id": 2134,
														"name": "_throwError",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2191,
														"src": "7002:11:14",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_enum$_RecoverError_$1852_$_t_bytes32_$returns$__$",
															"typeString": "function (enum ECDSA.RecoverError,bytes32) pure"
														}
													},
													"id": 2137,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7002:28:14",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 2138,
												"nodeType": "ExpressionStatement",
												"src": "7002:28:14"
											},
											{
												"expression": {
													"id": 2139,
													"name": "recovered",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2121,
													"src": "7047:9:14",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 2119,
												"id": 2140,
												"nodeType": "Return",
												"src": "7040:16:14"
											}
										]
									},
									"documentation": {
										"id": 2107,
										"nodeType": "StructuredDocumentation",
										"src": "6676:122:14",
										"text": " @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."
									},
									"id": 2142,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "recover",
									"nameLocation": "6812:7:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2116,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2109,
												"mutability": "mutable",
												"name": "hash",
												"nameLocation": "6828:4:14",
												"nodeType": "VariableDeclaration",
												"scope": 2142,
												"src": "6820:12:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2108,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6820:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2111,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "6840:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2142,
												"src": "6834:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 2110,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "6834:5:14",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2113,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "6851:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2142,
												"src": "6843:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2112,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6843:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2115,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "6862:1:14",
												"nodeType": "VariableDeclaration",
												"scope": 2142,
												"src": "6854:9:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2114,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "6854:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6819:45:14"
									},
									"returnParameters": {
										"id": 2119,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2118,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2142,
												"src": "6888:7:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2117,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6888:7:14",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6887:9:14"
									},
									"scope": 2192,
									"src": "6803:260:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2190,
										"nodeType": "Block",
										"src": "7268:460:14",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_enum$_RecoverError_$1852",
														"typeString": "enum ECDSA.RecoverError"
													},
													"id": 2154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2151,
														"name": "error",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2146,
														"src": "7282:5:14",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1852",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"id": 2152,
															"name": "RecoverError",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1852,
															"src": "7291:12:14",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_enum$_RecoverError_$1852_$",
																"typeString": "type(enum ECDSA.RecoverError)"
															}
														},
														"id": 2153,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "7304:7:14",
														"memberName": "NoError",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1848,
														"src": "7291:20:14",
														"typeDescriptions": {
															"typeIdentifier": "t_enum$_RecoverError_$1852",
															"typeString": "enum ECDSA.RecoverError"
														}
													},
													"src": "7282:29:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_enum$_RecoverError_$1852",
															"typeString": "enum ECDSA.RecoverError"
														},
														"id": 2160,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2157,
															"name": "error",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2146,
															"src": "7378:5:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"id": 2158,
																"name": "RecoverError",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1852,
																"src": "7387:12:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_enum$_RecoverError_$1852_$",
																	"typeString": "type(enum ECDSA.RecoverError)"
																}
															},
															"id": 2159,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"memberLocation": "7400:16:14",
															"memberName": "InvalidSignature",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1849,
															"src": "7387:29:14",
															"typeDescriptions": {
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															}
														},
														"src": "7378:38:14",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseBody": {
														"condition": {
															"commonType": {
																"typeIdentifier": "t_enum$_RecoverError_$1852",
																"typeString": "enum ECDSA.RecoverError"
															},
															"id": 2168,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2165,
																"name": "error",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2146,
																"src": "7483:5:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1852",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"id": 2166,
																	"name": "RecoverError",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1852,
																	"src": "7492:12:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_enum$_RecoverError_$1852_$",
																		"typeString": "type(enum ECDSA.RecoverError)"
																	}
																},
																"id": 2167,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "7505:22:14",
																"memberName": "InvalidSignatureLength",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 1850,
																"src": "7492:35:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_RecoverError_$1852",
																	"typeString": "enum ECDSA.RecoverError"
																}
															},
															"src": "7483:44:14",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"falseBody": {
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_enum$_RecoverError_$1852",
																	"typeString": "enum ECDSA.RecoverError"
																},
																"id": 2180,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2177,
																	"name": "error",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2146,
																	"src": "7617:5:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1852",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"expression": {
																		"id": 2178,
																		"name": "RecoverError",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1852,
																		"src": "7626:12:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_enum$_RecoverError_$1852_$",
																			"typeString": "type(enum ECDSA.RecoverError)"
																		}
																	},
																	"id": 2179,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "7639:17:14",
																	"memberName": "InvalidSignatureS",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1851,
																	"src": "7626:30:14",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_RecoverError_$1852",
																		"typeString": "enum ECDSA.RecoverError"
																	}
																},
																"src": "7617:39:14",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 2186,
															"nodeType": "IfStatement",
															"src": "7613:109:14",
															"trueBody": {
																"id": 2185,
																"nodeType": "Block",
																"src": "7658:64:14",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 2182,
																					"name": "errorArg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2148,
																					"src": "7702:8:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bytes32",
																						"typeString": "bytes32"
																					}
																				],
																				"id": 2181,
																				"name": "ECDSAInvalidSignatureS",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1865,
																				"src": "7679:22:14",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_bytes32_$returns$_t_error_$",
																					"typeString": "function (bytes32) pure returns (error)"
																				}
																			},
																			"id": 2183,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7679:32:14",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_error",
																				"typeString": "error"
																			}
																		},
																		"id": 2184,
																		"nodeType": "RevertStatement",
																		"src": "7672:39:14"
																	}
																]
															}
														},
														"id": 2187,
														"nodeType": "IfStatement",
														"src": "7479:243:14",
														"trueBody": {
															"id": 2176,
															"nodeType": "Block",
															"src": "7529:78:14",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"id": 2172,
																						"name": "errorArg",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2148,
																						"src": "7586:8:14",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_bytes32",
																							"typeString": "bytes32"
																						}
																					],
																					"id": 2171,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "7578:7:14",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 2170,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "7578:7:14",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 2173,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "7578:17:14",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 2169,
																			"name": "ECDSAInvalidSignatureLength",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1860,
																			"src": "7550:27:14",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$_t_error_$",
																				"typeString": "function (uint256) pure returns (error)"
																			}
																		},
																		"id": 2174,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "7550:46:14",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 2175,
																	"nodeType": "RevertStatement",
																	"src": "7543:53:14"
																}
															]
														}
													},
													"id": 2188,
													"nodeType": "IfStatement",
													"src": "7374:348:14",
													"trueBody": {
														"id": 2164,
														"nodeType": "Block",
														"src": "7418:55:14",
														"statements": [
															{
																"errorCall": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 2161,
																		"name": "ECDSAInvalidSignature",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1855,
																		"src": "7439:21:14",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																			"typeString": "function () pure returns (error)"
																		}
																	},
																	"id": 2162,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7439:23:14",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_error",
																		"typeString": "error"
																	}
																},
																"id": 2163,
																"nodeType": "RevertStatement",
																"src": "7432:30:14"
															}
														]
													}
												},
												"id": 2189,
												"nodeType": "IfStatement",
												"src": "7278:444:14",
												"trueBody": {
													"id": 2156,
													"nodeType": "Block",
													"src": "7313:55:14",
													"statements": [
														{
															"functionReturnParameters": 2150,
															"id": 2155,
															"nodeType": "Return",
															"src": "7327:7:14"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2143,
										"nodeType": "StructuredDocumentation",
										"src": "7069:122:14",
										"text": " @dev Optionally reverts with the corresponding custom error according to the `error` argument provided."
									},
									"id": 2191,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_throwError",
									"nameLocation": "7205:11:14",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2149,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2146,
												"mutability": "mutable",
												"name": "error",
												"nameLocation": "7230:5:14",
												"nodeType": "VariableDeclaration",
												"scope": 2191,
												"src": "7217:18:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_RecoverError_$1852",
													"typeString": "enum ECDSA.RecoverError"
												},
												"typeName": {
													"id": 2145,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2144,
														"name": "RecoverError",
														"nameLocations": [
															"7217:12:14"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1852,
														"src": "7217:12:14"
													},
													"referencedDeclaration": 1852,
													"src": "7217:12:14",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_RecoverError_$1852",
														"typeString": "enum ECDSA.RecoverError"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2148,
												"mutability": "mutable",
												"name": "errorArg",
												"nameLocation": "7245:8:14",
												"nodeType": "VariableDeclaration",
												"scope": 2191,
												"src": "7237:16:14",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2147,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "7237:7:14",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7216:38:14"
									},
									"returnParameters": {
										"id": 2150,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7268:0:14"
									},
									"scope": 2192,
									"src": "7196:532:14",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 2193,
							"src": "344:7386:14",
							"usedErrors": [
								1855,
								1860,
								1865
							],
							"usedEvents": []
						}
					],
					"src": "112:7619:14"
				},
				"id": 14
			},
			"@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/utils/cryptography/EIP712.sol",
					"exportedSymbols": {
						"EIP712": [
							2419
						],
						"IERC5267": [
							172
						],
						"MessageHashUtils": [
							2493
						],
						"ShortString": [
							1268
						],
						"ShortStrings": [
							1479
						]
					},
					"id": 2420,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2194,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:15"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol",
							"file": "./MessageHashUtils.sol",
							"id": 2196,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2420,
							"sourceUnit": 2494,
							"src": "139:56:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2195,
										"name": "MessageHashUtils",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2493,
										"src": "147:16:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/ShortStrings.sol",
							"file": "../ShortStrings.sol",
							"id": 2199,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2420,
							"sourceUnit": 1480,
							"src": "196:62:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2197,
										"name": "ShortStrings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1479,
										"src": "204:12:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 2198,
										"name": "ShortString",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1268,
										"src": "218:11:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/interfaces/IERC5267.sol",
							"file": "../../interfaces/IERC5267.sol",
							"id": 2201,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2420,
							"sourceUnit": 173,
							"src": "259:55:15",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2200,
										"name": "IERC5267",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 172,
										"src": "267:8:15",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 2203,
										"name": "IERC5267",
										"nameLocations": [
											"1988:8:15"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 172,
										"src": "1988:8:15"
									},
									"id": 2204,
									"nodeType": "InheritanceSpecifier",
									"src": "1988:8:15"
								}
							],
							"canonicalName": "EIP712",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 2202,
								"nodeType": "StructuredDocumentation",
								"src": "316:1643:15",
								"text": " @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\n encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\n does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\n produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\n This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n ({_hashTypedDataV4}).\n The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n the chain id to protect against replay attacks on an eventual fork of the chain.\n NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\n separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\n separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\n @custom:oz-upgrades-unsafe-allow state-variable-immutable"
							},
							"fullyImplemented": true,
							"id": 2419,
							"linearizedBaseContracts": [
								2419,
								172
							],
							"name": "EIP712",
							"nameLocation": "1978:6:15",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 2206,
									"libraryName": {
										"id": 2205,
										"name": "ShortStrings",
										"nameLocations": [
											"2009:12:15"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1479,
										"src": "2009:12:15"
									},
									"nodeType": "UsingForDirective",
									"src": "2003:25:15"
								},
								{
									"constant": true,
									"id": 2211,
									"mutability": "constant",
									"name": "TYPE_HASH",
									"nameLocation": "2059:9:15",
									"nodeType": "VariableDeclaration",
									"scope": 2419,
									"src": "2034:140:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2207,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2034:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"arguments": [
											{
												"hexValue": "454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429",
												"id": 2209,
												"isConstant": false,
												"isLValue": false,
												"isPure": true,
												"kind": "string",
												"lValueRequested": false,
												"nodeType": "Literal",
												"src": "2089:84:15",
												"typeDescriptions": {
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												},
												"value": "EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"
											}
										],
										"expression": {
											"argumentTypes": [
												{
													"typeIdentifier": "t_stringliteral_8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f",
													"typeString": "literal_string \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\""
												}
											],
											"id": 2208,
											"name": "keccak256",
											"nodeType": "Identifier",
											"overloadedDeclarations": [],
											"referencedDeclaration": 4294967288,
											"src": "2079:9:15",
											"typeDescriptions": {
												"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
												"typeString": "function (bytes memory) pure returns (bytes32)"
											}
										},
										"id": 2210,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "functionCall",
										"lValueRequested": false,
										"nameLocations": [],
										"names": [],
										"nodeType": "FunctionCall",
										"src": "2079:95:15",
										"tryCall": false,
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2213,
									"mutability": "immutable",
									"name": "_cachedDomainSeparator",
									"nameLocation": "2399:22:15",
									"nodeType": "VariableDeclaration",
									"scope": 2419,
									"src": "2373:48:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2212,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2373:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2215,
									"mutability": "immutable",
									"name": "_cachedChainId",
									"nameLocation": "2453:14:15",
									"nodeType": "VariableDeclaration",
									"scope": 2419,
									"src": "2427:40:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 2214,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "2427:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2217,
									"mutability": "immutable",
									"name": "_cachedThis",
									"nameLocation": "2499:11:15",
									"nodeType": "VariableDeclaration",
									"scope": 2419,
									"src": "2473:37:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 2216,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "2473:7:15",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2219,
									"mutability": "immutable",
									"name": "_hashedName",
									"nameLocation": "2543:11:15",
									"nodeType": "VariableDeclaration",
									"scope": 2419,
									"src": "2517:37:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2218,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2517:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2221,
									"mutability": "immutable",
									"name": "_hashedVersion",
									"nameLocation": "2586:14:15",
									"nodeType": "VariableDeclaration",
									"scope": 2419,
									"src": "2560:40:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 2220,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "2560:7:15",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2224,
									"mutability": "immutable",
									"name": "_name",
									"nameLocation": "2637:5:15",
									"nodeType": "VariableDeclaration",
									"scope": 2419,
									"src": "2607:35:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2223,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2222,
											"name": "ShortString",
											"nameLocations": [
												"2607:11:15"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1268,
											"src": "2607:11:15"
										},
										"referencedDeclaration": 1268,
										"src": "2607:11:15",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2227,
									"mutability": "immutable",
									"name": "_version",
									"nameLocation": "2678:8:15",
									"nodeType": "VariableDeclaration",
									"scope": 2419,
									"src": "2648:38:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
										"typeString": "ShortString"
									},
									"typeName": {
										"id": 2226,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 2225,
											"name": "ShortString",
											"nameLocations": [
												"2648:11:15"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 1268,
											"src": "2648:11:15"
										},
										"referencedDeclaration": 1268,
										"src": "2648:11:15",
										"typeDescriptions": {
											"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
											"typeString": "ShortString"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2229,
									"mutability": "mutable",
									"name": "_nameFallback",
									"nameLocation": "2707:13:15",
									"nodeType": "VariableDeclaration",
									"scope": 2419,
									"src": "2692:28:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2228,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2692:6:15",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 2231,
									"mutability": "mutable",
									"name": "_versionFallback",
									"nameLocation": "2741:16:15",
									"nodeType": "VariableDeclaration",
									"scope": 2419,
									"src": "2726:31:15",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 2230,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "2726:6:15",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 2288,
										"nodeType": "Block",
										"src": "3383:376:15",
										"statements": [
											{
												"expression": {
													"id": 2244,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2239,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2224,
														"src": "3393:5:15",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2242,
																"name": "_nameFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2229,
																"src": "3432:13:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2240,
																"name": "name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2234,
																"src": "3401:4:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2241,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3406:25:15",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1420,
															"src": "3401:30:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1268_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2243,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3401:45:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
															"typeString": "ShortString"
														}
													},
													"src": "3393:53:15",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
														"typeString": "ShortString"
													}
												},
												"id": 2245,
												"nodeType": "ExpressionStatement",
												"src": "3393:53:15"
											},
											{
												"expression": {
													"id": 2251,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2246,
														"name": "_version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2227,
														"src": "3456:8:15",
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
															"typeString": "ShortString"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2249,
																"name": "_versionFallback",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2231,
																"src": "3501:16:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_storage",
																	"typeString": "string storage ref"
																}
															],
															"expression": {
																"id": 2247,
																"name": "version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2236,
																"src": "3467:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															"id": 2248,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3475:25:15",
															"memberName": "toShortStringWithFallback",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1420,
															"src": "3467:33:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_storage_ptr_$returns$_t_userDefinedValueType$_ShortString_$1268_$attached_to$_t_string_memory_ptr_$",
																"typeString": "function (string memory,string storage pointer) returns (ShortString)"
															}
														},
														"id": 2250,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3467:51:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
															"typeString": "ShortString"
														}
													},
													"src": "3456:62:15",
													"typeDescriptions": {
														"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
														"typeString": "ShortString"
													}
												},
												"id": 2252,
												"nodeType": "ExpressionStatement",
												"src": "3456:62:15"
											},
											{
												"expression": {
													"id": 2260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2253,
														"name": "_hashedName",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2219,
														"src": "3528:11:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2257,
																		"name": "name",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2234,
																		"src": "3558:4:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2256,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3552:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2255,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3552:5:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 2258,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3552:11:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2254,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3542:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2259,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3542:22:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3528:36:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2261,
												"nodeType": "ExpressionStatement",
												"src": "3528:36:15"
											},
											{
												"expression": {
													"id": 2269,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2262,
														"name": "_hashedVersion",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2221,
														"src": "3574:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 2266,
																		"name": "version",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2236,
																		"src": "3607:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 2265,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3601:5:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2264,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3601:5:15",
																		"typeDescriptions": {}
																	}
																},
																"id": 2267,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3601:14:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 2263,
															"name": "keccak256",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967288,
															"src": "3591:9:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																"typeString": "function (bytes memory) pure returns (bytes32)"
															}
														},
														"id": 2268,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3591:25:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3574:42:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2270,
												"nodeType": "ExpressionStatement",
												"src": "3574:42:15"
											},
											{
												"expression": {
													"id": 2274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2271,
														"name": "_cachedChainId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2215,
														"src": "3627:14:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 2272,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3644:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 2273,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3650:7:15",
														"memberName": "chainid",
														"nodeType": "MemberAccess",
														"src": "3644:13:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3627:30:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 2275,
												"nodeType": "ExpressionStatement",
												"src": "3627:30:15"
											},
											{
												"expression": {
													"id": 2279,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2276,
														"name": "_cachedDomainSeparator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2213,
														"src": "3667:22:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 2277,
															"name": "_buildDomainSeparator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2336,
															"src": "3692:21:15",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																"typeString": "function () view returns (bytes32)"
															}
														},
														"id": 2278,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3692:23:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"src": "3667:48:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"id": 2280,
												"nodeType": "ExpressionStatement",
												"src": "3667:48:15"
											},
											{
												"expression": {
													"id": 2286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 2281,
														"name": "_cachedThis",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2217,
														"src": "3725:11:15",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 2284,
																"name": "this",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967268,
																"src": "3747:4:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_EIP712_$2419",
																	"typeString": "contract EIP712"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_EIP712_$2419",
																	"typeString": "contract EIP712"
																}
															],
															"id": 2283,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3739:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 2282,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3739:7:15",
																"typeDescriptions": {}
															}
														},
														"id": 2285,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3739:13:15",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3725:27:15",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 2287,
												"nodeType": "ExpressionStatement",
												"src": "3725:27:15"
											}
										]
									},
									"documentation": {
										"id": 2232,
										"nodeType": "StructuredDocumentation",
										"src": "2764:559:15",
										"text": " @dev Initializes the domain separator and parameter caches.\n The meaning of `name` and `version` is specified in\n https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n - `version`: the current major version of the signing domain.\n NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n contract upgrade]."
									},
									"id": 2289,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2234,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "3354:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2289,
												"src": "3340:18:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2233,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3340:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2236,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3374:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2289,
												"src": "3360:21:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2235,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3360:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3339:43:15"
									},
									"returnParameters": {
										"id": 2238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3383:0:15"
									},
									"scope": 2419,
									"src": "3328:431:15",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2314,
										"nodeType": "Block",
										"src": "3907:200:15",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 2300,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2297,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3929:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2419",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2419",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2296,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3921:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2295,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3921:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 2298,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3921:13:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2299,
															"name": "_cachedThis",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2217,
															"src": "3938:11:15",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "3921:28:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2304,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 2301,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "3953:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2302,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3959:7:15",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "3953:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"id": 2303,
															"name": "_cachedChainId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2215,
															"src": "3970:14:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3953:31:15",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3921:63:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 2312,
													"nodeType": "Block",
													"src": "4046:55:15",
													"statements": [
														{
															"expression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 2309,
																	"name": "_buildDomainSeparator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2336,
																	"src": "4067:21:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																		"typeString": "function () view returns (bytes32)"
																	}
																},
																"id": 2310,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4067:23:15",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2294,
															"id": 2311,
															"nodeType": "Return",
															"src": "4060:30:15"
														}
													]
												},
												"id": 2313,
												"nodeType": "IfStatement",
												"src": "3917:184:15",
												"trueBody": {
													"id": 2308,
													"nodeType": "Block",
													"src": "3986:54:15",
													"statements": [
														{
															"expression": {
																"id": 2306,
																"name": "_cachedDomainSeparator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2213,
																"src": "4007:22:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes32",
																	"typeString": "bytes32"
																}
															},
															"functionReturnParameters": 2294,
															"id": 2307,
															"nodeType": "Return",
															"src": "4000:29:15"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 2290,
										"nodeType": "StructuredDocumentation",
										"src": "3765:75:15",
										"text": " @dev Returns the domain separator for the current chain."
									},
									"id": 2315,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_domainSeparatorV4",
									"nameLocation": "3854:18:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2291,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3872:2:15"
									},
									"returnParameters": {
										"id": 2294,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2293,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2315,
												"src": "3898:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2292,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3898:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3897:9:15"
									},
									"scope": 2419,
									"src": "3845:262:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2335,
										"nodeType": "Block",
										"src": "4177:115:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 2323,
																	"name": "TYPE_HASH",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2211,
																	"src": "4215:9:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2324,
																	"name": "_hashedName",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2219,
																	"src": "4226:11:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"id": 2325,
																	"name": "_hashedVersion",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2221,
																	"src": "4239:14:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	}
																},
																{
																	"expression": {
																		"id": 2326,
																		"name": "block",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967292,
																		"src": "4255:5:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_block",
																			"typeString": "block"
																		}
																	},
																	"id": 2327,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "4261:7:15",
																	"memberName": "chainid",
																	"nodeType": "MemberAccess",
																	"src": "4255:13:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"arguments": [
																		{
																			"id": 2330,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4278:4:15",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_EIP712_$2419",
																				"typeString": "contract EIP712"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_EIP712_$2419",
																				"typeString": "contract EIP712"
																			}
																		],
																		"id": 2329,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4270:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 2328,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4270:7:15",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2331,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4270:13:15",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_bytes32",
																		"typeString": "bytes32"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 2321,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "4204:3:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2322,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "4208:6:15",
																"memberName": "encode",
																"nodeType": "MemberAccess",
																"src": "4204:10:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4204:80:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2320,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "4194:9:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2333,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4194:91:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2319,
												"id": 2334,
												"nodeType": "Return",
												"src": "4187:98:15"
											}
										]
									},
									"id": 2336,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_buildDomainSeparator",
									"nameLocation": "4122:21:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2316,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4143:2:15"
									},
									"returnParameters": {
										"id": 2319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2318,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2336,
												"src": "4168:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2317,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4168:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4167:9:15"
									},
									"scope": 2419,
									"src": "4113:179:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 2351,
										"nodeType": "Block",
										"src": "5003:90:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2346,
																"name": "_domainSeparatorV4",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2315,
																"src": "5053:18:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bytes32_$",
																	"typeString": "function () view returns (bytes32)"
																}
															},
															"id": 2347,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5053:20:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"id": 2348,
															"name": "structHash",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2339,
															"src": "5075:10:15",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															},
															{
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														],
														"expression": {
															"id": 2344,
															"name": "MessageHashUtils",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2493,
															"src": "5020:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_MessageHashUtils_$2493_$",
																"typeString": "type(library MessageHashUtils)"
															}
														},
														"id": 2345,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5037:15:15",
														"memberName": "toTypedDataHash",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 2492,
														"src": "5020:32:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_bytes32_$returns$_t_bytes32_$",
															"typeString": "function (bytes32,bytes32) pure returns (bytes32)"
														}
													},
													"id": 2349,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5020:66:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2343,
												"id": 2350,
												"nodeType": "Return",
												"src": "5013:73:15"
											}
										]
									},
									"documentation": {
										"id": 2337,
										"nodeType": "StructuredDocumentation",
										"src": "4298:614:15",
										"text": " @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n function returns the hash of the fully encoded EIP712 message for this domain.\n This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n ```solidity\n bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     keccak256(\"Mail(address to,string contents)\"),\n     mailTo,\n     keccak256(bytes(mailContents))\n )));\n address signer = ECDSA.recover(digest, signature);\n ```"
									},
									"id": 2352,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_hashTypedDataV4",
									"nameLocation": "4926:16:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2339,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "4951:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2352,
												"src": "4943:18:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2338,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4943:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4942:20:15"
									},
									"returnParameters": {
										"id": 2343,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2342,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2352,
												"src": "4994:7:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2341,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "4994:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4993:9:15"
									},
									"scope": 2419,
									"src": "4917:176:15",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										171
									],
									"body": {
										"id": 2393,
										"nodeType": "Block",
										"src": "5472:229:15",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"hexValue": "0f",
															"id": 2371,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "hexString",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5503:7:15",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c",
																"typeString": "literal_string hex\"0f\""
															},
															"value": "\u000f"
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2372,
																"name": "_EIP712Name",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2406,
																"src": "5533:11:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2373,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5533:13:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 2374,
																"name": "_EIP712Version",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2418,
																"src": "5560:14:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
																	"typeString": "function () view returns (string memory)"
																}
															},
															"id": 2375,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5560:16:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"expression": {
																"id": 2376,
																"name": "block",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967292,
																"src": "5590:5:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_block",
																	"typeString": "block"
																}
															},
															"id": 2377,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "5596:7:15",
															"memberName": "chainid",
															"nodeType": "MemberAccess",
															"src": "5590:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"id": 2380,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "5625:4:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_EIP712_$2419",
																		"typeString": "contract EIP712"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_EIP712_$2419",
																		"typeString": "contract EIP712"
																	}
																],
																"id": 2379,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5617:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 2378,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "5617:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 2381,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5617:13:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2384,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5652:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2383,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "5644:7:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_bytes32_$",
																	"typeString": "type(bytes32)"
																},
																"typeName": {
																	"id": 2382,
																	"name": "bytes32",
																	"nodeType": "ElementaryTypeName",
																	"src": "5644:7:15",
																	"typeDescriptions": {}
																}
															},
															"id": 2385,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5644:10:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 2389,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5682:1:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 2388,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "5668:13:15",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_uint256_$dyn_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (uint256[] memory)"
																},
																"typeName": {
																	"baseType": {
																		"id": 2386,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "5672:7:15",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2387,
																	"nodeType": "ArrayTypeName",
																	"src": "5672:9:15",
																	"typeDescriptions": {
																		"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
																		"typeString": "uint256[]"
																	}
																}
															},
															"id": 2390,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5668:16:15",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
																"typeString": "uint256[] memory"
															}
														}
													],
													"id": 2391,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "5489:205:15",
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_stringliteral_3d725c5ee53025f027da36bea8d3af3b6a3e9d2d1542d47c162631de48e66c1c_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_uint256_$_t_address_$_t_bytes32_$_t_array$_t_uint256_$dyn_memory_ptr_$",
														"typeString": "tuple(literal_string hex\"0f\",string memory,string memory,uint256,address,bytes32,uint256[] memory)"
													}
												},
												"functionReturnParameters": 2370,
												"id": 2392,
												"nodeType": "Return",
												"src": "5482:212:15"
											}
										]
									},
									"documentation": {
										"id": 2353,
										"nodeType": "StructuredDocumentation",
										"src": "5099:40:15",
										"text": " @dev See {IERC-5267}."
									},
									"functionSelector": "84b0196e",
									"id": 2394,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "eip712Domain",
									"nameLocation": "5153:12:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2354,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5165:2:15"
									},
									"returnParameters": {
										"id": 2370,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2356,
												"mutability": "mutable",
												"name": "fields",
												"nameLocation": "5249:6:15",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "5242:13:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes1",
													"typeString": "bytes1"
												},
												"typeName": {
													"id": 2355,
													"name": "bytes1",
													"nodeType": "ElementaryTypeName",
													"src": "5242:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2358,
												"mutability": "mutable",
												"name": "name",
												"nameLocation": "5283:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "5269:18:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2357,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5269:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2360,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "5315:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "5301:21:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2359,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5301:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2362,
												"mutability": "mutable",
												"name": "chainId",
												"nameLocation": "5344:7:15",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "5336:15:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2361,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5336:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2364,
												"mutability": "mutable",
												"name": "verifyingContract",
												"nameLocation": "5373:17:15",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "5365:25:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5365:7:15",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2366,
												"mutability": "mutable",
												"name": "salt",
												"nameLocation": "5412:4:15",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "5404:12:15",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2365,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "5404:7:15",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2369,
												"mutability": "mutable",
												"name": "extensions",
												"nameLocation": "5447:10:15",
												"nodeType": "VariableDeclaration",
												"scope": 2394,
												"src": "5430:27:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 2367,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5430:7:15",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2368,
													"nodeType": "ArrayTypeName",
													"src": "5430:9:15",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5228:239:15"
									},
									"scope": 2419,
									"src": "5144:557:15",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 2405,
										"nodeType": "Block",
										"src": "6082:65:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2402,
															"name": "_nameFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2229,
															"src": "6126:13:15",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2400,
															"name": "_name",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2224,
															"src": "6099:5:15",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																"typeString": "ShortString"
															}
														},
														"id": 2401,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6105:20:15",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1447,
														"src": "6099:26:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1268_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1268_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2403,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6099:41:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2399,
												"id": 2404,
												"nodeType": "Return",
												"src": "6092:48:15"
											}
										]
									},
									"documentation": {
										"id": 2395,
										"nodeType": "StructuredDocumentation",
										"src": "5707:256:15",
										"text": " @dev The name parameter for the EIP712 domain.\n NOTE: By default this function reads _name which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2406,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Name",
									"nameLocation": "6030:11:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2396,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6041:2:15"
									},
									"returnParameters": {
										"id": 2399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2398,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2406,
												"src": "6067:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2397,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6067:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6066:15:15"
									},
									"scope": 2419,
									"src": "6021:126:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2417,
										"nodeType": "Block",
										"src": "6537:71:15",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 2414,
															"name": "_versionFallback",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2231,
															"src": "6584:16:15",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														],
														"expression": {
															"id": 2412,
															"name": "_version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2227,
															"src": "6554:8:15",
															"typeDescriptions": {
																"typeIdentifier": "t_userDefinedValueType$_ShortString_$1268",
																"typeString": "ShortString"
															}
														},
														"id": 2413,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6563:20:15",
														"memberName": "toStringWithFallback",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 1447,
														"src": "6554:29:15",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_userDefinedValueType$_ShortString_$1268_$_t_string_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_userDefinedValueType$_ShortString_$1268_$",
															"typeString": "function (ShortString,string storage pointer) pure returns (string memory)"
														}
													},
													"id": 2415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6554:47:15",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 2411,
												"id": 2416,
												"nodeType": "Return",
												"src": "6547:54:15"
											}
										]
									},
									"documentation": {
										"id": 2407,
										"nodeType": "StructuredDocumentation",
										"src": "6153:262:15",
										"text": " @dev The version parameter for the EIP712 domain.\n NOTE: By default this function reads _version which is an immutable value.\n It only reads from storage if necessary (in case the value is too large to fit in a ShortString)."
									},
									"id": 2418,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_EIP712Version",
									"nameLocation": "6482:14:15",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2408,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6496:2:15"
									},
									"returnParameters": {
										"id": 2411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2410,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2418,
												"src": "6522:13:15",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 2409,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6522:6:15",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6521:15:15"
									},
									"scope": 2419,
									"src": "6473:135:15",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2420,
							"src": "1960:4650:15",
							"usedErrors": [
								1276,
								1278
							],
							"usedEvents": [
								152
							]
						}
					],
					"src": "113:6498:15"
				},
				"id": 15
			},
			"@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/utils/cryptography/MessageHashUtils.sol",
					"exportedSymbols": {
						"MessageHashUtils": [
							2493
						],
						"Strings": [
							1844
						]
					},
					"id": 2494,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2421,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "123:24:16"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/utils/Strings.sol",
							"file": "../Strings.sol",
							"id": 2423,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 2494,
							"sourceUnit": 1845,
							"src": "149:39:16",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2422,
										"name": "Strings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1844,
										"src": "157:7:16",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "MessageHashUtils",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2424,
								"nodeType": "StructuredDocumentation",
								"src": "190:330:16",
								"text": " @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."
							},
							"fullyImplemented": true,
							"id": 2493,
							"linearizedBaseContracts": [
								2493
							],
							"name": "MessageHashUtils",
							"nameLocation": "529:16:16",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2433,
										"nodeType": "Block",
										"src": "1314:368:16",
										"statements": [
											{
												"AST": {
													"nativeSrc": "1376:300:16",
													"nodeType": "YulBlock",
													"src": "1376:300:16",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1397:4:16",
																		"nodeType": "YulLiteral",
																		"src": "1397:4:16",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a3332",
																		"kind": "string",
																		"nativeSrc": "1403:34:16",
																		"nodeType": "YulLiteral",
																		"src": "1403:34:16",
																		"type": "",
																		"value": "\u0019Ethereum Signed Message:\n32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1390:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "1390:6:16"
																},
																"nativeSrc": "1390:48:16",
																"nodeType": "YulFunctionCall",
																"src": "1390:48:16"
															},
															"nativeSrc": "1390:48:16",
															"nodeType": "YulExpressionStatement",
															"src": "1390:48:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1499:4:16",
																		"nodeType": "YulLiteral",
																		"src": "1499:4:16",
																		"type": "",
																		"value": "0x1c"
																	},
																	{
																		"name": "messageHash",
																		"nativeSrc": "1505:11:16",
																		"nodeType": "YulIdentifier",
																		"src": "1505:11:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "1492:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "1492:6:16"
																},
																"nativeSrc": "1492:25:16",
																"nodeType": "YulFunctionCall",
																"src": "1492:25:16"
															},
															"nativeSrc": "1492:25:16",
															"nodeType": "YulExpressionStatement",
															"src": "1492:25:16"
														},
														{
															"nativeSrc": "1571:31:16",
															"nodeType": "YulAssignment",
															"src": "1571:31:16",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "1591:4:16",
																		"nodeType": "YulLiteral",
																		"src": "1591:4:16",
																		"type": "",
																		"value": "0x00"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "1597:4:16",
																		"nodeType": "YulLiteral",
																		"src": "1597:4:16",
																		"type": "",
																		"value": "0x3c"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "1581:9:16",
																	"nodeType": "YulIdentifier",
																	"src": "1581:9:16"
																},
																"nativeSrc": "1581:21:16",
																"nodeType": "YulFunctionCall",
																"src": "1581:21:16"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "1571:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "1571:6:16"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 2430,
														"isOffset": false,
														"isSlot": false,
														"src": "1571:6:16",
														"valueSize": 1
													},
													{
														"declaration": 2427,
														"isOffset": false,
														"isSlot": false,
														"src": "1505:11:16",
														"valueSize": 1
													}
												],
												"id": 2432,
												"nodeType": "InlineAssembly",
												"src": "1367:309:16"
											}
										]
									},
									"documentation": {
										"id": 2425,
										"nodeType": "StructuredDocumentation",
										"src": "552:665:16",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."
									},
									"id": 2434,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "1231:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2428,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2427,
												"mutability": "mutable",
												"name": "messageHash",
												"nameLocation": "1262:11:16",
												"nodeType": "VariableDeclaration",
												"scope": 2434,
												"src": "1254:19:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2426,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1254:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1253:21:16"
									},
									"returnParameters": {
										"id": 2431,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2430,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "1306:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2434,
												"src": "1298:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2429,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "1298:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1297:16:16"
									},
									"scope": 2493,
									"src": "1222:460:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2459,
										"nodeType": "Block",
										"src": "2234:143:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "19457468657265756d205369676e6564204d6573736167653a0a",
																	"id": 2446,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2286:32:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	"value": "\u0019Ethereum Signed Message:\n"
																},
																{
																	"arguments": [
																		{
																			"arguments": [
																				{
																					"expression": {
																						"id": 2451,
																						"name": "message",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2437,
																						"src": "2343:7:16",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes_memory_ptr",
																							"typeString": "bytes memory"
																						}
																					},
																					"id": 2452,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberLocation": "2351:6:16",
																					"memberName": "length",
																					"nodeType": "MemberAccess",
																					"src": "2343:14:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"expression": {
																					"id": 2449,
																					"name": "Strings",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1844,
																					"src": "2326:7:16",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_contract$_Strings_$1844_$",
																						"typeString": "type(library Strings)"
																					}
																				},
																				"id": 2450,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "2334:8:16",
																				"memberName": "toString",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 1657,
																				"src": "2326:16:16",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																					"typeString": "function (uint256) pure returns (string memory)"
																				}
																			},
																			"id": 2453,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "2326:32:16",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 2448,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2320:5:16",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 2447,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "2320:5:16",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 2454,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2320:39:16",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"id": 2455,
																	"name": "message",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2437,
																	"src": "2361:7:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4",
																		"typeString": "literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2444,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2273:5:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 2443,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2273:5:16",
																		"typeDescriptions": {}
																	}
																},
																"id": 2445,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "2279:6:16",
																"memberName": "concat",
																"nodeType": "MemberAccess",
																"src": "2273:12:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2456,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2273:96:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2442,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2263:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2457,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2263:107:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2441,
												"id": 2458,
												"nodeType": "Return",
												"src": "2244:126:16"
											}
										]
									},
									"documentation": {
										"id": 2435,
										"nodeType": "StructuredDocumentation",
										"src": "1688:455:16",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."
									},
									"id": 2460,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toEthSignedMessageHash",
									"nameLocation": "2157:22:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2437,
												"mutability": "mutable",
												"name": "message",
												"nameLocation": "2193:7:16",
												"nodeType": "VariableDeclaration",
												"scope": 2460,
												"src": "2180:20:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2436,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2180:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2179:22:16"
									},
									"returnParameters": {
										"id": 2441,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2440,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2460,
												"src": "2225:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2439,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2225:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2224:9:16"
									},
									"scope": 2493,
									"src": "2148:229:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2479,
										"nodeType": "Block",
										"src": "2831:80:16",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "1900",
																	"id": 2473,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "hexString",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2875:10:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	"value": "\u0019\u0000"
																},
																{
																	"id": 2474,
																	"name": "validator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2463,
																	"src": "2887:9:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 2475,
																	"name": "data",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2465,
																	"src": "2898:4:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a",
																		"typeString": "literal_string hex\"1900\""
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"expression": {
																	"id": 2471,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2858:3:16",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 2472,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "2862:12:16",
																"memberName": "encodePacked",
																"nodeType": "MemberAccess",
																"src": "2858:16:16",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 2476,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2858:45:16",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 2470,
														"name": "keccak256",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967288,
														"src": "2848:9:16",
														"typeDescriptions": {
															"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
															"typeString": "function (bytes memory) pure returns (bytes32)"
														}
													},
													"id": 2477,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2848:56:16",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"functionReturnParameters": 2469,
												"id": 2478,
												"nodeType": "Return",
												"src": "2841:63:16"
											}
										]
									},
									"documentation": {
										"id": 2461,
										"nodeType": "StructuredDocumentation",
										"src": "2383:332:16",
										"text": " @dev Returns the keccak256 digest of an EIP-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."
									},
									"id": 2480,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toDataWithIntendedValidatorHash",
									"nameLocation": "2729:31:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2466,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2463,
												"mutability": "mutable",
												"name": "validator",
												"nameLocation": "2769:9:16",
												"nodeType": "VariableDeclaration",
												"scope": 2480,
												"src": "2761:17:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 2462,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:16",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2465,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2793:4:16",
												"nodeType": "VariableDeclaration",
												"scope": 2480,
												"src": "2780:17:16",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 2464,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2780:5:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2760:38:16"
									},
									"returnParameters": {
										"id": 2469,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2468,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2480,
												"src": "2822:7:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2467,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "2822:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2821:9:16"
									},
									"scope": 2493,
									"src": "2720:191:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2491,
										"nodeType": "Block",
										"src": "3462:292:16",
										"statements": [
											{
												"AST": {
													"nativeSrc": "3524:224:16",
													"nodeType": "YulBlock",
													"src": "3524:224:16",
													"statements": [
														{
															"nativeSrc": "3538:22:16",
															"nodeType": "YulVariableDeclaration",
															"src": "3538:22:16",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nativeSrc": "3555:4:16",
																		"nodeType": "YulLiteral",
																		"src": "3555:4:16",
																		"type": "",
																		"value": "0x40"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nativeSrc": "3549:5:16",
																	"nodeType": "YulIdentifier",
																	"src": "3549:5:16"
																},
																"nativeSrc": "3549:11:16",
																"nodeType": "YulFunctionCall",
																"src": "3549:11:16"
															},
															"variables": [
																{
																	"name": "ptr",
																	"nativeSrc": "3542:3:16",
																	"nodeType": "YulTypedName",
																	"src": "3542:3:16",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3580:3:16",
																		"nodeType": "YulIdentifier",
																		"src": "3580:3:16"
																	},
																	{
																		"hexValue": "1901",
																		"kind": "string",
																		"nativeSrc": "3585:10:16",
																		"nodeType": "YulLiteral",
																		"src": "3585:10:16",
																		"type": "",
																		"value": "\u0019\u0001"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3573:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "3573:6:16"
																},
																"nativeSrc": "3573:23:16",
																"nodeType": "YulFunctionCall",
																"src": "3573:23:16"
															},
															"nativeSrc": "3573:23:16",
															"nodeType": "YulExpressionStatement",
															"src": "3573:23:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3620:3:16",
																				"nodeType": "YulIdentifier",
																				"src": "3620:3:16"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3625:4:16",
																				"nodeType": "YulLiteral",
																				"src": "3625:4:16",
																				"type": "",
																				"value": "0x02"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3616:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "3616:3:16"
																		},
																		"nativeSrc": "3616:14:16",
																		"nodeType": "YulFunctionCall",
																		"src": "3616:14:16"
																	},
																	{
																		"name": "domainSeparator",
																		"nativeSrc": "3632:15:16",
																		"nodeType": "YulIdentifier",
																		"src": "3632:15:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3609:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "3609:6:16"
																},
																"nativeSrc": "3609:39:16",
																"nodeType": "YulFunctionCall",
																"src": "3609:39:16"
															},
															"nativeSrc": "3609:39:16",
															"nodeType": "YulExpressionStatement",
															"src": "3609:39:16"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "ptr",
																				"nativeSrc": "3672:3:16",
																				"nodeType": "YulIdentifier",
																				"src": "3672:3:16"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "3677:4:16",
																				"nodeType": "YulLiteral",
																				"src": "3677:4:16",
																				"type": "",
																				"value": "0x22"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "3668:3:16",
																			"nodeType": "YulIdentifier",
																			"src": "3668:3:16"
																		},
																		"nativeSrc": "3668:14:16",
																		"nodeType": "YulFunctionCall",
																		"src": "3668:14:16"
																	},
																	{
																		"name": "structHash",
																		"nativeSrc": "3684:10:16",
																		"nodeType": "YulIdentifier",
																		"src": "3684:10:16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nativeSrc": "3661:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "3661:6:16"
																},
																"nativeSrc": "3661:34:16",
																"nodeType": "YulFunctionCall",
																"src": "3661:34:16"
															},
															"nativeSrc": "3661:34:16",
															"nodeType": "YulExpressionStatement",
															"src": "3661:34:16"
														},
														{
															"nativeSrc": "3708:30:16",
															"nodeType": "YulAssignment",
															"src": "3708:30:16",
															"value": {
																"arguments": [
																	{
																		"name": "ptr",
																		"nativeSrc": "3728:3:16",
																		"nodeType": "YulIdentifier",
																		"src": "3728:3:16"
																	},
																	{
																		"kind": "number",
																		"nativeSrc": "3733:4:16",
																		"nodeType": "YulLiteral",
																		"src": "3733:4:16",
																		"type": "",
																		"value": "0x42"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nativeSrc": "3718:9:16",
																	"nodeType": "YulIdentifier",
																	"src": "3718:9:16"
																},
																"nativeSrc": "3718:20:16",
																"nodeType": "YulFunctionCall",
																"src": "3718:20:16"
															},
															"variableNames": [
																{
																	"name": "digest",
																	"nativeSrc": "3708:6:16",
																	"nodeType": "YulIdentifier",
																	"src": "3708:6:16"
																}
															]
														}
													]
												},
												"documentation": "@solidity memory-safe-assembly",
												"evmVersion": "cancun",
												"externalReferences": [
													{
														"declaration": 2488,
														"isOffset": false,
														"isSlot": false,
														"src": "3708:6:16",
														"valueSize": 1
													},
													{
														"declaration": 2483,
														"isOffset": false,
														"isSlot": false,
														"src": "3632:15:16",
														"valueSize": 1
													},
													{
														"declaration": 2485,
														"isOffset": false,
														"isSlot": false,
														"src": "3684:10:16",
														"valueSize": 1
													}
												],
												"id": 2490,
												"nodeType": "InlineAssembly",
												"src": "3515:233:16"
											}
										]
									},
									"documentation": {
										"id": 2481,
										"nodeType": "StructuredDocumentation",
										"src": "2917:431:16",
										"text": " @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."
									},
									"id": 2492,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toTypedDataHash",
									"nameLocation": "3362:15:16",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2483,
												"mutability": "mutable",
												"name": "domainSeparator",
												"nameLocation": "3386:15:16",
												"nodeType": "VariableDeclaration",
												"scope": 2492,
												"src": "3378:23:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2482,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3378:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2485,
												"mutability": "mutable",
												"name": "structHash",
												"nameLocation": "3411:10:16",
												"nodeType": "VariableDeclaration",
												"scope": 2492,
												"src": "3403:18:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2484,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3403:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3377:45:16"
									},
									"returnParameters": {
										"id": 2489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2488,
												"mutability": "mutable",
												"name": "digest",
												"nameLocation": "3454:6:16",
												"nodeType": "VariableDeclaration",
												"scope": 2492,
												"src": "3446:14:16",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 2487,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "3446:7:16",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3445:16:16"
									},
									"scope": 2493,
									"src": "3353:401:16",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2494,
							"src": "521:3235:16",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "123:3634:16"
				},
				"id": 16
			},
			"@openzeppelin/contracts@5.0.2/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							3547
						]
					},
					"id": 3548,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2495,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "103:24:17"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2496,
								"nodeType": "StructuredDocumentation",
								"src": "129:73:17",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3547,
							"linearizedBaseContracts": [
								3547
							],
							"name": "Math",
							"nameLocation": "211:4:17",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 2497,
										"nodeType": "StructuredDocumentation",
										"src": "222:50:17",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 2499,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "283:20:17",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 2498,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "303:2:17"
									},
									"src": "277:29:17"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 2504,
									"members": [
										{
											"id": 2500,
											"name": "Floor",
											"nameLocation": "336:5:17",
											"nodeType": "EnumValue",
											"src": "336:5:17"
										},
										{
											"id": 2501,
											"name": "Ceil",
											"nameLocation": "379:4:17",
											"nodeType": "EnumValue",
											"src": "379:4:17"
										},
										{
											"id": 2502,
											"name": "Trunc",
											"nameLocation": "421:5:17",
											"nodeType": "EnumValue",
											"src": "421:5:17"
										},
										{
											"id": 2503,
											"name": "Expand",
											"nameLocation": "451:6:17",
											"nodeType": "EnumValue",
											"src": "451:6:17"
										}
									],
									"name": "Rounding",
									"nameLocation": "317:8:17",
									"nodeType": "EnumDefinition",
									"src": "312:169:17"
								},
								{
									"body": {
										"id": 2535,
										"nodeType": "Block",
										"src": "661:140:17",
										"statements": [
											{
												"id": 2534,
												"nodeType": "UncheckedBlock",
												"src": "671:124:17",
												"statements": [
													{
														"assignments": [
															2517
														],
														"declarations": [
															{
																"constant": false,
																"id": 2517,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "703:1:17",
																"nodeType": "VariableDeclaration",
																"scope": 2534,
																"src": "695:9:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2516,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "695:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2521,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2520,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2518,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2507,
																"src": "707:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 2519,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2509,
																"src": "711:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "707:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "695:17:17"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2524,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2522,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2517,
																"src": "730:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 2523,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2507,
																"src": "734:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "730:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2529,
														"nodeType": "IfStatement",
														"src": "726:28:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2525,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "745:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2526,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "752:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2527,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "744:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2515,
															"id": 2528,
															"nodeType": "Return",
															"src": "737:17:17"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2530,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "776:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2531,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2517,
																	"src": "782:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2532,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "775:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2515,
														"id": 2533,
														"nodeType": "Return",
														"src": "768:16:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2505,
										"nodeType": "StructuredDocumentation",
										"src": "487:93:17",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 2536,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "594:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2507,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "609:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2536,
												"src": "601:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "601:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2509,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "620:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2536,
												"src": "612:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2508,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "612:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "600:22:17"
									},
									"returnParameters": {
										"id": 2515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2512,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2536,
												"src": "646:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2511,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "646:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2514,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2536,
												"src": "652:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2513,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "652:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "645:15:17"
									},
									"scope": 3547,
									"src": "585:216:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2563,
										"nodeType": "Block",
										"src": "984:113:17",
										"statements": [
											{
												"id": 2562,
												"nodeType": "UncheckedBlock",
												"src": "994:97:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2550,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2548,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2541,
																"src": "1022:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 2549,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2539,
																"src": "1026:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1022:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2555,
														"nodeType": "IfStatement",
														"src": "1018:28:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2551,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1037:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2552,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1044:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2553,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1036:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2547,
															"id": 2554,
															"nodeType": "Return",
															"src": "1029:17:17"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2556,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1068:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2559,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2557,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2539,
																		"src": "1074:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 2558,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2541,
																		"src": "1078:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1074:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2560,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1067:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2547,
														"id": 2561,
														"nodeType": "Return",
														"src": "1060:20:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2537,
										"nodeType": "StructuredDocumentation",
										"src": "807:96:17",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 2564,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "917:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2542,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2539,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "932:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2564,
												"src": "924:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2538,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "924:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2541,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "943:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2564,
												"src": "935:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2540,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "935:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "923:22:17"
									},
									"returnParameters": {
										"id": 2547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2544,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2564,
												"src": "969:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2543,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "969:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2546,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2564,
												"src": "975:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2545,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "975:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "968:15:17"
									},
									"scope": 3547,
									"src": "908:189:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2605,
										"nodeType": "Block",
										"src": "1283:417:17",
										"statements": [
											{
												"id": 2604,
												"nodeType": "UncheckedBlock",
												"src": "1293:401:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2578,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2576,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2567,
																"src": "1551:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2577,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1556:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1551:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2583,
														"nodeType": "IfStatement",
														"src": "1547:28:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 2579,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1567:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 2580,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1573:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2581,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1566:9:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2575,
															"id": 2582,
															"nodeType": "Return",
															"src": "1559:16:17"
														}
													},
													{
														"assignments": [
															2585
														],
														"declarations": [
															{
																"constant": false,
																"id": 2585,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1597:1:17",
																"nodeType": "VariableDeclaration",
																"scope": 2604,
																"src": "1589:9:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2584,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1589:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2589,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2588,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2586,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2567,
																"src": "1601:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2587,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2569,
																"src": "1605:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1601:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1589:17:17"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2594,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2592,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2590,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2585,
																	"src": "1624:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2591,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2567,
																	"src": "1628:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1624:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2593,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2569,
																"src": "1633:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1624:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2599,
														"nodeType": "IfStatement",
														"src": "1620:33:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2595,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1644:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1651:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2597,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1643:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2575,
															"id": 2598,
															"nodeType": "Return",
															"src": "1636:17:17"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2600,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1675:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2601,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2585,
																	"src": "1681:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2602,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1674:9:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2575,
														"id": 2603,
														"nodeType": "Return",
														"src": "1667:16:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2565,
										"nodeType": "StructuredDocumentation",
										"src": "1103:99:17",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2606,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1216:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2570,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2567,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1231:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "1223:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2566,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1223:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2569,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1242:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "1234:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2568,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1234:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1222:22:17"
									},
									"returnParameters": {
										"id": 2575,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2572,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "1268:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2571,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1268:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2574,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2606,
												"src": "1274:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2573,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:15:17"
									},
									"scope": 3547,
									"src": "1207:493:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2633,
										"nodeType": "Block",
										"src": "1887:114:17",
										"statements": [
											{
												"id": 2632,
												"nodeType": "UncheckedBlock",
												"src": "1897:98:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2618,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2611,
																"src": "1925:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2619,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1930:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1925:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2625,
														"nodeType": "IfStatement",
														"src": "1921:29:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2621,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1941:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2622,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1948:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2623,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1940:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2617,
															"id": 2624,
															"nodeType": "Return",
															"src": "1933:17:17"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2626,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1972:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2629,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2627,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2609,
																		"src": "1978:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2628,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2611,
																		"src": "1982:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1978:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2630,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1971:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2617,
														"id": 2631,
														"nodeType": "Return",
														"src": "1964:20:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2607,
										"nodeType": "StructuredDocumentation",
										"src": "1706:100:17",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2634,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1820:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2612,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2609,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1835:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "1827:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2608,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1827:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2611,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1846:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "1838:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2610,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1838:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1826:22:17"
									},
									"returnParameters": {
										"id": 2617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2614,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "1872:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2613,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1872:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2616,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2634,
												"src": "1878:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2615,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1878:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1871:15:17"
									},
									"scope": 3547,
									"src": "1811:190:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2661,
										"nodeType": "Block",
										"src": "2198:114:17",
										"statements": [
											{
												"id": 2660,
												"nodeType": "UncheckedBlock",
												"src": "2208:98:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2648,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2646,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2639,
																"src": "2236:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2647,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2241:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2236:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2653,
														"nodeType": "IfStatement",
														"src": "2232:29:17",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2649,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2252:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2650,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2259:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2651,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2251:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2645,
															"id": 2652,
															"nodeType": "Return",
															"src": "2244:17:17"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2654,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2283:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2657,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2655,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2637,
																		"src": "2289:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2656,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2639,
																		"src": "2293:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2289:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2658,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2282:13:17",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2645,
														"id": 2659,
														"nodeType": "Return",
														"src": "2275:20:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2635,
										"nodeType": "StructuredDocumentation",
										"src": "2007:110:17",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2662,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2131:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2637,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2146:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2662,
												"src": "2138:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2138:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2639,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2157:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2662,
												"src": "2149:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2149:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2137:22:17"
									},
									"returnParameters": {
										"id": 2645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2642,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2662,
												"src": "2183:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2641,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2183:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2644,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2662,
												"src": "2189:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2643,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2189:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2182:15:17"
									},
									"scope": 3547,
									"src": "2122:190:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2679,
										"nodeType": "Block",
										"src": "2449:37:17",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2674,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2672,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2665,
															"src": "2466:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2673,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2667,
															"src": "2470:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2466:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2676,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2667,
														"src": "2478:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2466:13:17",
													"trueExpression": {
														"id": 2675,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2665,
														"src": "2474:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2671,
												"id": 2678,
												"nodeType": "Return",
												"src": "2459:20:17"
											}
										]
									},
									"documentation": {
										"id": 2663,
										"nodeType": "StructuredDocumentation",
										"src": "2318:59:17",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2680,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2391:3:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2668,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2665,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2403:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2680,
												"src": "2395:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2664,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2395:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2667,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2414:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2680,
												"src": "2406:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2666,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2406:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2394:22:17"
									},
									"returnParameters": {
										"id": 2671,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2670,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2680,
												"src": "2440:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2669,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2440:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2439:9:17"
									},
									"scope": 3547,
									"src": "2382:104:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2697,
										"nodeType": "Block",
										"src": "2624:37:17",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2692,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2690,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2683,
															"src": "2641:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2691,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2685,
															"src": "2645:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2641:5:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2694,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2685,
														"src": "2653:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2695,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2641:13:17",
													"trueExpression": {
														"id": 2693,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2683,
														"src": "2649:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2689,
												"id": 2696,
												"nodeType": "Return",
												"src": "2634:20:17"
											}
										]
									},
									"documentation": {
										"id": 2681,
										"nodeType": "StructuredDocumentation",
										"src": "2492:60:17",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2698,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2566:3:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2683,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2578:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2698,
												"src": "2570:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2682,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2570:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2685,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2589:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2698,
												"src": "2581:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2684,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2581:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2569:22:17"
									},
									"returnParameters": {
										"id": 2689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2688,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2698,
												"src": "2615:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2687,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2615:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2614:9:17"
									},
									"scope": 3547,
									"src": "2557:104:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2720,
										"nodeType": "Block",
										"src": "2845:82:17",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2718,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2710,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2708,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2701,
																	"src": "2900:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2709,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2703,
																	"src": "2904:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2900:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2711,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2899:7:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2717,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2714,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2712,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2701,
																		"src": "2910:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2713,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2703,
																		"src": "2914:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2910:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2715,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2909:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2716,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2919:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "2909:11:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2899:21:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2707,
												"id": 2719,
												"nodeType": "Return",
												"src": "2892:28:17"
											}
										]
									},
									"documentation": {
										"id": 2699,
										"nodeType": "StructuredDocumentation",
										"src": "2667:102:17",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2721,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2783:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2704,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2701,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2799:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2721,
												"src": "2791:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2700,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2791:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2703,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2810:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2721,
												"src": "2802:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2702,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2802:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2790:22:17"
									},
									"returnParameters": {
										"id": 2707,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2706,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2721,
												"src": "2836:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2705,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2836:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2835:9:17"
									},
									"scope": 3547,
									"src": "2774:153:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2754,
										"nodeType": "Block",
										"src": "3219:260:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2731,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2726,
														"src": "3233:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2732,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3238:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3233:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2739,
												"nodeType": "IfStatement",
												"src": "3229:127:17",
												"trueBody": {
													"id": 2738,
													"nodeType": "Block",
													"src": "3241:115:17",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2736,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2734,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2724,
																	"src": "3340:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2735,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2726,
																	"src": "3344:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3340:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2730,
															"id": 2737,
															"nodeType": "Return",
															"src": "3333:12:17"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2742,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2740,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2724,
															"src": "3444:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2741,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3449:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3444:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2751,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2749,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2746,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2744,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2724,
																			"src": "3458:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2745,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3462:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3458:5:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2747,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3457:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2748,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2726,
																"src": "3467:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3457:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2750,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3471:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3457:15:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2752,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3444:28:17",
													"trueExpression": {
														"hexValue": "30",
														"id": 2743,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3453:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2730,
												"id": 2753,
												"nodeType": "Return",
												"src": "3437:35:17"
											}
										]
									},
									"documentation": {
										"id": 2722,
										"nodeType": "StructuredDocumentation",
										"src": "2933:210:17",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2755,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3157:7:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2727,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2724,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3173:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "3165:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2723,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3165:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2726,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3184:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "3176:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2725,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3176:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3164:22:17"
									},
									"returnParameters": {
										"id": 2730,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2729,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2755,
												"src": "3210:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2728,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3210:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3209:9:17"
									},
									"scope": 3547,
									"src": "3148:331:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2880,
										"nodeType": "Block",
										"src": "3901:4018:17",
										"statements": [
											{
												"id": 2879,
												"nodeType": "UncheckedBlock",
												"src": "3911:4002:17",
												"statements": [
													{
														"assignments": [
															2768
														],
														"declarations": [
															{
																"constant": false,
																"id": 2768,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4240:5:17",
																"nodeType": "VariableDeclaration",
																"scope": 2879,
																"src": "4232:13:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2767,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4232:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2772,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2771,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2769,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2758,
																"src": "4248:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2770,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2760,
																"src": "4252:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4248:5:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4232:21:17"
													},
													{
														"assignments": [
															2774
														],
														"declarations": [
															{
																"constant": false,
																"id": 2774,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4320:5:17",
																"nodeType": "VariableDeclaration",
																"scope": 2879,
																"src": "4312:13:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2773,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4312:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2775,
														"nodeType": "VariableDeclarationStatement",
														"src": "4312:13:17"
													},
													{
														"AST": {
															"nativeSrc": "4392:122:17",
															"nodeType": "YulBlock",
															"src": "4392:122:17",
															"statements": [
																{
																	"nativeSrc": "4410:30:17",
																	"nodeType": "YulVariableDeclaration",
																	"src": "4410:30:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "4427:1:17",
																				"nodeType": "YulIdentifier",
																				"src": "4427:1:17"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "4430:1:17",
																				"nodeType": "YulIdentifier",
																				"src": "4430:1:17"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nativeSrc": "4437:1:17",
																						"nodeType": "YulLiteral",
																						"src": "4437:1:17",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nativeSrc": "4433:3:17",
																					"nodeType": "YulIdentifier",
																					"src": "4433:3:17"
																				},
																				"nativeSrc": "4433:6:17",
																				"nodeType": "YulFunctionCall",
																				"src": "4433:6:17"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "4420:6:17",
																			"nodeType": "YulIdentifier",
																			"src": "4420:6:17"
																		},
																		"nativeSrc": "4420:20:17",
																		"nodeType": "YulFunctionCall",
																		"src": "4420:20:17"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nativeSrc": "4414:2:17",
																			"nodeType": "YulTypedName",
																			"src": "4414:2:17",
																			"type": ""
																		}
																	]
																},
																{
																	"nativeSrc": "4457:43:17",
																	"nodeType": "YulAssignment",
																	"src": "4457:43:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4474:2:17",
																						"nodeType": "YulIdentifier",
																						"src": "4474:2:17"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4478:5:17",
																						"nodeType": "YulIdentifier",
																						"src": "4478:5:17"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nativeSrc": "4470:3:17",
																					"nodeType": "YulIdentifier",
																					"src": "4470:3:17"
																				},
																				"nativeSrc": "4470:14:17",
																				"nodeType": "YulFunctionCall",
																				"src": "4470:14:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nativeSrc": "4489:2:17",
																						"nodeType": "YulIdentifier",
																						"src": "4489:2:17"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "4493:5:17",
																						"nodeType": "YulIdentifier",
																						"src": "4493:5:17"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nativeSrc": "4486:2:17",
																					"nodeType": "YulIdentifier",
																					"src": "4486:2:17"
																				},
																				"nativeSrc": "4486:13:17",
																				"nodeType": "YulFunctionCall",
																				"src": "4486:13:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "4466:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "4466:3:17"
																		},
																		"nativeSrc": "4466:34:17",
																		"nodeType": "YulFunctionCall",
																		"src": "4466:34:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "4457:5:17",
																			"nodeType": "YulIdentifier",
																			"src": "4457:5:17"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2768,
																"isOffset": false,
																"isSlot": false,
																"src": "4478:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2768,
																"isOffset": false,
																"isSlot": false,
																"src": "4493:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2774,
																"isOffset": false,
																"isSlot": false,
																"src": "4457:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2758,
																"isOffset": false,
																"isSlot": false,
																"src": "4427:1:17",
																"valueSize": 1
															},
															{
																"declaration": 2760,
																"isOffset": false,
																"isSlot": false,
																"src": "4430:1:17",
																"valueSize": 1
															}
														],
														"id": 2776,
														"nodeType": "InlineAssembly",
														"src": "4383:131:17"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2779,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2777,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2774,
																"src": "4595:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2778,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4604:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4595:10:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2785,
														"nodeType": "IfStatement",
														"src": "4591:368:17",
														"trueBody": {
															"id": 2784,
															"nodeType": "Block",
															"src": "4607:352:17",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2782,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2780,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2768,
																			"src": "4925:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2781,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2762,
																			"src": "4933:11:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4925:19:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2766,
																	"id": 2783,
																	"nodeType": "Return",
																	"src": "4918:26:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2788,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2786,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2762,
																"src": "5065:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2787,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2774,
																"src": "5080:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5065:20:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2793,
														"nodeType": "IfStatement",
														"src": "5061:88:17",
														"trueBody": {
															"id": 2792,
															"nodeType": "Block",
															"src": "5087:62:17",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2789,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2499,
																			"src": "5112:20:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$_t_error_$",
																				"typeString": "function () pure returns (error)"
																			}
																		},
																		"id": 2790,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5112:22:17",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_error",
																			"typeString": "error"
																		}
																	},
																	"id": 2791,
																	"nodeType": "RevertStatement",
																	"src": "5105:29:17"
																}
															]
														}
													},
													{
														"assignments": [
															2795
														],
														"declarations": [
															{
																"constant": false,
																"id": 2795,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5412:9:17",
																"nodeType": "VariableDeclaration",
																"scope": 2879,
																"src": "5404:17:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2794,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5404:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2796,
														"nodeType": "VariableDeclarationStatement",
														"src": "5404:17:17"
													},
													{
														"AST": {
															"nativeSrc": "5444:291:17",
															"nodeType": "YulBlock",
															"src": "5444:291:17",
															"statements": [
																{
																	"nativeSrc": "5513:38:17",
																	"nodeType": "YulAssignment",
																	"src": "5513:38:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nativeSrc": "5533:1:17",
																				"nodeType": "YulIdentifier",
																				"src": "5533:1:17"
																			},
																			{
																				"name": "y",
																				"nativeSrc": "5536:1:17",
																				"nodeType": "YulIdentifier",
																				"src": "5536:1:17"
																			},
																			{
																				"name": "denominator",
																				"nativeSrc": "5539:11:17",
																				"nodeType": "YulIdentifier",
																				"src": "5539:11:17"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nativeSrc": "5526:6:17",
																			"nodeType": "YulIdentifier",
																			"src": "5526:6:17"
																		},
																		"nativeSrc": "5526:25:17",
																		"nodeType": "YulFunctionCall",
																		"src": "5526:25:17"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nativeSrc": "5513:9:17",
																			"nodeType": "YulIdentifier",
																			"src": "5513:9:17"
																		}
																	]
																},
																{
																	"nativeSrc": "5633:41:17",
																	"nodeType": "YulAssignment",
																	"src": "5633:41:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nativeSrc": "5646:5:17",
																				"nodeType": "YulIdentifier",
																				"src": "5646:5:17"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nativeSrc": "5656:9:17",
																						"nodeType": "YulIdentifier",
																						"src": "5656:9:17"
																					},
																					{
																						"name": "prod0",
																						"nativeSrc": "5667:5:17",
																						"nodeType": "YulIdentifier",
																						"src": "5667:5:17"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nativeSrc": "5653:2:17",
																					"nodeType": "YulIdentifier",
																					"src": "5653:2:17"
																				},
																				"nativeSrc": "5653:20:17",
																				"nodeType": "YulFunctionCall",
																				"src": "5653:20:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5642:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "5642:3:17"
																		},
																		"nativeSrc": "5642:32:17",
																		"nodeType": "YulFunctionCall",
																		"src": "5642:32:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nativeSrc": "5633:5:17",
																			"nodeType": "YulIdentifier",
																			"src": "5633:5:17"
																		}
																	]
																},
																{
																	"nativeSrc": "5691:30:17",
																	"nodeType": "YulAssignment",
																	"src": "5691:30:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "5704:5:17",
																				"nodeType": "YulIdentifier",
																				"src": "5704:5:17"
																			},
																			{
																				"name": "remainder",
																				"nativeSrc": "5711:9:17",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:17"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nativeSrc": "5700:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "5700:3:17"
																		},
																		"nativeSrc": "5700:21:17",
																		"nodeType": "YulFunctionCall",
																		"src": "5700:21:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "5691:5:17",
																			"nodeType": "YulIdentifier",
																			"src": "5691:5:17"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2762,
																"isOffset": false,
																"isSlot": false,
																"src": "5539:11:17",
																"valueSize": 1
															},
															{
																"declaration": 2768,
																"isOffset": false,
																"isSlot": false,
																"src": "5667:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2768,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2768,
																"isOffset": false,
																"isSlot": false,
																"src": "5704:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2774,
																"isOffset": false,
																"isSlot": false,
																"src": "5633:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2774,
																"isOffset": false,
																"isSlot": false,
																"src": "5646:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2795,
																"isOffset": false,
																"isSlot": false,
																"src": "5513:9:17",
																"valueSize": 1
															},
															{
																"declaration": 2795,
																"isOffset": false,
																"isSlot": false,
																"src": "5656:9:17",
																"valueSize": 1
															},
															{
																"declaration": 2795,
																"isOffset": false,
																"isSlot": false,
																"src": "5711:9:17",
																"valueSize": 1
															},
															{
																"declaration": 2758,
																"isOffset": false,
																"isSlot": false,
																"src": "5533:1:17",
																"valueSize": 1
															},
															{
																"declaration": 2760,
																"isOffset": false,
																"isSlot": false,
																"src": "5536:1:17",
																"valueSize": 1
															}
														],
														"id": 2797,
														"nodeType": "InlineAssembly",
														"src": "5435:300:17"
													},
													{
														"assignments": [
															2799
														],
														"declarations": [
															{
																"constant": false,
																"id": 2799,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "5947:4:17",
																"nodeType": "VariableDeclaration",
																"scope": 2879,
																"src": "5939:12:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2798,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5939:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2806,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2805,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2800,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2762,
																"src": "5954:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2803,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2801,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "5969:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2802,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2762,
																			"src": "5973:11:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5969:15:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2804,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "5968:17:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5954:31:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "5939:46:17"
													},
													{
														"AST": {
															"nativeSrc": "6008:362:17",
															"nodeType": "YulBlock",
															"src": "6008:362:17",
															"statements": [
																{
																	"nativeSrc": "6073:37:17",
																	"nodeType": "YulAssignment",
																	"src": "6073:37:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nativeSrc": "6092:11:17",
																				"nodeType": "YulIdentifier",
																				"src": "6092:11:17"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6105:4:17",
																				"nodeType": "YulIdentifier",
																				"src": "6105:4:17"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6088:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "6088:3:17"
																		},
																		"nativeSrc": "6088:22:17",
																		"nodeType": "YulFunctionCall",
																		"src": "6088:22:17"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nativeSrc": "6073:11:17",
																			"nodeType": "YulIdentifier",
																			"src": "6073:11:17"
																		}
																	]
																},
																{
																	"nativeSrc": "6177:25:17",
																	"nodeType": "YulAssignment",
																	"src": "6177:25:17",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nativeSrc": "6190:5:17",
																				"nodeType": "YulIdentifier",
																				"src": "6190:5:17"
																			},
																			{
																				"name": "twos",
																				"nativeSrc": "6197:4:17",
																				"nodeType": "YulIdentifier",
																				"src": "6197:4:17"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nativeSrc": "6186:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "6186:3:17"
																		},
																		"nativeSrc": "6186:16:17",
																		"nodeType": "YulFunctionCall",
																		"src": "6186:16:17"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nativeSrc": "6177:5:17",
																			"nodeType": "YulIdentifier",
																			"src": "6177:5:17"
																		}
																	]
																},
																{
																	"nativeSrc": "6317:39:17",
																	"nodeType": "YulAssignment",
																	"src": "6317:39:17",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nativeSrc": "6337:1:17",
																								"nodeType": "YulLiteral",
																								"src": "6337:1:17",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nativeSrc": "6340:4:17",
																								"nodeType": "YulIdentifier",
																								"src": "6340:4:17"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nativeSrc": "6333:3:17",
																							"nodeType": "YulIdentifier",
																							"src": "6333:3:17"
																						},
																						"nativeSrc": "6333:12:17",
																						"nodeType": "YulFunctionCall",
																						"src": "6333:12:17"
																					},
																					{
																						"name": "twos",
																						"nativeSrc": "6347:4:17",
																						"nodeType": "YulIdentifier",
																						"src": "6347:4:17"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nativeSrc": "6329:3:17",
																					"nodeType": "YulIdentifier",
																					"src": "6329:3:17"
																				},
																				"nativeSrc": "6329:23:17",
																				"nodeType": "YulFunctionCall",
																				"src": "6329:23:17"
																			},
																			{
																				"kind": "number",
																				"nativeSrc": "6354:1:17",
																				"nodeType": "YulLiteral",
																				"src": "6354:1:17",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nativeSrc": "6325:3:17",
																			"nodeType": "YulIdentifier",
																			"src": "6325:3:17"
																		},
																		"nativeSrc": "6325:31:17",
																		"nodeType": "YulFunctionCall",
																		"src": "6325:31:17"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nativeSrc": "6317:4:17",
																			"nodeType": "YulIdentifier",
																			"src": "6317:4:17"
																		}
																	]
																}
															]
														},
														"evmVersion": "cancun",
														"externalReferences": [
															{
																"declaration": 2762,
																"isOffset": false,
																"isSlot": false,
																"src": "6073:11:17",
																"valueSize": 1
															},
															{
																"declaration": 2762,
																"isOffset": false,
																"isSlot": false,
																"src": "6092:11:17",
																"valueSize": 1
															},
															{
																"declaration": 2768,
																"isOffset": false,
																"isSlot": false,
																"src": "6177:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2768,
																"isOffset": false,
																"isSlot": false,
																"src": "6190:5:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "6105:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "6197:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "6317:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "6340:4:17",
																"valueSize": 1
															},
															{
																"declaration": 2799,
																"isOffset": false,
																"isSlot": false,
																"src": "6347:4:17",
																"valueSize": 1
															}
														],
														"id": 2807,
														"nodeType": "InlineAssembly",
														"src": "5999:371:17"
													},
													{
														"expression": {
															"id": 2812,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2808,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2768,
																"src": "6436:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2811,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2809,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2774,
																	"src": "6445:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2810,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2799,
																	"src": "6453:4:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6445:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6436:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2813,
														"nodeType": "ExpressionStatement",
														"src": "6436:21:17"
													},
													{
														"assignments": [
															2815
														],
														"declarations": [
															{
																"constant": false,
																"id": 2815,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6783:7:17",
																"nodeType": "VariableDeclaration",
																"scope": 2879,
																"src": "6775:15:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2814,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6775:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2822,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2821,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2818,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2816,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6794:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2817,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2762,
																			"src": "6798:11:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6794:15:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2819,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6793:17:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2820,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6813:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6793:21:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6775:39:17"
													},
													{
														"expression": {
															"id": 2829,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2823,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2815,
																"src": "7031:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2828,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2824,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7042:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2827,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2825,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2762,
																		"src": "7046:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2826,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2815,
																		"src": "7060:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7046:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7042:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7031:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2830,
														"nodeType": "ExpressionStatement",
														"src": "7031:36:17"
													},
													{
														"expression": {
															"id": 2837,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2831,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2815,
																"src": "7100:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2836,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2832,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7111:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2835,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2833,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2762,
																		"src": "7115:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2834,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2815,
																		"src": "7129:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7115:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7111:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7100:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2838,
														"nodeType": "ExpressionStatement",
														"src": "7100:36:17"
													},
													{
														"expression": {
															"id": 2845,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2839,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2815,
																"src": "7170:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2844,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2840,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7181:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2843,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2841,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2762,
																		"src": "7185:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2842,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2815,
																		"src": "7199:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7185:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7181:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7170:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2846,
														"nodeType": "ExpressionStatement",
														"src": "7170:36:17"
													},
													{
														"expression": {
															"id": 2853,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2847,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2815,
																"src": "7240:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2852,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2848,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7251:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2851,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2849,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2762,
																		"src": "7255:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2850,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2815,
																		"src": "7269:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7255:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7251:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7240:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2854,
														"nodeType": "ExpressionStatement",
														"src": "7240:36:17"
													},
													{
														"expression": {
															"id": 2861,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2855,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2815,
																"src": "7310:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2860,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2856,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7321:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2859,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2857,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2762,
																		"src": "7325:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2858,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2815,
																		"src": "7339:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7325:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7321:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7310:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2862,
														"nodeType": "ExpressionStatement",
														"src": "7310:36:17"
													},
													{
														"expression": {
															"id": 2869,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2863,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2815,
																"src": "7381:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2868,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2864,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7392:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2867,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2865,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2762,
																		"src": "7396:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2866,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2815,
																		"src": "7410:7:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7396:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7392:25:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7381:36:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2870,
														"nodeType": "ExpressionStatement",
														"src": "7381:36:17"
													},
													{
														"expression": {
															"id": 2875,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2871,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2765,
																"src": "7851:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2874,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2872,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2768,
																	"src": "7860:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2873,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2815,
																	"src": "7868:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7860:15:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7851:24:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2876,
														"nodeType": "ExpressionStatement",
														"src": "7851:24:17"
													},
													{
														"expression": {
															"id": 2877,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2765,
															"src": "7896:6:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2766,
														"id": 2878,
														"nodeType": "Return",
														"src": "7889:13:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2756,
										"nodeType": "StructuredDocumentation",
										"src": "3485:313:17",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 2881,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3812:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2763,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2758,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3827:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2881,
												"src": "3819:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2757,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3819:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2760,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3838:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2881,
												"src": "3830:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2759,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3830:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2762,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3849:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 2881,
												"src": "3841:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2761,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3841:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3818:43:17"
									},
									"returnParameters": {
										"id": 2766,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2765,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "3893:6:17",
												"nodeType": "VariableDeclaration",
												"scope": 2881,
												"src": "3885:14:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2764,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3885:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3884:16:17"
									},
									"scope": 3547,
									"src": "3803:4116:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2923,
										"nodeType": "Block",
										"src": "8161:192:17",
										"statements": [
											{
												"assignments": [
													2897
												],
												"declarations": [
													{
														"constant": false,
														"id": 2897,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8179:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 2923,
														"src": "8171:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2896,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8171:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2903,
												"initialValue": {
													"arguments": [
														{
															"id": 2899,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2884,
															"src": "8195:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2900,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2886,
															"src": "8198:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2901,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2888,
															"src": "8201:11:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2898,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2881,
															2924
														],
														"referencedDeclaration": 2881,
														"src": "8188:6:17",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2902,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8188:25:17",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8171:42:17"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2914,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2905,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2891,
																"src": "8244:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$2504",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$2504",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 2904,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3546,
															"src": "8227:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2504_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 2906,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8227:26:17",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2913,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2908,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2884,
																	"src": "8264:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2909,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2886,
																	"src": "8267:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2910,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2888,
																	"src": "8270:11:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2907,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8257:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2911,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8257:25:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2912,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8285:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8257:29:17",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8227:59:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2920,
												"nodeType": "IfStatement",
												"src": "8223:101:17",
												"trueBody": {
													"id": 2919,
													"nodeType": "Block",
													"src": "8288:36:17",
													"statements": [
														{
															"expression": {
																"id": 2917,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2915,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2897,
																	"src": "8302:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2916,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8312:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8302:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2918,
															"nodeType": "ExpressionStatement",
															"src": "8302:11:17"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2921,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2897,
													"src": "8340:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2895,
												"id": 2922,
												"nodeType": "Return",
												"src": "8333:13:17"
											}
										]
									},
									"documentation": {
										"id": 2882,
										"nodeType": "StructuredDocumentation",
										"src": "7925:121:17",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2924,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8060:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2884,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8075:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2924,
												"src": "8067:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2883,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8067:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2886,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8086:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 2924,
												"src": "8078:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2885,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8078:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2888,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8097:11:17",
												"nodeType": "VariableDeclaration",
												"scope": 2924,
												"src": "8089:19:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2887,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8089:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2891,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8119:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 2924,
												"src": "8110:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2504",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2890,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2889,
														"name": "Rounding",
														"nameLocations": [
															"8110:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2504,
														"src": "8110:8:17"
													},
													"referencedDeclaration": 2504,
													"src": "8110:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2504",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8066:62:17"
									},
									"returnParameters": {
										"id": 2895,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2894,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2924,
												"src": "8152:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2893,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8152:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8151:9:17"
									},
									"scope": 3547,
									"src": "8051:302:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3035,
										"nodeType": "Block",
										"src": "8644:1585:17",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2932,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2927,
														"src": "8658:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2933,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8663:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8658:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2938,
												"nodeType": "IfStatement",
												"src": "8654:45:17",
												"trueBody": {
													"id": 2937,
													"nodeType": "Block",
													"src": "8666:33:17",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2935,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8687:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2931,
															"id": 2936,
															"nodeType": "Return",
															"src": "8680:8:17"
														}
													]
												}
											},
											{
												"assignments": [
													2940
												],
												"declarations": [
													{
														"constant": false,
														"id": 2940,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9386:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3035,
														"src": "9378:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2939,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9378:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2949,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2948,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2941,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9395:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2946,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2943,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2927,
																			"src": "9406:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2942,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			3203,
																			3238
																		],
																		"referencedDeclaration": 3203,
																		"src": "9401:4:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2944,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9401:7:17",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2945,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9412:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9401:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2947,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9400:14:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9395:19:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9378:36:17"
											},
											{
												"id": 3034,
												"nodeType": "UncheckedBlock",
												"src": "9815:408:17",
												"statements": [
													{
														"expression": {
															"id": 2959,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2950,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2940,
																"src": "9839:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2958,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2955,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2951,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2940,
																				"src": "9849:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2954,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2952,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2927,
																					"src": "9858:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2953,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2940,
																					"src": "9862:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9858:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9849:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2956,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9848:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2957,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9873:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9848:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9839:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2960,
														"nodeType": "ExpressionStatement",
														"src": "9839:35:17"
													},
													{
														"expression": {
															"id": 2970,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2961,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2940,
																"src": "9888:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2969,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2966,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2962,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2940,
																				"src": "9898:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2965,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2963,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2927,
																					"src": "9907:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2964,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2940,
																					"src": "9911:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9907:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9898:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2967,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9897:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2968,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9922:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9897:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9888:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2971,
														"nodeType": "ExpressionStatement",
														"src": "9888:35:17"
													},
													{
														"expression": {
															"id": 2981,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2972,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2940,
																"src": "9937:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2980,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2977,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2973,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2940,
																				"src": "9947:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2976,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2974,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2927,
																					"src": "9956:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2975,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2940,
																					"src": "9960:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "9956:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9947:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2978,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9946:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2979,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9971:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9946:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9937:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2982,
														"nodeType": "ExpressionStatement",
														"src": "9937:35:17"
													},
													{
														"expression": {
															"id": 2992,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2983,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2940,
																"src": "9986:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2991,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2988,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2984,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2940,
																				"src": "9996:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2987,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2985,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2927,
																					"src": "10005:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2986,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2940,
																					"src": "10009:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10005:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "9996:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2989,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "9995:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2990,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10020:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9995:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9986:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2993,
														"nodeType": "ExpressionStatement",
														"src": "9986:35:17"
													},
													{
														"expression": {
															"id": 3003,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2994,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2940,
																"src": "10035:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3002,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2999,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2995,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2940,
																				"src": "10045:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2998,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2996,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2927,
																					"src": "10054:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2997,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2940,
																					"src": "10058:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10054:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10045:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3000,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10044:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3001,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10069:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10044:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10035:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3004,
														"nodeType": "ExpressionStatement",
														"src": "10035:35:17"
													},
													{
														"expression": {
															"id": 3014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3005,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2940,
																"src": "10084:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3013,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3010,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3006,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2940,
																				"src": "10094:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3009,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3007,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2927,
																					"src": "10103:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3008,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2940,
																					"src": "10107:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10103:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10094:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3011,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10093:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3012,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10118:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10093:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10084:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3015,
														"nodeType": "ExpressionStatement",
														"src": "10084:35:17"
													},
													{
														"expression": {
															"id": 3025,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 3016,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2940,
																"src": "10133:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3024,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3021,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3017,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2940,
																				"src": "10143:6:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3020,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 3018,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2927,
																					"src": "10152:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 3019,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2940,
																					"src": "10156:6:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10152:10:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10143:19:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 3022,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10142:21:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3023,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10167:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10142:26:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10133:35:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 3026,
														"nodeType": "ExpressionStatement",
														"src": "10133:35:17"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 3028,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2940,
																	"src": "10193:6:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 3031,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 3029,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2927,
																		"src": "10201:1:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 3030,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2940,
																		"src": "10205:6:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10201:10:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3027,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2698,
																"src": "10189:3:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 3032,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10189:23:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2931,
														"id": 3033,
														"nodeType": "Return",
														"src": "10182:30:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2925,
										"nodeType": "StructuredDocumentation",
										"src": "8359:223:17",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 3036,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8596:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2927,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8609:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3036,
												"src": "8601:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8601:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8600:11:17"
									},
									"returnParameters": {
										"id": 2931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2930,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3036,
												"src": "8635:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2929,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8635:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8634:9:17"
									},
									"scope": 3547,
									"src": "8587:1642:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3070,
										"nodeType": "Block",
										"src": "10405:164:17",
										"statements": [
											{
												"id": 3069,
												"nodeType": "UncheckedBlock",
												"src": "10415:148:17",
												"statements": [
													{
														"assignments": [
															3048
														],
														"declarations": [
															{
																"constant": false,
																"id": 3048,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10447:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3069,
																"src": "10439:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3047,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10439:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3052,
														"initialValue": {
															"arguments": [
																{
																	"id": 3050,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3039,
																	"src": "10461:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3049,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3036,
																	3071
																],
																"referencedDeclaration": 3036,
																"src": "10456:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3051,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10456:7:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10439:24:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3067,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3053,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3048,
																"src": "10484:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3062,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3055,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3042,
																						"src": "10511:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2504",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2504",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3054,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3546,
																					"src": "10494:16:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2504_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3056,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10494:26:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3061,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3059,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 3057,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3048,
																						"src": "10524:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 3058,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3048,
																						"src": "10533:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10524:15:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3060,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3039,
																					"src": "10542:1:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10524:19:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10494:49:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3064,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10550:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3065,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10494:57:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3063,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10546:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3066,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10493:59:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10484:68:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3046,
														"id": 3068,
														"nodeType": "Return",
														"src": "10477:75:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3037,
										"nodeType": "StructuredDocumentation",
										"src": "10235:89:17",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 3071,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10338:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3043,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3039,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10351:1:17",
												"nodeType": "VariableDeclaration",
												"scope": 3071,
												"src": "10343:9:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3038,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10343:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3042,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10363:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3071,
												"src": "10354:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2504",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3041,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3040,
														"name": "Rounding",
														"nameLocations": [
															"10354:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2504,
														"src": "10354:8:17"
													},
													"referencedDeclaration": 2504,
													"src": "10354:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2504",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10342:30:17"
									},
									"returnParameters": {
										"id": 3046,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3045,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3071,
												"src": "10396:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3044,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10396:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10395:9:17"
									},
									"scope": 3547,
									"src": "10329:240:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3202,
										"nodeType": "Block",
										"src": "10760:922:17",
										"statements": [
											{
												"assignments": [
													3080
												],
												"declarations": [
													{
														"constant": false,
														"id": 3080,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "10778:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3202,
														"src": "10770:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3079,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10770:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3082,
												"initialValue": {
													"hexValue": "30",
													"id": 3081,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "10787:1:17",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10770:18:17"
											},
											{
												"id": 3199,
												"nodeType": "UncheckedBlock",
												"src": "10798:855:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3087,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3085,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3083,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3074,
																	"src": "10826:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3084,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10835:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "10826:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3086,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10841:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10826:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3097,
														"nodeType": "IfStatement",
														"src": "10822:99:17",
														"trueBody": {
															"id": 3096,
															"nodeType": "Block",
															"src": "10844:77:17",
															"statements": [
																{
																	"expression": {
																		"id": 3090,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3088,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3074,
																			"src": "10862:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3089,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10872:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10862:13:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3091,
																	"nodeType": "ExpressionStatement",
																	"src": "10862:13:17"
																},
																{
																	"expression": {
																		"id": 3094,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3092,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3080,
																			"src": "10893:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3093,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10903:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "10893:13:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3095,
																	"nodeType": "ExpressionStatement",
																	"src": "10893:13:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3102,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3100,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3098,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3074,
																	"src": "10938:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3099,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10947:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "10938:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3101,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10952:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "10938:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3112,
														"nodeType": "IfStatement",
														"src": "10934:96:17",
														"trueBody": {
															"id": 3111,
															"nodeType": "Block",
															"src": "10955:75:17",
															"statements": [
																{
																	"expression": {
																		"id": 3105,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3103,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3074,
																			"src": "10973:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3104,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10983:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "10973:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3106,
																	"nodeType": "ExpressionStatement",
																	"src": "10973:12:17"
																},
																{
																	"expression": {
																		"id": 3109,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3107,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3080,
																			"src": "11003:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3108,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11013:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11003:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3110,
																	"nodeType": "ExpressionStatement",
																	"src": "11003:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3117,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3115,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3113,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3074,
																	"src": "11047:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3114,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11056:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11047:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3116,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11061:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11047:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3127,
														"nodeType": "IfStatement",
														"src": "11043:96:17",
														"trueBody": {
															"id": 3126,
															"nodeType": "Block",
															"src": "11064:75:17",
															"statements": [
																{
																	"expression": {
																		"id": 3120,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3118,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3074,
																			"src": "11082:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3119,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11092:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11082:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3121,
																	"nodeType": "ExpressionStatement",
																	"src": "11082:12:17"
																},
																{
																	"expression": {
																		"id": 3124,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3122,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3080,
																			"src": "11112:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3123,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11122:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11112:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3125,
																	"nodeType": "ExpressionStatement",
																	"src": "11112:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3132,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3130,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3128,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3074,
																	"src": "11156:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3129,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11165:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11156:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3131,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11170:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11156:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3142,
														"nodeType": "IfStatement",
														"src": "11152:96:17",
														"trueBody": {
															"id": 3141,
															"nodeType": "Block",
															"src": "11173:75:17",
															"statements": [
																{
																	"expression": {
																		"id": 3135,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3133,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3074,
																			"src": "11191:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3134,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11201:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11191:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3136,
																	"nodeType": "ExpressionStatement",
																	"src": "11191:12:17"
																},
																{
																	"expression": {
																		"id": 3139,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3137,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3080,
																			"src": "11221:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3138,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11231:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11221:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3140,
																	"nodeType": "ExpressionStatement",
																	"src": "11221:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3147,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3145,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3143,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3074,
																	"src": "11265:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3144,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11274:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11265:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3146,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11278:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11265:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3157,
														"nodeType": "IfStatement",
														"src": "11261:93:17",
														"trueBody": {
															"id": 3156,
															"nodeType": "Block",
															"src": "11281:73:17",
															"statements": [
																{
																	"expression": {
																		"id": 3150,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3148,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3074,
																			"src": "11299:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3149,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11309:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11299:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3151,
																	"nodeType": "ExpressionStatement",
																	"src": "11299:11:17"
																},
																{
																	"expression": {
																		"id": 3154,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3152,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3080,
																			"src": "11328:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3153,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11338:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11328:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3155,
																	"nodeType": "ExpressionStatement",
																	"src": "11328:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3162,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3160,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3158,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3074,
																	"src": "11371:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3159,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11380:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11371:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3161,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11384:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11371:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3172,
														"nodeType": "IfStatement",
														"src": "11367:93:17",
														"trueBody": {
															"id": 3171,
															"nodeType": "Block",
															"src": "11387:73:17",
															"statements": [
																{
																	"expression": {
																		"id": 3165,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3163,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3074,
																			"src": "11405:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3164,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11415:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11405:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3166,
																	"nodeType": "ExpressionStatement",
																	"src": "11405:11:17"
																},
																{
																	"expression": {
																		"id": 3169,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3167,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3080,
																			"src": "11434:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3168,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11444:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11434:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3170,
																	"nodeType": "ExpressionStatement",
																	"src": "11434:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3177,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3175,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3173,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3074,
																	"src": "11477:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3174,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11486:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11477:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3176,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11490:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11477:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3187,
														"nodeType": "IfStatement",
														"src": "11473:93:17",
														"trueBody": {
															"id": 3186,
															"nodeType": "Block",
															"src": "11493:73:17",
															"statements": [
																{
																	"expression": {
																		"id": 3180,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3178,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3074,
																			"src": "11511:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3179,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11521:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11511:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3181,
																	"nodeType": "ExpressionStatement",
																	"src": "11511:11:17"
																},
																{
																	"expression": {
																		"id": 3184,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3182,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3080,
																			"src": "11540:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3183,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11550:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11540:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3185,
																	"nodeType": "ExpressionStatement",
																	"src": "11540:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3192,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3190,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3188,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3074,
																	"src": "11583:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3189,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11592:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11583:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3191,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11596:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11583:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3198,
														"nodeType": "IfStatement",
														"src": "11579:64:17",
														"trueBody": {
															"id": 3197,
															"nodeType": "Block",
															"src": "11599:44:17",
															"statements": [
																{
																	"expression": {
																		"id": 3195,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3193,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3080,
																			"src": "11617:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3194,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11627:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11617:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3196,
																	"nodeType": "ExpressionStatement",
																	"src": "11617:11:17"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3200,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3080,
													"src": "11669:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3078,
												"id": 3201,
												"nodeType": "Return",
												"src": "11662:13:17"
											}
										]
									},
									"documentation": {
										"id": 3072,
										"nodeType": "StructuredDocumentation",
										"src": "10575:119:17",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3203,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10708:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3074,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10721:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3203,
												"src": "10713:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3073,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10713:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10712:15:17"
									},
									"returnParameters": {
										"id": 3078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3077,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3203,
												"src": "10751:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3076,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10751:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10750:9:17"
									},
									"scope": 3547,
									"src": "10699:983:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3237,
										"nodeType": "Block",
										"src": "11915:168:17",
										"statements": [
											{
												"id": 3236,
												"nodeType": "UncheckedBlock",
												"src": "11925:152:17",
												"statements": [
													{
														"assignments": [
															3215
														],
														"declarations": [
															{
																"constant": false,
																"id": 3215,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "11957:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3236,
																"src": "11949:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3214,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "11949:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3219,
														"initialValue": {
															"arguments": [
																{
																	"id": 3217,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3206,
																	"src": "11971:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3216,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3203,
																	3238
																],
																"referencedDeclaration": 3203,
																"src": "11966:4:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3218,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11966:11:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "11949:28:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3234,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3220,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3215,
																"src": "11998:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3229,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3222,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3209,
																						"src": "12025:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2504",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2504",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3221,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3546,
																					"src": "12008:16:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2504_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3223,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12008:26:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3228,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3226,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3224,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12038:1:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 3225,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3215,
																						"src": "12043:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12038:11:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3227,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3206,
																					"src": "12052:5:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12038:19:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12008:49:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3231,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12064:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3232,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12008:57:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3230,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12060:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3233,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12007:59:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "11998:68:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3213,
														"id": 3235,
														"nodeType": "Return",
														"src": "11991:75:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3204,
										"nodeType": "StructuredDocumentation",
										"src": "11688:142:17",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "11844:4:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3206,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11857:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3238,
												"src": "11849:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3205,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11849:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3209,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "11873:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3238,
												"src": "11864:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2504",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3208,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3207,
														"name": "Rounding",
														"nameLocations": [
															"11864:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2504,
														"src": "11864:8:17"
													},
													"referencedDeclaration": 2504,
													"src": "11864:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2504",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11848:34:17"
									},
									"returnParameters": {
										"id": 3213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3212,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3238,
												"src": "11906:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3211,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11906:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11905:9:17"
									},
									"scope": 3547,
									"src": "11835:248:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3366,
										"nodeType": "Block",
										"src": "12276:854:17",
										"statements": [
											{
												"assignments": [
													3247
												],
												"declarations": [
													{
														"constant": false,
														"id": 3247,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12294:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3366,
														"src": "12286:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3246,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12286:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3249,
												"initialValue": {
													"hexValue": "30",
													"id": 3248,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12303:1:17",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12286:18:17"
											},
											{
												"id": 3363,
												"nodeType": "UncheckedBlock",
												"src": "12314:787:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3250,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3241,
																"src": "12342:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 3253,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3251,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12351:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3252,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12357:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12351:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12342:17:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3266,
														"nodeType": "IfStatement",
														"src": "12338:103:17",
														"trueBody": {
															"id": 3265,
															"nodeType": "Block",
															"src": "12361:80:17",
															"statements": [
																{
																	"expression": {
																		"id": 3259,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3255,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3241,
																			"src": "12379:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 3258,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3256,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12388:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 3257,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12394:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12388:8:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12379:17:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3260,
																	"nodeType": "ExpressionStatement",
																	"src": "12379:17:17"
																},
																{
																	"expression": {
																		"id": 3263,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3261,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3247,
																			"src": "12414:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3262,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12424:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12414:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3264,
																	"nodeType": "ExpressionStatement",
																	"src": "12414:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3271,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3267,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3241,
																"src": "12458:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 3270,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3268,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12467:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12473:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12467:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12458:17:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3283,
														"nodeType": "IfStatement",
														"src": "12454:103:17",
														"trueBody": {
															"id": 3282,
															"nodeType": "Block",
															"src": "12477:80:17",
															"statements": [
																{
																	"expression": {
																		"id": 3276,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3272,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3241,
																			"src": "12495:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 3275,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3273,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12504:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 3274,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12510:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12504:8:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12495:17:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3277,
																	"nodeType": "ExpressionStatement",
																	"src": "12495:17:17"
																},
																{
																	"expression": {
																		"id": 3280,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3278,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3247,
																			"src": "12530:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3279,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12540:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12530:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3281,
																	"nodeType": "ExpressionStatement",
																	"src": "12530:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3288,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3284,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3241,
																"src": "12574:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 3287,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3285,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12583:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3286,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12589:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12583:8:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12574:17:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3300,
														"nodeType": "IfStatement",
														"src": "12570:103:17",
														"trueBody": {
															"id": 3299,
															"nodeType": "Block",
															"src": "12593:80:17",
															"statements": [
																{
																	"expression": {
																		"id": 3293,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3289,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3241,
																			"src": "12611:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 3292,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3290,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12620:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 3291,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12626:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12620:8:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12611:17:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3294,
																	"nodeType": "ExpressionStatement",
																	"src": "12611:17:17"
																},
																{
																	"expression": {
																		"id": 3297,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3295,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3247,
																			"src": "12646:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3296,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12656:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12646:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3298,
																	"nodeType": "ExpressionStatement",
																	"src": "12646:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3305,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3301,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3241,
																"src": "12690:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 3304,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3302,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12699:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3303,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12705:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "12699:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "12690:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3317,
														"nodeType": "IfStatement",
														"src": "12686:100:17",
														"trueBody": {
															"id": 3316,
															"nodeType": "Block",
															"src": "12708:78:17",
															"statements": [
																{
																	"expression": {
																		"id": 3310,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3306,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3241,
																			"src": "12726:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 3309,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3307,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12735:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 3308,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12741:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "12735:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "12726:16:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3311,
																	"nodeType": "ExpressionStatement",
																	"src": "12726:16:17"
																},
																{
																	"expression": {
																		"id": 3314,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3312,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3247,
																			"src": "12760:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3313,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12770:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "12760:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3315,
																	"nodeType": "ExpressionStatement",
																	"src": "12760:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3322,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3318,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3241,
																"src": "12803:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 3321,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3319,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12812:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 3320,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12818:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "12812:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "12803:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3334,
														"nodeType": "IfStatement",
														"src": "12799:100:17",
														"trueBody": {
															"id": 3333,
															"nodeType": "Block",
															"src": "12821:78:17",
															"statements": [
																{
																	"expression": {
																		"id": 3327,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3323,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3241,
																			"src": "12839:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 3326,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3324,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12848:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 3325,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12854:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "12848:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "12839:16:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3328,
																	"nodeType": "ExpressionStatement",
																	"src": "12839:16:17"
																},
																{
																	"expression": {
																		"id": 3331,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3329,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3247,
																			"src": "12873:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3330,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12883:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "12873:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3332,
																	"nodeType": "ExpressionStatement",
																	"src": "12873:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3339,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3335,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3241,
																"src": "12916:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 3338,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3336,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12925:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 3337,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12931:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "12925:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "12916:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3351,
														"nodeType": "IfStatement",
														"src": "12912:100:17",
														"trueBody": {
															"id": 3350,
															"nodeType": "Block",
															"src": "12934:78:17",
															"statements": [
																{
																	"expression": {
																		"id": 3344,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3340,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3241,
																			"src": "12952:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 3343,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 3341,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12961:2:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 3342,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12967:1:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "12961:7:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "12952:16:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3345,
																	"nodeType": "ExpressionStatement",
																	"src": "12952:16:17"
																},
																{
																	"expression": {
																		"id": 3348,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3346,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3247,
																			"src": "12986:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3347,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12996:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "12986:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3349,
																	"nodeType": "ExpressionStatement",
																	"src": "12986:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3356,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3352,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3241,
																"src": "13029:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 3355,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3353,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13038:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3354,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13044:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13038:7:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13029:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3362,
														"nodeType": "IfStatement",
														"src": "13025:66:17",
														"trueBody": {
															"id": 3361,
															"nodeType": "Block",
															"src": "13047:44:17",
															"statements": [
																{
																	"expression": {
																		"id": 3359,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3357,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3247,
																			"src": "13065:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3358,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13075:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13065:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3360,
																	"nodeType": "ExpressionStatement",
																	"src": "13065:11:17"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3364,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3247,
													"src": "13117:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3245,
												"id": 3365,
												"nodeType": "Return",
												"src": "13110:13:17"
											}
										]
									},
									"documentation": {
										"id": 3239,
										"nodeType": "StructuredDocumentation",
										"src": "12089:120:17",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 3367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12223:5:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3242,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3241,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12237:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3367,
												"src": "12229:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12229:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12228:15:17"
									},
									"returnParameters": {
										"id": 3245,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3244,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3367,
												"src": "12267:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3243,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12267:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12266:9:17"
									},
									"scope": 3547,
									"src": "12214:916:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3401,
										"nodeType": "Block",
										"src": "13365:170:17",
										"statements": [
											{
												"id": 3400,
												"nodeType": "UncheckedBlock",
												"src": "13375:154:17",
												"statements": [
													{
														"assignments": [
															3379
														],
														"declarations": [
															{
																"constant": false,
																"id": 3379,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13407:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3400,
																"src": "13399:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3378,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13399:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3383,
														"initialValue": {
															"arguments": [
																{
																	"id": 3381,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3370,
																	"src": "13422:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3380,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3367,
																	3402
																],
																"referencedDeclaration": 3367,
																"src": "13416:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3382,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13416:12:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13399:29:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3398,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3384,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3379,
																"src": "13449:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3393,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3386,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3373,
																						"src": "13476:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2504",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2504",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3385,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3546,
																					"src": "13459:16:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2504_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3387,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13459:26:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3392,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3390,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 3388,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13489:2:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 3389,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3379,
																						"src": "13495:6:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13489:12:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3391,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3370,
																					"src": "13504:5:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13489:20:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13459:50:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3395,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13516:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3396,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13459:58:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3394,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13512:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3397,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13458:60:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13449:69:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3377,
														"id": 3399,
														"nodeType": "Return",
														"src": "13442:76:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3368,
										"nodeType": "StructuredDocumentation",
										"src": "13136:143:17",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3402,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13293:5:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3374,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3370,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13307:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3402,
												"src": "13299:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3369,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13299:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3373,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13323:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3402,
												"src": "13314:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2504",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3372,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3371,
														"name": "Rounding",
														"nameLocations": [
															"13314:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2504,
														"src": "13314:8:17"
													},
													"referencedDeclaration": 2504,
													"src": "13314:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2504",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13298:34:17"
									},
									"returnParameters": {
										"id": 3377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3376,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3402,
												"src": "13356:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3375,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13356:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13355:9:17"
									},
									"scope": 3547,
									"src": "13284:251:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3488,
										"nodeType": "Block",
										"src": "13855:600:17",
										"statements": [
											{
												"assignments": [
													3411
												],
												"declarations": [
													{
														"constant": false,
														"id": 3411,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "13873:6:17",
														"nodeType": "VariableDeclaration",
														"scope": 3488,
														"src": "13865:14:17",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 3410,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "13865:7:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3413,
												"initialValue": {
													"hexValue": "30",
													"id": 3412,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "13882:1:17",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "13865:18:17"
											},
											{
												"id": 3485,
												"nodeType": "UncheckedBlock",
												"src": "13893:533:17",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3418,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3416,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3414,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3405,
																	"src": "13921:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 3415,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13930:3:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "13921:12:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3417,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "13936:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "13921:16:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3428,
														"nodeType": "IfStatement",
														"src": "13917:98:17",
														"trueBody": {
															"id": 3427,
															"nodeType": "Block",
															"src": "13939:76:17",
															"statements": [
																{
																	"expression": {
																		"id": 3421,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3419,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3405,
																			"src": "13957:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 3420,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13967:3:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "13957:13:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3422,
																	"nodeType": "ExpressionStatement",
																	"src": "13957:13:17"
																},
																{
																	"expression": {
																		"id": 3425,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3423,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3411,
																			"src": "13988:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3424,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13998:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "13988:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3426,
																	"nodeType": "ExpressionStatement",
																	"src": "13988:12:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3433,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3429,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3405,
																	"src": "14032:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 3430,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14041:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14032:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3432,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14046:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14032:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3443,
														"nodeType": "IfStatement",
														"src": "14028:95:17",
														"trueBody": {
															"id": 3442,
															"nodeType": "Block",
															"src": "14049:74:17",
															"statements": [
																{
																	"expression": {
																		"id": 3436,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3434,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3405,
																			"src": "14067:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 3435,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14077:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14067:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3437,
																	"nodeType": "ExpressionStatement",
																	"src": "14067:12:17"
																},
																{
																	"expression": {
																		"id": 3440,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3438,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3411,
																			"src": "14097:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 3439,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14107:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14097:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3441,
																	"nodeType": "ExpressionStatement",
																	"src": "14097:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3446,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3444,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3405,
																	"src": "14140:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 3445,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14149:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14140:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3447,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14154:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14140:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3458,
														"nodeType": "IfStatement",
														"src": "14136:95:17",
														"trueBody": {
															"id": 3457,
															"nodeType": "Block",
															"src": "14157:74:17",
															"statements": [
																{
																	"expression": {
																		"id": 3451,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3449,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3405,
																			"src": "14175:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 3450,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14185:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14175:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3452,
																	"nodeType": "ExpressionStatement",
																	"src": "14175:12:17"
																},
																{
																	"expression": {
																		"id": 3455,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3453,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3411,
																			"src": "14205:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 3454,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14215:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14205:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3456,
																	"nodeType": "ExpressionStatement",
																	"src": "14205:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3463,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3461,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3459,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3405,
																	"src": "14248:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 3460,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14257:2:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14248:11:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3462,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14262:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14248:15:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3473,
														"nodeType": "IfStatement",
														"src": "14244:95:17",
														"trueBody": {
															"id": 3472,
															"nodeType": "Block",
															"src": "14265:74:17",
															"statements": [
																{
																	"expression": {
																		"id": 3466,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3464,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3405,
																			"src": "14283:5:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 3465,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14293:2:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14283:12:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3467,
																	"nodeType": "ExpressionStatement",
																	"src": "14283:12:17"
																},
																{
																	"expression": {
																		"id": 3470,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3468,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3411,
																			"src": "14313:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 3469,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14323:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14313:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3471,
																	"nodeType": "ExpressionStatement",
																	"src": "14313:11:17"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3478,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3476,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3474,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3405,
																	"src": "14356:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 3475,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14365:1:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14356:10:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 3477,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14369:1:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14356:14:17",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 3484,
														"nodeType": "IfStatement",
														"src": "14352:64:17",
														"trueBody": {
															"id": 3483,
															"nodeType": "Block",
															"src": "14372:44:17",
															"statements": [
																{
																	"expression": {
																		"id": 3481,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 3479,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3411,
																			"src": "14390:6:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 3480,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14400:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14390:11:17",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 3482,
																	"nodeType": "ExpressionStatement",
																	"src": "14390:11:17"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 3486,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3411,
													"src": "14442:6:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 3409,
												"id": 3487,
												"nodeType": "Return",
												"src": "14435:13:17"
											}
										]
									},
									"documentation": {
										"id": 3403,
										"nodeType": "StructuredDocumentation",
										"src": "13541:246:17",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 3489,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "13801:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3406,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3405,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13816:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3489,
												"src": "13808:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3404,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13808:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13807:15:17"
									},
									"returnParameters": {
										"id": 3409,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3408,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3489,
												"src": "13846:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3407,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13846:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13845:9:17"
									},
									"scope": 3547,
									"src": "13792:663:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3526,
										"nodeType": "Block",
										"src": "14692:177:17",
										"statements": [
											{
												"id": 3525,
												"nodeType": "UncheckedBlock",
												"src": "14702:161:17",
												"statements": [
													{
														"assignments": [
															3501
														],
														"declarations": [
															{
																"constant": false,
																"id": 3501,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "14734:6:17",
																"nodeType": "VariableDeclaration",
																"scope": 3525,
																"src": "14726:14:17",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 3500,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "14726:7:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 3505,
														"initialValue": {
															"arguments": [
																{
																	"id": 3503,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3492,
																	"src": "14750:5:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 3502,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	3489,
																	3527
																],
																"referencedDeclaration": 3489,
																"src": "14743:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 3504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14743:13:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "14726:30:17"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3523,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 3506,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3501,
																"src": "14777:6:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 3518,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3508,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3495,
																						"src": "14804:8:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$2504",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$2504",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 3507,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3546,
																					"src": "14787:16:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$2504_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 3509,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "14787:26:17",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 3517,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 3515,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 3510,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "14817:1:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 3513,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 3511,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 3501,
																									"src": "14823:6:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 3512,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "14833:1:17",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "14823:11:17",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 3514,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "14822:13:17",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "14817:18:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 3516,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 3492,
																					"src": "14838:5:17",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "14817:26:17",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "14787:56:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 3520,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14850:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 3521,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "14787:64:17",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 3519,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14846:1:17",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 3522,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "14786:66:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "14777:75:17",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3499,
														"id": 3524,
														"nodeType": "Return",
														"src": "14770:82:17"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3490,
										"nodeType": "StructuredDocumentation",
										"src": "14461:144:17",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 3527,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14619:6:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3492,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14634:5:17",
												"nodeType": "VariableDeclaration",
												"scope": 3527,
												"src": "14626:13:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3491,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14626:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3495,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "14650:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3527,
												"src": "14641:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2504",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3494,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3493,
														"name": "Rounding",
														"nameLocations": [
															"14641:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2504,
														"src": "14641:8:17"
													},
													"referencedDeclaration": 2504,
													"src": "14641:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2504",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14625:34:17"
									},
									"returnParameters": {
										"id": 3499,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3498,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3527,
												"src": "14683:7:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3497,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14683:7:17",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14682:9:17"
									},
									"scope": 3547,
									"src": "14610:259:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3545,
										"nodeType": "Block",
										"src": "15067:48:17",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 3543,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 3541,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 3538,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3531,
																	"src": "15090:8:17",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$2504",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$2504",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 3537,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15084:5:17",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 3536,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15084:5:17",
																	"typeDescriptions": {}
																}
															},
															"id": 3539,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15084:15:17",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 3540,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15102:1:17",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15084:19:17",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 3542,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15107:1:17",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15084:24:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 3535,
												"id": 3544,
												"nodeType": "Return",
												"src": "15077:31:17"
											}
										]
									},
									"documentation": {
										"id": 3528,
										"nodeType": "StructuredDocumentation",
										"src": "14875:113:17",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 3546,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15002:16:17",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3531,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15028:8:17",
												"nodeType": "VariableDeclaration",
												"scope": 3546,
												"src": "15019:17:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$2504",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 3530,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 3529,
														"name": "Rounding",
														"nameLocations": [
															"15019:8:17"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 2504,
														"src": "15019:8:17"
													},
													"referencedDeclaration": 2504,
													"src": "15019:8:17",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$2504",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15018:19:17"
									},
									"returnParameters": {
										"id": 3535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3534,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3546,
												"src": "15061:4:17",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 3533,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15061:4:17",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15060:6:17"
									},
									"scope": 3547,
									"src": "14993:122:17",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3548,
							"src": "203:14914:17",
							"usedErrors": [
								2499
							],
							"usedEvents": []
						}
					],
					"src": "103:15015:17"
				},
				"id": 17
			},
			"@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts@5.0.2/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							3652
						]
					},
					"id": 3653,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3549,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "109:24:18"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 3550,
								"nodeType": "StructuredDocumentation",
								"src": "135:80:18",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3652,
							"linearizedBaseContracts": [
								3652
							],
							"name": "SignedMath",
							"nameLocation": "224:10:18",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3567,
										"nodeType": "Block",
										"src": "376:37:18",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3562,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3560,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3553,
															"src": "393:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 3561,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3555,
															"src": "397:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "393:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3564,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3555,
														"src": "405:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3565,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "393:13:18",
													"trueExpression": {
														"id": 3563,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3553,
														"src": "401:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3559,
												"id": 3566,
												"nodeType": "Return",
												"src": "386:20:18"
											}
										]
									},
									"documentation": {
										"id": 3551,
										"nodeType": "StructuredDocumentation",
										"src": "241:66:18",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 3568,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "321:3:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3556,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3553,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "332:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3568,
												"src": "325:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3552,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "325:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3555,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "342:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3568,
												"src": "335:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3554,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "335:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "324:20:18"
									},
									"returnParameters": {
										"id": 3559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3558,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3568,
												"src": "368:6:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3557,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "368:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "367:8:18"
									},
									"scope": 3652,
									"src": "312:101:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3585,
										"nodeType": "Block",
										"src": "555:37:18",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 3580,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 3578,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3571,
															"src": "572:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 3579,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 3573,
															"src": "576:1:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "572:5:18",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3582,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3573,
														"src": "584:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "572:13:18",
													"trueExpression": {
														"id": 3581,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3571,
														"src": "580:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3577,
												"id": 3584,
												"nodeType": "Return",
												"src": "565:20:18"
											}
										]
									},
									"documentation": {
										"id": 3569,
										"nodeType": "StructuredDocumentation",
										"src": "419:67:18",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3586,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "500:3:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3571,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "511:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3586,
												"src": "504:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3570,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "504:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3573,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "521:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3586,
												"src": "514:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3572,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "514:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "503:20:18"
									},
									"returnParameters": {
										"id": 3577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3576,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3586,
												"src": "547:6:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3575,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "547:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "546:8:18"
									},
									"scope": 3652,
									"src": "491:101:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3629,
										"nodeType": "Block",
										"src": "797:162:18",
										"statements": [
											{
												"assignments": [
													3597
												],
												"declarations": [
													{
														"constant": false,
														"id": 3597,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "866:1:18",
														"nodeType": "VariableDeclaration",
														"scope": 3629,
														"src": "859:8:18",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3596,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "859:6:18",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3610,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3609,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3600,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3598,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3589,
																	"src": "871:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3599,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3591,
																	"src": "875:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "871:5:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3601,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "870:7:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3607,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3604,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3602,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3589,
																				"src": "882:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3603,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3591,
																				"src": "886:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "882:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3605,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "881:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3606,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "892:1:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "881:12:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3608,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "880:14:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "870:24:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "859:35:18"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3627,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3611,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3597,
														"src": "911:1:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3625,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3619,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3616,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3597,
																						"src": "931:1:18",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3615,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "923:7:18",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3614,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "923:7:18",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3617,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "923:10:18",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3618,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "937:3:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "923:17:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3613,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "916:6:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3612,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "916:6:18",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3620,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "916:25:18",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3623,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3621,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3589,
																				"src": "945:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3622,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3591,
																				"src": "949:1:18",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "945:5:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3624,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "944:7:18",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "916:35:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3626,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "915:37:18",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "911:41:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3595,
												"id": 3628,
												"nodeType": "Return",
												"src": "904:48:18"
											}
										]
									},
									"documentation": {
										"id": 3587,
										"nodeType": "StructuredDocumentation",
										"src": "598:126:18",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3630,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "738:7:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3592,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3589,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "753:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3630,
												"src": "746:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3588,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "746:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3591,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "763:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3630,
												"src": "756:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3590,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "756:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "745:20:18"
									},
									"returnParameters": {
										"id": 3595,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3594,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3630,
												"src": "789:6:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3593,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "789:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "788:8:18"
									},
									"scope": 3652,
									"src": "729:230:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3650,
										"nodeType": "Block",
										"src": "1103:158:18",
										"statements": [
											{
												"id": 3649,
												"nodeType": "UncheckedBlock",
												"src": "1113:142:18",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3642,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3640,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3633,
																			"src": "1228:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3641,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1233:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1228:6:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3645,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1241:2:18",
																		"subExpression": {
																			"id": 3644,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3633,
																			"src": "1242:1:18",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3646,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1228:15:18",
																	"trueExpression": {
																		"id": 3643,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3633,
																		"src": "1237:1:18",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3639,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1220:7:18",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3638,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1220:7:18",
																	"typeDescriptions": {}
																}
															},
															"id": 3647,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1220:24:18",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3637,
														"id": 3648,
														"nodeType": "Return",
														"src": "1213:31:18"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3631,
										"nodeType": "StructuredDocumentation",
										"src": "965:78:18",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3651,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1057:3:18",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3634,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3633,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1068:1:18",
												"nodeType": "VariableDeclaration",
												"scope": 3651,
												"src": "1061:8:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3632,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1061:6:18",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1060:10:18"
									},
									"returnParameters": {
										"id": 3637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3636,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3651,
												"src": "1094:7:18",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1094:7:18",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1093:9:18"
									},
									"scope": 3652,
									"src": "1048:213:18",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3653,
							"src": "216:1047:18",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "109:1155:18"
				},
				"id": 18
			},
			"DADDY TATE.sol": {
				"ast": {
					"absolutePath": "DADDY TATE.sol",
					"exportedSymbols": {
						"Context": [
							1194
						],
						"DADDYTATEFRIEND": [
							3694
						],
						"ECDSA": [
							2192
						],
						"EIP712": [
							2419
						],
						"ERC20": [
							824
						],
						"ERC20Burnable": [
							948
						],
						"ERC20Permit": [
							1102
						],
						"IERC20": [
							902
						],
						"IERC20Errors": [
							214
						],
						"IERC20Metadata": [
							1128
						],
						"IERC20Permit": [
							1164
						],
						"Nonces": [
							1262
						],
						"Ownable": [
							147
						]
					},
					"id": 3695,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 3654,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "83:24:19"
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
							"file": "@openzeppelin/contracts@5.0.2/token/ERC20/ERC20.sol",
							"id": 3655,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3695,
							"sourceUnit": 825,
							"src": "111:61:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol",
							"file": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Burnable.sol",
							"id": 3656,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3695,
							"sourceUnit": 949,
							"src": "174:80:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol",
							"file": "@openzeppelin/contracts@5.0.2/token/ERC20/extensions/ERC20Permit.sol",
							"id": 3657,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3695,
							"sourceUnit": 1103,
							"src": "256:78:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts@5.0.2/access/Ownable.sol",
							"file": "@openzeppelin/contracts@5.0.2/access/Ownable.sol",
							"id": 3658,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 3695,
							"sourceUnit": 148,
							"src": "336:58:19",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 3659,
										"name": "ERC20",
										"nameLocations": [
											"426:5:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 824,
										"src": "426:5:19"
									},
									"id": 3660,
									"nodeType": "InheritanceSpecifier",
									"src": "426:5:19"
								},
								{
									"baseName": {
										"id": 3661,
										"name": "ERC20Burnable",
										"nameLocations": [
											"433:13:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 948,
										"src": "433:13:19"
									},
									"id": 3662,
									"nodeType": "InheritanceSpecifier",
									"src": "433:13:19"
								},
								{
									"baseName": {
										"id": 3663,
										"name": "ERC20Permit",
										"nameLocations": [
											"448:11:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1102,
										"src": "448:11:19"
									},
									"id": 3664,
									"nodeType": "InheritanceSpecifier",
									"src": "448:11:19"
								},
								{
									"baseName": {
										"id": 3665,
										"name": "Ownable",
										"nameLocations": [
											"461:7:19"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 147,
										"src": "461:7:19"
									},
									"id": 3666,
									"nodeType": "InheritanceSpecifier",
									"src": "461:7:19"
								}
							],
							"canonicalName": "DADDYTATEFRIEND",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 3694,
							"linearizedBaseContracts": [
								3694,
								147,
								1102,
								1262,
								2419,
								172,
								1164,
								948,
								824,
								214,
								1128,
								902,
								1194
							],
							"name": "DADDYTATEFRIEND",
							"nameLocation": "407:15:19",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 3692,
										"nodeType": "Block",
										"src": "638:67:19",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 3682,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "655:3:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 3683,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "659:6:19",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "655:10:19",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 3689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31303030303030303030",
																"id": 3684,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "667:10:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000_by_1",
																	"typeString": "int_const 1000000000"
																},
																"value": "1000000000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 3688,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 3685,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "680:2:19",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 3686,
																		"name": "decimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 388,
																		"src": "686:8:19",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 3687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "686:10:19",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "680:16:19",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "667:29:19",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 3681,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 664,
														"src": "649:5:19",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 3690,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "649:48:19",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 3691,
												"nodeType": "ExpressionStatement",
												"src": "649:48:19"
											}
										]
									},
									"id": 3693,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "4441444459205441544520465249454e44",
													"id": 3671,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "525:19:19",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_076efe0fe54ca55a17bff12dd4b99ac83f891af90555448923d46ccd3c033edc",
														"typeString": "literal_string \"DADDY TATE FRIEND\""
													},
													"value": "DADDY TATE FRIEND"
												},
												{
													"hexValue": "44414444592054415445",
													"id": 3672,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "546:12:19",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_5ec26e4ae2924ef0bca6dfc8ca3de2a3b449843dd7a7739b56c859a524c7d52c",
														"typeString": "literal_string \"DADDY TATE\""
													},
													"value": "DADDY TATE"
												}
											],
											"id": 3673,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3670,
												"name": "ERC20",
												"nameLocations": [
													"519:5:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 824,
												"src": "519:5:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "519:40:19"
										},
										{
											"arguments": [
												{
													"hexValue": "4441444459205441544520465249454e44",
													"id": 3675,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "581:19:19",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_076efe0fe54ca55a17bff12dd4b99ac83f891af90555448923d46ccd3c033edc",
														"typeString": "literal_string \"DADDY TATE FRIEND\""
													},
													"value": "DADDY TATE FRIEND"
												}
											],
											"id": 3676,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3674,
												"name": "ERC20Permit",
												"nameLocations": [
													"569:11:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1102,
												"src": "569:11:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "569:32:19"
										},
										{
											"arguments": [
												{
													"id": 3678,
													"name": "initialOwner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 3668,
													"src": "619:12:19",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 3679,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 3677,
												"name": "Ownable",
												"nameLocations": [
													"611:7:19"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 147,
												"src": "611:7:19"
											},
											"nodeType": "ModifierInvocation",
											"src": "611:21:19"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3669,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3668,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "496:12:19",
												"nodeType": "VariableDeclaration",
												"scope": 3693,
												"src": "488:20:19",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3667,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "488:7:19",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "487:22:19"
									},
									"returnParameters": {
										"id": 3680,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "638:0:19"
									},
									"scope": 3694,
									"src": "476:229:19",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 3695,
							"src": "398:310:19",
							"usedErrors": [
								13,
								18,
								184,
								189,
								194,
								203,
								208,
								213,
								979,
								986,
								1204,
								1276,
								1278,
								1855,
								1860,
								1865
							],
							"usedEvents": [
								24,
								152,
								836,
								845
							]
						}
					],
					"src": "83:627:19"
				},
				"id": 19
			}
		}
	}
}